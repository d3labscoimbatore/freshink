"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lottiefiles";
exports.ids = ["vendor-chunks/@lottiefiles"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lottiefiles/lottie-player/dist/lottie-player.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@lottiefiles/lottie-player/dist/lottie-player.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LottiePlayer: () => (/* binding */ LottiePlayer),\n/* harmony export */   PlayMode: () => (/* binding */ PlayMode),\n/* harmony export */   PlayerEvents: () => (/* binding */ PlayerEvents),\n/* harmony export */   PlayerState: () => (/* binding */ PlayerState),\n/* harmony export */   parseSrc: () => (/* binding */ parseSrc)\n/* harmony export */ });\nfunction _asyncIterator(t1) {\n    var e1, r1, i1, s1 = 2;\n    for(\"undefined\" != typeof Symbol && (r1 = Symbol.asyncIterator, i1 = Symbol.iterator); s1--;){\n        if (r1 && null != (e1 = t1[r1])) return e1.call(t1);\n        if (i1 && null != (e1 = t1[i1])) return new AsyncFromSyncIterator(e1.call(t1));\n        r1 = \"@@asyncIterator\", i1 = \"@@iterator\";\n    }\n    throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(t1) {\n    function e1(t1) {\n        if (Object(t1) !== t1) return Promise.reject(new TypeError(t1 + \" is not an object.\"));\n        var e1 = t1.done;\n        return Promise.resolve(t1.value).then(function(t1) {\n            return {\n                value: t1,\n                done: e1\n            };\n        });\n    }\n    return AsyncFromSyncIterator = function(t1) {\n        this.s = t1, this.n = t1.next;\n    }, AsyncFromSyncIterator.prototype = {\n        s: null,\n        n: null,\n        next: function() {\n            return e1(this.n.apply(this.s, arguments));\n        },\n        return: function(t1) {\n            var r1 = this.s.return;\n            return void 0 === r1 ? Promise.resolve({\n                value: t1,\n                done: !0\n            }) : e1(r1.apply(this.s, arguments));\n        },\n        throw: function(t1) {\n            var r1 = this.s.return;\n            return void 0 === r1 ? Promise.reject(t1) : e1(r1.apply(this.s, arguments));\n        }\n    }, new AsyncFromSyncIterator(t1);\n}\nvar REACT_ELEMENT_TYPE;\nfunction _jsx(t1, e1, r1, i1) {\n    REACT_ELEMENT_TYPE || (REACT_ELEMENT_TYPE = \"function\" == typeof Symbol && Symbol.for && Symbol.for(\"react.element\") || 60103);\n    var s1 = t1 && t1.defaultProps, a1 = arguments.length - 3;\n    if (e1 || 0 === a1 || (e1 = {\n        children: void 0\n    }), 1 === a1) e1.children = i1;\n    else if (a1 > 1) {\n        for(var n1 = new Array(a1), o1 = 0; o1 < a1; o1++)n1[o1] = arguments[o1 + 3];\n        e1.children = n1;\n    }\n    if (e1 && s1) for(var h1 in s1)void 0 === e1[h1] && (e1[h1] = s1[h1]);\n    else e1 || (e1 = s1 || {});\n    return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: t1,\n        key: void 0 === r1 ? null : \"\" + r1,\n        ref: null,\n        props: e1,\n        _owner: null\n    };\n}\nfunction ownKeys(t1, e1) {\n    var r1 = Object.keys(t1);\n    if (Object.getOwnPropertySymbols) {\n        var i1 = Object.getOwnPropertySymbols(t1);\n        e1 && (i1 = i1.filter(function(e1) {\n            return Object.getOwnPropertyDescriptor(t1, e1).enumerable;\n        })), r1.push.apply(r1, i1);\n    }\n    return r1;\n}\nfunction _objectSpread2(t1) {\n    for(var e1 = 1; e1 < arguments.length; e1++){\n        var r1 = null != arguments[e1] ? arguments[e1] : {};\n        e1 % 2 ? ownKeys(Object(r1), !0).forEach(function(e1) {\n            _defineProperty(t1, e1, r1[e1]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t1, Object.getOwnPropertyDescriptors(r1)) : ownKeys(Object(r1)).forEach(function(e1) {\n            Object.defineProperty(t1, e1, Object.getOwnPropertyDescriptor(r1, e1));\n        });\n    }\n    return t1;\n}\nfunction _typeof(t1) {\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n        return typeof t1;\n    } : function(t1) {\n        return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n    }, _typeof(t1);\n}\nfunction _wrapRegExp() {\n    _wrapRegExp = function(t1, e1) {\n        return new r1(t1, void 0, e1);\n    };\n    var t1 = RegExp.prototype, e1 = new WeakMap;\n    function r1(t1, i1, s1) {\n        var a1 = new RegExp(t1, i1);\n        return e1.set(a1, s1 || e1.get(t1)), _setPrototypeOf(a1, r1.prototype);\n    }\n    function i1(t1, r1) {\n        var i1 = e1.get(r1);\n        return Object.keys(i1).reduce(function(e1, r1) {\n            return e1[r1] = t1[i1[r1]], e1;\n        }, Object.create(null));\n    }\n    return _inherits(r1, RegExp), r1.prototype.exec = function(e1) {\n        var r1 = t1.exec.call(this, e1);\n        return r1 && (r1.groups = i1(r1, this)), r1;\n    }, r1.prototype[Symbol.replace] = function(r1, s1) {\n        if (\"string\" == typeof s1) {\n            var a1 = e1.get(this);\n            return t1[Symbol.replace].call(this, r1, s1.replace(/\\$<([^>]+)>/g, function(t1, e1) {\n                return \"$\" + a1[e1];\n            }));\n        }\n        if (\"function\" == typeof s1) {\n            var n1 = this;\n            return t1[Symbol.replace].call(this, r1, function() {\n                var t1 = arguments;\n                return \"object\" != typeof t1[t1.length - 1] && (t1 = [].slice.call(t1)).push(i1(t1, n1)), s1.apply(this, t1);\n            });\n        }\n        return t1[Symbol.replace].call(this, r1, s1);\n    }, _wrapRegExp.apply(this, arguments);\n}\nfunction _AwaitValue(t1) {\n    this.wrapped = t1;\n}\nfunction _AsyncGenerator(t1) {\n    var e1, r1;\n    function i1(e1, r1) {\n        try {\n            var a1 = t1[e1](r1), n1 = a1.value, o1 = n1 instanceof _AwaitValue;\n            Promise.resolve(o1 ? n1.wrapped : n1).then(function(t1) {\n                o1 ? i1(\"return\" === e1 ? \"return\" : \"next\", t1) : s1(a1.done ? \"return\" : \"normal\", t1);\n            }, function(t1) {\n                i1(\"throw\", t1);\n            });\n        } catch (t1) {\n            s1(\"throw\", t1);\n        }\n    }\n    function s1(t1, s1) {\n        switch(t1){\n            case \"return\":\n                e1.resolve({\n                    value: s1,\n                    done: !0\n                });\n                break;\n            case \"throw\":\n                e1.reject(s1);\n                break;\n            default:\n                e1.resolve({\n                    value: s1,\n                    done: !1\n                });\n        }\n        (e1 = e1.next) ? i1(e1.key, e1.arg) : r1 = null;\n    }\n    this._invoke = function(t1, s1) {\n        return new Promise(function(a1, n1) {\n            var o1 = {\n                key: t1,\n                arg: s1,\n                resolve: a1,\n                reject: n1,\n                next: null\n            };\n            r1 ? r1 = r1.next = o1 : (e1 = r1 = o1, i1(t1, s1));\n        });\n    }, \"function\" != typeof t1.return && (this.return = void 0);\n}\nfunction _wrapAsyncGenerator(t1) {\n    return function() {\n        return new _AsyncGenerator(t1.apply(this, arguments));\n    };\n}\nfunction _awaitAsyncGenerator(t1) {\n    return new _AwaitValue(t1);\n}\nfunction _asyncGeneratorDelegate(t1, e1) {\n    var r1 = {}, i1 = !1;\n    function s1(r1, s1) {\n        return i1 = !0, s1 = new Promise(function(e1) {\n            e1(t1[r1](s1));\n        }), {\n            done: !1,\n            value: e1(s1)\n        };\n    }\n    return r1[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function() {\n        return this;\n    }, r1.next = function(t1) {\n        return i1 ? (i1 = !1, t1) : s1(\"next\", t1);\n    }, \"function\" == typeof t1.throw && (r1.throw = function(t1) {\n        if (i1) throw i1 = !1, t1;\n        return s1(\"throw\", t1);\n    }), \"function\" == typeof t1.return && (r1.return = function(t1) {\n        return i1 ? (i1 = !1, t1) : s1(\"return\", t1);\n    }), r1;\n}\nfunction asyncGeneratorStep(t1, e1, r1, i1, s1, a1, n1) {\n    try {\n        var o1 = t1[a1](n1), h1 = o1.value;\n    } catch (t1) {\n        return void r1(t1);\n    }\n    o1.done ? e1(h1) : Promise.resolve(h1).then(i1, s1);\n}\nfunction _asyncToGenerator(t1) {\n    return function() {\n        var e1 = this, r1 = arguments;\n        return new Promise(function(i1, s1) {\n            var a1 = t1.apply(e1, r1);\n            function n1(t1) {\n                asyncGeneratorStep(a1, i1, s1, n1, o1, \"next\", t1);\n            }\n            function o1(t1) {\n                asyncGeneratorStep(a1, i1, s1, n1, o1, \"throw\", t1);\n            }\n            n1(void 0);\n        });\n    };\n}\nfunction _classCallCheck(t1, e1) {\n    if (!(t1 instanceof e1)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(t1, e1) {\n    for(var r1 = 0; r1 < e1.length; r1++){\n        var i1 = e1[r1];\n        i1.enumerable = i1.enumerable || !1, i1.configurable = !0, \"value\" in i1 && (i1.writable = !0), Object.defineProperty(t1, i1.key, i1);\n    }\n}\nfunction _createClass(t1, e1, r1) {\n    return e1 && _defineProperties(t1.prototype, e1), r1 && _defineProperties(t1, r1), Object.defineProperty(t1, \"prototype\", {\n        writable: !1\n    }), t1;\n}\nfunction _defineEnumerableProperties(t1, e1) {\n    for(var r1 in e1){\n        (a1 = e1[r1]).configurable = a1.enumerable = !0, \"value\" in a1 && (a1.writable = !0), Object.defineProperty(t1, r1, a1);\n    }\n    if (Object.getOwnPropertySymbols) for(var i1 = Object.getOwnPropertySymbols(e1), s1 = 0; s1 < i1.length; s1++){\n        var a1, n1 = i1[s1];\n        (a1 = e1[n1]).configurable = a1.enumerable = !0, \"value\" in a1 && (a1.writable = !0), Object.defineProperty(t1, n1, a1);\n    }\n    return t1;\n}\nfunction _defaults(t1, e1) {\n    for(var r1 = Object.getOwnPropertyNames(e1), i1 = 0; i1 < r1.length; i1++){\n        var s1 = r1[i1], a1 = Object.getOwnPropertyDescriptor(e1, s1);\n        a1 && a1.configurable && void 0 === t1[s1] && Object.defineProperty(t1, s1, a1);\n    }\n    return t1;\n}\nfunction _defineProperty(t1, e1, r1) {\n    return e1 in t1 ? Object.defineProperty(t1, e1, {\n        value: r1,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : t1[e1] = r1, t1;\n}\nfunction _extends() {\n    return _extends = Object.assign || function(t1) {\n        for(var e1 = 1; e1 < arguments.length; e1++){\n            var r1 = arguments[e1];\n            for(var i1 in r1)Object.prototype.hasOwnProperty.call(r1, i1) && (t1[i1] = r1[i1]);\n        }\n        return t1;\n    }, _extends.apply(this, arguments);\n}\nfunction _objectSpread(t1) {\n    for(var e1 = 1; e1 < arguments.length; e1++){\n        var r1 = null != arguments[e1] ? Object(arguments[e1]) : {}, i1 = Object.keys(r1);\n        \"function\" == typeof Object.getOwnPropertySymbols && i1.push.apply(i1, Object.getOwnPropertySymbols(r1).filter(function(t1) {\n            return Object.getOwnPropertyDescriptor(r1, t1).enumerable;\n        })), i1.forEach(function(e1) {\n            _defineProperty(t1, e1, r1[e1]);\n        });\n    }\n    return t1;\n}\nfunction _inherits(t1, e1) {\n    if (\"function\" != typeof e1 && null !== e1) throw new TypeError(\"Super expression must either be null or a function\");\n    t1.prototype = Object.create(e1 && e1.prototype, {\n        constructor: {\n            value: t1,\n            writable: !0,\n            configurable: !0\n        }\n    }), Object.defineProperty(t1, \"prototype\", {\n        writable: !1\n    }), e1 && _setPrototypeOf(t1, e1);\n}\nfunction _inheritsLoose(t1, e1) {\n    t1.prototype = Object.create(e1.prototype), t1.prototype.constructor = t1, _setPrototypeOf(t1, e1);\n}\nfunction _getPrototypeOf(t1) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(t1) {\n        return t1.__proto__ || Object.getPrototypeOf(t1);\n    }, _getPrototypeOf(t1);\n}\nfunction _setPrototypeOf(t1, e1) {\n    return _setPrototypeOf = Object.setPrototypeOf || function(t1, e1) {\n        return t1.__proto__ = e1, t1;\n    }, _setPrototypeOf(t1, e1);\n}\nfunction _isNativeReflectConstruct() {\n    if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n    if (Reflect.construct.sham) return !1;\n    if (\"function\" == typeof Proxy) return !0;\n    try {\n        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;\n    } catch (t1) {\n        return !1;\n    }\n}\nfunction _construct(t1, e1, r1) {\n    return _construct = _isNativeReflectConstruct() ? Reflect.construct : function(t1, e1, r1) {\n        var i1 = [\n            null\n        ];\n        i1.push.apply(i1, e1);\n        var s1 = new (Function.bind.apply(t1, i1));\n        return r1 && _setPrototypeOf(s1, r1.prototype), s1;\n    }, _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(t1) {\n    return -1 !== Function.toString.call(t1).indexOf(\"[native code]\");\n}\nfunction _wrapNativeSuper(t1) {\n    var e1 = \"function\" == typeof Map ? new Map : void 0;\n    return _wrapNativeSuper = function(t1) {\n        if (null === t1 || !_isNativeFunction(t1)) return t1;\n        if (\"function\" != typeof t1) throw new TypeError(\"Super expression must either be null or a function\");\n        if (void 0 !== e1) {\n            if (e1.has(t1)) return e1.get(t1);\n            e1.set(t1, r1);\n        }\n        function r1() {\n            return _construct(t1, arguments, _getPrototypeOf(this).constructor);\n        }\n        return r1.prototype = Object.create(t1.prototype, {\n            constructor: {\n                value: r1,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        }), _setPrototypeOf(r1, t1);\n    }, _wrapNativeSuper(t1);\n}\nfunction _instanceof(t1, e1) {\n    return null != e1 && \"undefined\" != typeof Symbol && e1[Symbol.hasInstance] ? !!e1[Symbol.hasInstance](t1) : t1 instanceof e1;\n}\nfunction _interopRequireDefault(t1) {\n    return t1 && t1.__esModule ? t1 : {\n        default: t1\n    };\n}\nfunction _getRequireWildcardCache(t1) {\n    if (\"function\" != typeof WeakMap) return null;\n    var e1 = new WeakMap, r1 = new WeakMap;\n    return (_getRequireWildcardCache = function(t1) {\n        return t1 ? r1 : e1;\n    })(t1);\n}\nfunction _interopRequireWildcard(t1, e1) {\n    if (!e1 && t1 && t1.__esModule) return t1;\n    if (null === t1 || \"object\" != typeof t1 && \"function\" != typeof t1) return {\n        default: t1\n    };\n    var r1 = _getRequireWildcardCache(e1);\n    if (r1 && r1.has(t1)) return r1.get(t1);\n    var i1 = {}, s1 = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var a1 in t1)if (\"default\" !== a1 && Object.prototype.hasOwnProperty.call(t1, a1)) {\n        var n1 = s1 ? Object.getOwnPropertyDescriptor(t1, a1) : null;\n        n1 && (n1.get || n1.set) ? Object.defineProperty(i1, a1, n1) : i1[a1] = t1[a1];\n    }\n    return i1.default = t1, r1 && r1.set(t1, i1), i1;\n}\nfunction _newArrowCheck(t1, e1) {\n    if (t1 !== e1) throw new TypeError(\"Cannot instantiate an arrow function\");\n}\nfunction _objectDestructuringEmpty(t1) {\n    if (null == t1) throw new TypeError(\"Cannot destructure undefined\");\n}\nfunction _objectWithoutPropertiesLoose(t1, e1) {\n    if (null == t1) return {};\n    var r1, i1, s1 = {}, a1 = Object.keys(t1);\n    for(i1 = 0; i1 < a1.length; i1++)r1 = a1[i1], e1.indexOf(r1) >= 0 || (s1[r1] = t1[r1]);\n    return s1;\n}\nfunction _objectWithoutProperties(t1, e1) {\n    if (null == t1) return {};\n    var r1, i1, s1 = _objectWithoutPropertiesLoose(t1, e1);\n    if (Object.getOwnPropertySymbols) {\n        var a1 = Object.getOwnPropertySymbols(t1);\n        for(i1 = 0; i1 < a1.length; i1++)r1 = a1[i1], e1.indexOf(r1) >= 0 || Object.prototype.propertyIsEnumerable.call(t1, r1) && (s1[r1] = t1[r1]);\n    }\n    return s1;\n}\nfunction _assertThisInitialized(t1) {\n    if (void 0 === t1) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t1;\n}\nfunction _possibleConstructorReturn(t1, e1) {\n    if (e1 && (\"object\" == typeof e1 || \"function\" == typeof e1)) return e1;\n    if (void 0 !== e1) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t1);\n}\nfunction _createSuper(t1) {\n    var e1 = _isNativeReflectConstruct();\n    return function() {\n        var r1, i1 = _getPrototypeOf(t1);\n        if (e1) {\n            var s1 = _getPrototypeOf(this).constructor;\n            r1 = Reflect.construct(i1, arguments, s1);\n        } else r1 = i1.apply(this, arguments);\n        return _possibleConstructorReturn(this, r1);\n    };\n}\nfunction _superPropBase(t1, e1) {\n    for(; !Object.prototype.hasOwnProperty.call(t1, e1) && null !== (t1 = _getPrototypeOf(t1)););\n    return t1;\n}\nfunction _get() {\n    return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get : function(t1, e1, r1) {\n        var i1 = _superPropBase(t1, e1);\n        if (i1) {\n            var s1 = Object.getOwnPropertyDescriptor(i1, e1);\n            return s1.get ? s1.get.call(arguments.length < 3 ? t1 : r1) : s1.value;\n        }\n    }, _get.apply(this, arguments);\n}\nfunction set(t1, e1, r1, i1) {\n    return set = \"undefined\" != typeof Reflect && Reflect.set ? Reflect.set : function(t1, e1, r1, i1) {\n        var s1, a1 = _superPropBase(t1, e1);\n        if (a1) {\n            if ((s1 = Object.getOwnPropertyDescriptor(a1, e1)).set) return s1.set.call(i1, r1), !0;\n            if (!s1.writable) return !1;\n        }\n        if (s1 = Object.getOwnPropertyDescriptor(i1, e1)) {\n            if (!s1.writable) return !1;\n            s1.value = r1, Object.defineProperty(i1, e1, s1);\n        } else _defineProperty(i1, e1, r1);\n        return !0;\n    }, set(t1, e1, r1, i1);\n}\nfunction _set(t1, e1, r1, i1, s1) {\n    if (!set(t1, e1, r1, i1 || t1) && s1) throw new Error(\"failed to set property\");\n    return r1;\n}\nfunction _taggedTemplateLiteral(t1, e1) {\n    return e1 || (e1 = t1.slice(0)), Object.freeze(Object.defineProperties(t1, {\n        raw: {\n            value: Object.freeze(e1)\n        }\n    }));\n}\nfunction _taggedTemplateLiteralLoose(t1, e1) {\n    return e1 || (e1 = t1.slice(0)), t1.raw = e1, t1;\n}\nfunction _readOnlyError(t1) {\n    throw new TypeError('\"' + t1 + '\" is read-only');\n}\nfunction _writeOnlyError(t1) {\n    throw new TypeError('\"' + t1 + '\" is write-only');\n}\nfunction _classNameTDZError(t1) {\n    throw new Error('Class \"' + t1 + '\" cannot be referenced in computed property keys.');\n}\nfunction _temporalUndefined() {}\nfunction _tdz(t1) {\n    throw new ReferenceError(t1 + \" is not defined - temporal dead zone\");\n}\nfunction _temporalRef(t1, e1) {\n    return t1 === _temporalUndefined ? _tdz(e1) : t1;\n}\nfunction _slicedToArray(t1, e1) {\n    return _arrayWithHoles(t1) || _iterableToArrayLimit(t1, e1) || _unsupportedIterableToArray(t1, e1) || _nonIterableRest();\n}\nfunction _slicedToArrayLoose(t1, e1) {\n    return _arrayWithHoles(t1) || _iterableToArrayLimitLoose(t1, e1) || _unsupportedIterableToArray(t1, e1) || _nonIterableRest();\n}\nfunction _toArray(t1) {\n    return _arrayWithHoles(t1) || _iterableToArray(t1) || _unsupportedIterableToArray(t1) || _nonIterableRest();\n}\nfunction _toConsumableArray(t1) {\n    return _arrayWithoutHoles(t1) || _iterableToArray(t1) || _unsupportedIterableToArray(t1) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(t1) {\n    if (Array.isArray(t1)) return _arrayLikeToArray(t1);\n}\nfunction _arrayWithHoles(t1) {\n    if (Array.isArray(t1)) return t1;\n}\nfunction _maybeArrayLike(t1, e1, r1) {\n    if (e1 && !Array.isArray(e1) && \"number\" == typeof e1.length) {\n        var i1 = e1.length;\n        return _arrayLikeToArray(e1, void 0 !== r1 && r1 < i1 ? r1 : i1);\n    }\n    return t1(e1, r1);\n}\nfunction _iterableToArray(t1) {\n    if (\"undefined\" != typeof Symbol && null != t1[Symbol.iterator] || null != t1[\"@@iterator\"]) return Array.from(t1);\n}\nfunction _iterableToArrayLimit(t1, e1) {\n    var r1 = null == t1 ? null : \"undefined\" != typeof Symbol && t1[Symbol.iterator] || t1[\"@@iterator\"];\n    if (null != r1) {\n        var i1, s1, a1 = [], n1 = !0, o1 = !1;\n        try {\n            for(r1 = r1.call(t1); !(n1 = (i1 = r1.next()).done) && (a1.push(i1.value), !e1 || a1.length !== e1); n1 = !0);\n        } catch (t1) {\n            o1 = !0, s1 = t1;\n        } finally{\n            try {\n                n1 || null == r1.return || r1.return();\n            } finally{\n                if (o1) throw s1;\n            }\n        }\n        return a1;\n    }\n}\nfunction _iterableToArrayLimitLoose(t1, e1) {\n    var r1 = t1 && (\"undefined\" != typeof Symbol && t1[Symbol.iterator] || t1[\"@@iterator\"]);\n    if (null != r1) {\n        var i1 = [];\n        for(r1 = r1.call(t1), _step; !(_step = r1.next()).done && (i1.push(_step.value), !e1 || i1.length !== e1););\n        return i1;\n    }\n}\nfunction _unsupportedIterableToArray(t1, e1) {\n    if (t1) {\n        if (\"string\" == typeof t1) return _arrayLikeToArray(t1, e1);\n        var r1 = Object.prototype.toString.call(t1).slice(8, -1);\n        return \"Object\" === r1 && t1.constructor && (r1 = t1.constructor.name), \"Map\" === r1 || \"Set\" === r1 ? Array.from(t1) : \"Arguments\" === r1 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r1) ? _arrayLikeToArray(t1, e1) : void 0;\n    }\n}\nfunction _arrayLikeToArray(t1, e1) {\n    (null == e1 || e1 > t1.length) && (e1 = t1.length);\n    for(var r1 = 0, i1 = new Array(e1); r1 < e1; r1++)i1[r1] = t1[r1];\n    return i1;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(t1, e1) {\n    var r1 = \"undefined\" != typeof Symbol && t1[Symbol.iterator] || t1[\"@@iterator\"];\n    if (!r1) {\n        if (Array.isArray(t1) || (r1 = _unsupportedIterableToArray(t1)) || e1 && t1 && \"number\" == typeof t1.length) {\n            r1 && (t1 = r1);\n            var i1 = 0, s1 = function() {};\n            return {\n                s: s1,\n                n: function() {\n                    return i1 >= t1.length ? {\n                        done: !0\n                    } : {\n                        done: !1,\n                        value: t1[i1++]\n                    };\n                },\n                e: function(t1) {\n                    throw t1;\n                },\n                f: s1\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var a1, n1 = !0, o1 = !1;\n    return {\n        s: function() {\n            r1 = r1.call(t1);\n        },\n        n: function() {\n            var t1 = r1.next();\n            return n1 = t1.done, t1;\n        },\n        e: function(t1) {\n            o1 = !0, a1 = t1;\n        },\n        f: function() {\n            try {\n                n1 || null == r1.return || r1.return();\n            } finally{\n                if (o1) throw a1;\n            }\n        }\n    };\n}\nfunction _createForOfIteratorHelperLoose(t1, e1) {\n    var r1 = \"undefined\" != typeof Symbol && t1[Symbol.iterator] || t1[\"@@iterator\"];\n    if (r1) return (r1 = r1.call(t1)).next.bind(r1);\n    if (Array.isArray(t1) || (r1 = _unsupportedIterableToArray(t1)) || e1 && t1 && \"number\" == typeof t1.length) {\n        r1 && (t1 = r1);\n        var i1 = 0;\n        return function() {\n            return i1 >= t1.length ? {\n                done: !0\n            } : {\n                done: !1,\n                value: t1[i1++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _skipFirstGeneratorNext(t1) {\n    return function() {\n        var e1 = t1.apply(this, arguments);\n        return e1.next(), e1;\n    };\n}\nfunction _toPrimitive(t1, e1) {\n    if (\"object\" != typeof t1 || null === t1) return t1;\n    var r1 = t1[Symbol.toPrimitive];\n    if (void 0 !== r1) {\n        var i1 = r1.call(t1, e1 || \"default\");\n        if (\"object\" != typeof i1) return i1;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === e1 ? String : Number)(t1);\n}\nfunction _toPropertyKey(t1) {\n    var e1 = _toPrimitive(t1, \"string\");\n    return \"symbol\" == typeof e1 ? e1 : String(e1);\n}\nfunction _initializerWarningHelper(t1, e1) {\n    throw new Error(\"Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.\");\n}\nfunction _initializerDefineProperty(t1, e1, r1, i1) {\n    r1 && Object.defineProperty(t1, e1, {\n        enumerable: r1.enumerable,\n        configurable: r1.configurable,\n        writable: r1.writable,\n        value: r1.initializer ? r1.initializer.call(i1) : void 0\n    });\n}\nfunction _applyDecoratedDescriptor(t1, e1, r1, i1, s1) {\n    var a1 = {};\n    return Object.keys(i1).forEach(function(t1) {\n        a1[t1] = i1[t1];\n    }), a1.enumerable = !!a1.enumerable, a1.configurable = !!a1.configurable, (\"value\" in a1 || a1.initializer) && (a1.writable = !0), a1 = r1.slice().reverse().reduce(function(r1, i1) {\n        return i1(t1, e1, r1) || r1;\n    }, a1), s1 && void 0 !== a1.initializer && (a1.value = a1.initializer ? a1.initializer.call(s1) : void 0, a1.initializer = void 0), void 0 === a1.initializer && (Object.defineProperty(t1, e1, a1), a1 = null), a1;\n}\n_AsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function() {\n    return this;\n}, _AsyncGenerator.prototype.next = function(t1) {\n    return this._invoke(\"next\", t1);\n}, _AsyncGenerator.prototype.throw = function(t1) {\n    return this._invoke(\"throw\", t1);\n}, _AsyncGenerator.prototype.return = function(t1) {\n    return this._invoke(\"return\", t1);\n};\nvar id = 0;\nfunction _classPrivateFieldLooseKey(t1) {\n    return \"__private_\" + id++ + \"_\" + t1;\n}\nfunction _classPrivateFieldLooseBase(t1, e1) {\n    if (!Object.prototype.hasOwnProperty.call(t1, e1)) throw new TypeError(\"attempted to use private field on non-instance\");\n    return t1;\n}\nfunction _classPrivateFieldGet(t1, e1) {\n    return _classApplyDescriptorGet(t1, _classExtractFieldDescriptor(t1, e1, \"get\"));\n}\nfunction _classPrivateFieldSet(t1, e1, r1) {\n    return _classApplyDescriptorSet(t1, _classExtractFieldDescriptor(t1, e1, \"set\"), r1), r1;\n}\nfunction _classPrivateFieldDestructureSet(t1, e1) {\n    return _classApplyDescriptorDestructureSet(t1, _classExtractFieldDescriptor(t1, e1, \"set\"));\n}\nfunction _classExtractFieldDescriptor(t1, e1, r1) {\n    if (!e1.has(t1)) throw new TypeError(\"attempted to \" + r1 + \" private field on non-instance\");\n    return e1.get(t1);\n}\nfunction _classStaticPrivateFieldSpecGet(t1, e1, r1) {\n    return _classCheckPrivateStaticAccess(t1, e1), _classCheckPrivateStaticFieldDescriptor(r1, \"get\"), _classApplyDescriptorGet(t1, r1);\n}\nfunction _classStaticPrivateFieldSpecSet(t1, e1, r1, i1) {\n    return _classCheckPrivateStaticAccess(t1, e1), _classCheckPrivateStaticFieldDescriptor(r1, \"set\"), _classApplyDescriptorSet(t1, r1, i1), i1;\n}\nfunction _classStaticPrivateMethodGet(t1, e1, r1) {\n    return _classCheckPrivateStaticAccess(t1, e1), r1;\n}\nfunction _classStaticPrivateMethodSet() {\n    throw new TypeError(\"attempted to set read only static private field\");\n}\nfunction _classApplyDescriptorGet(t1, e1) {\n    return e1.get ? e1.get.call(t1) : e1.value;\n}\nfunction _classApplyDescriptorSet(t1, e1, r1) {\n    if (e1.set) e1.set.call(t1, r1);\n    else {\n        if (!e1.writable) throw new TypeError(\"attempted to set read only private field\");\n        e1.value = r1;\n    }\n}\nfunction _classApplyDescriptorDestructureSet(t1, e1) {\n    if (e1.set) return \"__destrObj\" in e1 || (e1.__destrObj = {\n        set value (r){\n            e1.set.call(t1, r);\n        }\n    }), e1.__destrObj;\n    if (!e1.writable) throw new TypeError(\"attempted to set read only private field\");\n    return e1;\n}\nfunction _classStaticPrivateFieldDestructureSet(t1, e1, r1) {\n    return _classCheckPrivateStaticAccess(t1, e1), _classCheckPrivateStaticFieldDescriptor(r1, \"set\"), _classApplyDescriptorDestructureSet(t1, r1);\n}\nfunction _classCheckPrivateStaticAccess(t1, e1) {\n    if (t1 !== e1) throw new TypeError(\"Private static access of wrong provenance\");\n}\nfunction _classCheckPrivateStaticFieldDescriptor(t1, e1) {\n    if (void 0 === t1) throw new TypeError(\"attempted to \" + e1 + \" private static field before its declaration\");\n}\nfunction _decorate(t1, e1, r1, i1) {\n    var s1 = _getDecoratorsApi();\n    if (i1) for(var a1 = 0; a1 < i1.length; a1++)s1 = i1[a1](s1);\n    var n1 = e1(function(t1) {\n        s1.initializeInstanceElements(t1, o1.elements);\n    }, r1), o1 = s1.decorateClass(_coalesceClassElements(n1.d.map(_createElementDescriptor)), t1);\n    return s1.initializeClassElements(n1.F, o1.elements), s1.runClassFinishers(n1.F, o1.finishers);\n}\nfunction _getDecoratorsApi() {\n    _getDecoratorsApi = function() {\n        return t1;\n    };\n    var t1 = {\n        elementsDefinitionOrder: [\n            [\n                \"method\"\n            ],\n            [\n                \"field\"\n            ]\n        ],\n        initializeInstanceElements: function(t1, e1) {\n            [\n                \"method\",\n                \"field\"\n            ].forEach(function(r1) {\n                e1.forEach(function(e1) {\n                    e1.kind === r1 && \"own\" === e1.placement && this.defineClassElement(t1, e1);\n                }, this);\n            }, this);\n        },\n        initializeClassElements: function(t1, e1) {\n            var r1 = t1.prototype;\n            [\n                \"method\",\n                \"field\"\n            ].forEach(function(i1) {\n                e1.forEach(function(e1) {\n                    var s1 = e1.placement;\n                    if (e1.kind === i1 && (\"static\" === s1 || \"prototype\" === s1)) {\n                        var a1 = \"static\" === s1 ? t1 : r1;\n                        this.defineClassElement(a1, e1);\n                    }\n                }, this);\n            }, this);\n        },\n        defineClassElement: function(t1, e1) {\n            var r1 = e1.descriptor;\n            if (\"field\" === e1.kind) {\n                var i1 = e1.initializer;\n                r1 = {\n                    enumerable: r1.enumerable,\n                    writable: r1.writable,\n                    configurable: r1.configurable,\n                    value: void 0 === i1 ? void 0 : i1.call(t1)\n                };\n            }\n            Object.defineProperty(t1, e1.key, r1);\n        },\n        decorateClass: function(t1, e1) {\n            var r1 = [], i1 = [], s1 = {\n                static: [],\n                prototype: [],\n                own: []\n            };\n            if (t1.forEach(function(t1) {\n                this.addElementPlacement(t1, s1);\n            }, this), t1.forEach(function(t1) {\n                if (!_hasDecorators(t1)) return r1.push(t1);\n                var e1 = this.decorateElement(t1, s1);\n                r1.push(e1.element), r1.push.apply(r1, e1.extras), i1.push.apply(i1, e1.finishers);\n            }, this), !e1) return {\n                elements: r1,\n                finishers: i1\n            };\n            var a1 = this.decorateConstructor(r1, e1);\n            return i1.push.apply(i1, a1.finishers), a1.finishers = i1, a1;\n        },\n        addElementPlacement: function(t1, e1, r1) {\n            var i1 = e1[t1.placement];\n            if (!r1 && -1 !== i1.indexOf(t1.key)) throw new TypeError(\"Duplicated element (\" + t1.key + \")\");\n            i1.push(t1.key);\n        },\n        decorateElement: function(t1, e1) {\n            for(var r1 = [], i1 = [], s1 = t1.decorators, a1 = s1.length - 1; a1 >= 0; a1--){\n                var n1 = e1[t1.placement];\n                n1.splice(n1.indexOf(t1.key), 1);\n                var o1 = this.fromElementDescriptor(t1), h1 = this.toElementFinisherExtras((0, s1[a1])(o1) || o1);\n                t1 = h1.element, this.addElementPlacement(t1, e1), h1.finisher && i1.push(h1.finisher);\n                var l1 = h1.extras;\n                if (l1) {\n                    for(var p1 = 0; p1 < l1.length; p1++)this.addElementPlacement(l1[p1], e1);\n                    r1.push.apply(r1, l1);\n                }\n            }\n            return {\n                element: t1,\n                finishers: i1,\n                extras: r1\n            };\n        },\n        decorateConstructor: function(t1, e1) {\n            for(var r1 = [], i1 = e1.length - 1; i1 >= 0; i1--){\n                var s1 = this.fromClassDescriptor(t1), a1 = this.toClassDescriptor((0, e1[i1])(s1) || s1);\n                if (void 0 !== a1.finisher && r1.push(a1.finisher), void 0 !== a1.elements) {\n                    t1 = a1.elements;\n                    for(var n1 = 0; n1 < t1.length - 1; n1++)for(var o1 = n1 + 1; o1 < t1.length; o1++)if (t1[n1].key === t1[o1].key && t1[n1].placement === t1[o1].placement) throw new TypeError(\"Duplicated element (\" + t1[n1].key + \")\");\n                }\n            }\n            return {\n                elements: t1,\n                finishers: r1\n            };\n        },\n        fromElementDescriptor: function(t1) {\n            var e1 = {\n                kind: t1.kind,\n                key: t1.key,\n                placement: t1.placement,\n                descriptor: t1.descriptor\n            };\n            return Object.defineProperty(e1, Symbol.toStringTag, {\n                value: \"Descriptor\",\n                configurable: !0\n            }), \"field\" === t1.kind && (e1.initializer = t1.initializer), e1;\n        },\n        toElementDescriptors: function(t1) {\n            if (void 0 !== t1) return _toArray(t1).map(function(t1) {\n                var e1 = this.toElementDescriptor(t1);\n                return this.disallowProperty(t1, \"finisher\", \"An element descriptor\"), this.disallowProperty(t1, \"extras\", \"An element descriptor\"), e1;\n            }, this);\n        },\n        toElementDescriptor: function(t1) {\n            var e1 = String(t1.kind);\n            if (\"method\" !== e1 && \"field\" !== e1) throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"' + e1 + '\"');\n            var r1 = _toPropertyKey(t1.key), i1 = String(t1.placement);\n            if (\"static\" !== i1 && \"prototype\" !== i1 && \"own\" !== i1) throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"' + i1 + '\"');\n            var s1 = t1.descriptor;\n            this.disallowProperty(t1, \"elements\", \"An element descriptor\");\n            var a1 = {\n                kind: e1,\n                key: r1,\n                placement: i1,\n                descriptor: Object.assign({}, s1)\n            };\n            return \"field\" !== e1 ? this.disallowProperty(t1, \"initializer\", \"A method descriptor\") : (this.disallowProperty(s1, \"get\", \"The property descriptor of a field descriptor\"), this.disallowProperty(s1, \"set\", \"The property descriptor of a field descriptor\"), this.disallowProperty(s1, \"value\", \"The property descriptor of a field descriptor\"), a1.initializer = t1.initializer), a1;\n        },\n        toElementFinisherExtras: function(t1) {\n            return {\n                element: this.toElementDescriptor(t1),\n                finisher: _optionalCallableProperty(t1, \"finisher\"),\n                extras: this.toElementDescriptors(t1.extras)\n            };\n        },\n        fromClassDescriptor: function(t1) {\n            var e1 = {\n                kind: \"class\",\n                elements: t1.map(this.fromElementDescriptor, this)\n            };\n            return Object.defineProperty(e1, Symbol.toStringTag, {\n                value: \"Descriptor\",\n                configurable: !0\n            }), e1;\n        },\n        toClassDescriptor: function(t1) {\n            var e1 = String(t1.kind);\n            if (\"class\" !== e1) throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator created a class descriptor with .kind \"' + e1 + '\"');\n            this.disallowProperty(t1, \"key\", \"A class descriptor\"), this.disallowProperty(t1, \"placement\", \"A class descriptor\"), this.disallowProperty(t1, \"descriptor\", \"A class descriptor\"), this.disallowProperty(t1, \"initializer\", \"A class descriptor\"), this.disallowProperty(t1, \"extras\", \"A class descriptor\");\n            var r1 = _optionalCallableProperty(t1, \"finisher\");\n            return {\n                elements: this.toElementDescriptors(t1.elements),\n                finisher: r1\n            };\n        },\n        runClassFinishers: function(t1, e1) {\n            for(var r1 = 0; r1 < e1.length; r1++){\n                var i1 = (0, e1[r1])(t1);\n                if (void 0 !== i1) {\n                    if (\"function\" != typeof i1) throw new TypeError(\"Finishers must return a constructor.\");\n                    t1 = i1;\n                }\n            }\n            return t1;\n        },\n        disallowProperty: function(t1, e1, r1) {\n            if (void 0 !== t1[e1]) throw new TypeError(r1 + \" can't have a .\" + e1 + \" property.\");\n        }\n    };\n    return t1;\n}\nfunction _createElementDescriptor(t1) {\n    var e1, r1 = _toPropertyKey(t1.key);\n    \"method\" === t1.kind ? e1 = {\n        value: t1.value,\n        writable: !0,\n        configurable: !0,\n        enumerable: !1\n    } : \"get\" === t1.kind ? e1 = {\n        get: t1.value,\n        configurable: !0,\n        enumerable: !1\n    } : \"set\" === t1.kind ? e1 = {\n        set: t1.value,\n        configurable: !0,\n        enumerable: !1\n    } : \"field\" === t1.kind && (e1 = {\n        configurable: !0,\n        writable: !0,\n        enumerable: !0\n    });\n    var i1 = {\n        kind: \"field\" === t1.kind ? \"field\" : \"method\",\n        key: r1,\n        placement: t1.static ? \"static\" : \"field\" === t1.kind ? \"own\" : \"prototype\",\n        descriptor: e1\n    };\n    return t1.decorators && (i1.decorators = t1.decorators), \"field\" === t1.kind && (i1.initializer = t1.value), i1;\n}\nfunction _coalesceGetterSetter(t1, e1) {\n    void 0 !== t1.descriptor.get ? e1.descriptor.get = t1.descriptor.get : e1.descriptor.set = t1.descriptor.set;\n}\nfunction _coalesceClassElements(t1) {\n    for(var e1 = [], r1 = function(t1) {\n        return \"method\" === t1.kind && t1.key === a1.key && t1.placement === a1.placement;\n    }, i1 = 0; i1 < t1.length; i1++){\n        var s1, a1 = t1[i1];\n        if (\"method\" === a1.kind && (s1 = e1.find(r1))) if (_isDataDescriptor(a1.descriptor) || _isDataDescriptor(s1.descriptor)) {\n            if (_hasDecorators(a1) || _hasDecorators(s1)) throw new ReferenceError(\"Duplicated methods (\" + a1.key + \") can't be decorated.\");\n            s1.descriptor = a1.descriptor;\n        } else {\n            if (_hasDecorators(a1)) {\n                if (_hasDecorators(s1)) throw new ReferenceError(\"Decorators can't be placed on different accessors with for the same property (\" + a1.key + \").\");\n                s1.decorators = a1.decorators;\n            }\n            _coalesceGetterSetter(a1, s1);\n        }\n        else e1.push(a1);\n    }\n    return e1;\n}\nfunction _hasDecorators(t1) {\n    return t1.decorators && t1.decorators.length;\n}\nfunction _isDataDescriptor(t1) {\n    return void 0 !== t1 && !(void 0 === t1.value && void 0 === t1.writable);\n}\nfunction _optionalCallableProperty(t1, e1) {\n    var r1 = t1[e1];\n    if (void 0 !== r1 && \"function\" != typeof r1) throw new TypeError(\"Expected '\" + e1 + \"' to be a function\");\n    return r1;\n}\nfunction _classPrivateMethodGet(t1, e1, r1) {\n    if (!e1.has(t1)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return r1;\n}\nfunction _checkPrivateRedeclaration(t1, e1) {\n    if (e1.has(t1)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldInitSpec(t1, e1, r1) {\n    _checkPrivateRedeclaration(t1, e1), e1.set(t1, r1);\n}\nfunction _classPrivateMethodInitSpec(t1, e1) {\n    _checkPrivateRedeclaration(t1, e1), e1.add(t1);\n}\nfunction _classPrivateMethodSet() {\n    throw new TypeError(\"attempted to reassign private method\");\n}\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ var _extendStatics = function(t1, e1) {\n    return _extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t1, e1) {\n        t1.__proto__ = e1;\n    } || function(t1, e1) {\n        for(var r1 in e1)Object.prototype.hasOwnProperty.call(e1, r1) && (t1[r1] = e1[r1]);\n    }, _extendStatics(t1, e1);\n};\nfunction __extends(t1, e1) {\n    if (\"function\" != typeof e1 && null !== e1) throw new TypeError(\"Class extends value \" + String(e1) + \" is not a constructor or null\");\n    function r1() {\n        this.constructor = t1;\n    }\n    _extendStatics(t1, e1), t1.prototype = null === e1 ? Object.create(e1) : (r1.prototype = e1.prototype, new r1);\n}\nvar _assign = function() {\n    return _assign = Object.assign || function(t1) {\n        for(var e1, r1 = 1, i1 = arguments.length; r1 < i1; r1++)for(var s1 in e1 = arguments[r1])Object.prototype.hasOwnProperty.call(e1, s1) && (t1[s1] = e1[s1]);\n        return t1;\n    }, _assign.apply(this, arguments);\n};\nfunction __rest(t1, e1) {\n    var r1 = {};\n    for(var i1 in t1)Object.prototype.hasOwnProperty.call(t1, i1) && e1.indexOf(i1) < 0 && (r1[i1] = t1[i1]);\n    if (null != t1 && \"function\" == typeof Object.getOwnPropertySymbols) {\n        var s1 = 0;\n        for(i1 = Object.getOwnPropertySymbols(t1); s1 < i1.length; s1++)e1.indexOf(i1[s1]) < 0 && Object.prototype.propertyIsEnumerable.call(t1, i1[s1]) && (r1[i1[s1]] = t1[i1[s1]]);\n    }\n    return r1;\n}\nfunction __decorate(t1, e1, r1, i1) {\n    var s1, a1 = arguments.length, n1 = a1 < 3 ? e1 : null === i1 ? i1 = Object.getOwnPropertyDescriptor(e1, r1) : i1;\n    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) n1 = Reflect.decorate(t1, e1, r1, i1);\n    else for(var o1 = t1.length - 1; o1 >= 0; o1--)(s1 = t1[o1]) && (n1 = (a1 < 3 ? s1(n1) : a1 > 3 ? s1(e1, r1, n1) : s1(e1, r1)) || n1);\n    return a1 > 3 && n1 && Object.defineProperty(e1, r1, n1), n1;\n}\nfunction __param(t1, e1) {\n    return function(r1, i1) {\n        e1(r1, i1, t1);\n    };\n}\nfunction __metadata(t1, e1) {\n    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.metadata) return Reflect.metadata(t1, e1);\n}\nfunction __awaiter(t1, e1, r1, i1) {\n    return new (r1 || (r1 = Promise))(function(s1, a1) {\n        function n1(t1) {\n            try {\n                h1(i1.next(t1));\n            } catch (t1) {\n                a1(t1);\n            }\n        }\n        function o1(t1) {\n            try {\n                h1(i1.throw(t1));\n            } catch (t1) {\n                a1(t1);\n            }\n        }\n        function h1(t1) {\n            var e1;\n            t1.done ? s1(t1.value) : (e1 = t1.value, e1 instanceof r1 ? e1 : new r1(function(t1) {\n                t1(e1);\n            })).then(n1, o1);\n        }\n        h1((i1 = i1.apply(t1, e1 || [])).next());\n    });\n}\nfunction __generator(t1, e1) {\n    var r1, i1, s1, a1, n1 = {\n        label: 0,\n        sent: function() {\n            if (1 & s1[0]) throw s1[1];\n            return s1[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return a1 = {\n        next: o1(0),\n        throw: o1(1),\n        return: o1(2)\n    }, \"function\" == typeof Symbol && (a1[Symbol.iterator] = function() {\n        return this;\n    }), a1;\n    function o1(a1) {\n        return function(o1) {\n            return function(a1) {\n                if (r1) throw new TypeError(\"Generator is already executing.\");\n                for(; n1;)try {\n                    if (r1 = 1, i1 && (s1 = 2 & a1[0] ? i1.return : a1[0] ? i1.throw || ((s1 = i1.return) && s1.call(i1), 0) : i1.next) && !(s1 = s1.call(i1, a1[1])).done) return s1;\n                    switch(i1 = 0, s1 && (a1 = [\n                        2 & a1[0],\n                        s1.value\n                    ]), a1[0]){\n                        case 0:\n                        case 1:\n                            s1 = a1;\n                            break;\n                        case 4:\n                            return n1.label++, {\n                                value: a1[1],\n                                done: !1\n                            };\n                        case 5:\n                            n1.label++, i1 = a1[1], a1 = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            a1 = n1.ops.pop(), n1.trys.pop();\n                            continue;\n                        default:\n                            if (!(s1 = n1.trys, (s1 = s1.length > 0 && s1[s1.length - 1]) || 6 !== a1[0] && 2 !== a1[0])) {\n                                n1 = 0;\n                                continue;\n                            }\n                            if (3 === a1[0] && (!s1 || a1[1] > s1[0] && a1[1] < s1[3])) {\n                                n1.label = a1[1];\n                                break;\n                            }\n                            if (6 === a1[0] && n1.label < s1[1]) {\n                                n1.label = s1[1], s1 = a1;\n                                break;\n                            }\n                            if (s1 && n1.label < s1[2]) {\n                                n1.label = s1[2], n1.ops.push(a1);\n                                break;\n                            }\n                            s1[2] && n1.ops.pop(), n1.trys.pop();\n                            continue;\n                    }\n                    a1 = e1.call(t1, n1);\n                } catch (t1) {\n                    a1 = [\n                        6,\n                        t1\n                    ], i1 = 0;\n                } finally{\n                    r1 = s1 = 0;\n                }\n                if (5 & a1[0]) throw a1[1];\n                return {\n                    value: a1[0] ? a1[1] : void 0,\n                    done: !0\n                };\n            }([\n                a1,\n                o1\n            ]);\n        };\n    }\n}\nvar __createBinding = Object.create ? function(t1, e1, r1, i1) {\n    void 0 === i1 && (i1 = r1), Object.defineProperty(t1, i1, {\n        enumerable: !0,\n        get: function() {\n            return e1[r1];\n        }\n    });\n} : function(t1, e1, r1, i1) {\n    void 0 === i1 && (i1 = r1), t1[i1] = e1[r1];\n};\nfunction __exportStar(t1, e1) {\n    for(var r1 in t1)\"default\" === r1 || Object.prototype.hasOwnProperty.call(e1, r1) || __createBinding(e1, t1, r1);\n}\nfunction __values(t1) {\n    var e1 = \"function\" == typeof Symbol && Symbol.iterator, r1 = e1 && t1[e1], i1 = 0;\n    if (r1) return r1.call(t1);\n    if (t1 && \"number\" == typeof t1.length) return {\n        next: function() {\n            return t1 && i1 >= t1.length && (t1 = void 0), {\n                value: t1 && t1[i1++],\n                done: !t1\n            };\n        }\n    };\n    throw new TypeError(e1 ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(t1, e1) {\n    var r1 = \"function\" == typeof Symbol && t1[Symbol.iterator];\n    if (!r1) return t1;\n    var i1, s1, a1 = r1.call(t1), n1 = [];\n    try {\n        for(; (void 0 === e1 || e1-- > 0) && !(i1 = a1.next()).done;)n1.push(i1.value);\n    } catch (t1) {\n        s1 = {\n            error: t1\n        };\n    } finally{\n        try {\n            i1 && !i1.done && (r1 = a1.return) && r1.call(a1);\n        } finally{\n            if (s1) throw s1.error;\n        }\n    }\n    return n1;\n}\nfunction __spread() {\n    for(var t1 = [], e1 = 0; e1 < arguments.length; e1++)t1 = t1.concat(__read(arguments[e1]));\n    return t1;\n}\nfunction __spreadArrays() {\n    for(var t1 = 0, e1 = 0, r1 = arguments.length; e1 < r1; e1++)t1 += arguments[e1].length;\n    var i1 = Array(t1), s1 = 0;\n    for(e1 = 0; e1 < r1; e1++)for(var a1 = arguments[e1], n1 = 0, o1 = a1.length; n1 < o1; n1++, s1++)i1[s1] = a1[n1];\n    return i1;\n}\nfunction __spreadArray(t1, e1, r1) {\n    if (r1 || 2 === arguments.length) for(var i1, s1 = 0, a1 = e1.length; s1 < a1; s1++)!i1 && s1 in e1 || (i1 || (i1 = Array.prototype.slice.call(e1, 0, s1)), i1[s1] = e1[s1]);\n    return t1.concat(i1 || Array.prototype.slice.call(e1));\n}\nfunction __await(t1) {\n    return this instanceof __await ? (this.v = t1, this) : new __await(t1);\n}\nfunction __asyncGenerator(t1, e1, r1) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var i1, s1 = r1.apply(t1, e1 || []), a1 = [];\n    return i1 = {}, n1(\"next\"), n1(\"throw\"), n1(\"return\"), i1[Symbol.asyncIterator] = function() {\n        return this;\n    }, i1;\n    function n1(t1) {\n        s1[t1] && (i1[t1] = function(e1) {\n            return new Promise(function(r1, i1) {\n                a1.push([\n                    t1,\n                    e1,\n                    r1,\n                    i1\n                ]) > 1 || o1(t1, e1);\n            });\n        });\n    }\n    function o1(t1, e1) {\n        try {\n            !function(t1) {\n                t1.value instanceof __await ? Promise.resolve(t1.value.v).then(h1, l1) : p1(a1[0][2], t1);\n            }(s1[t1](e1));\n        } catch (t1) {\n            p1(a1[0][3], t1);\n        }\n    }\n    function h1(t1) {\n        o1(\"next\", t1);\n    }\n    function l1(t1) {\n        o1(\"throw\", t1);\n    }\n    function p1(t1, e1) {\n        t1(e1), a1.shift(), a1.length && o1(a1[0][0], a1[0][1]);\n    }\n}\nfunction __asyncDelegator(t1) {\n    var e1, r1;\n    return e1 = {}, i1(\"next\"), i1(\"throw\", function(t1) {\n        throw t1;\n    }), i1(\"return\"), e1[Symbol.iterator] = function() {\n        return this;\n    }, e1;\n    function i1(i1, s1) {\n        e1[i1] = t1[i1] ? function(e1) {\n            return (r1 = !r1) ? {\n                value: __await(t1[i1](e1)),\n                done: \"return\" === i1\n            } : s1 ? s1(e1) : e1;\n        } : s1;\n    }\n}\nfunction __asyncValues(t1) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var e1, r1 = t1[Symbol.asyncIterator];\n    return r1 ? r1.call(t1) : (t1 = \"function\" == typeof __values ? __values(t1) : t1[Symbol.iterator](), e1 = {}, i1(\"next\"), i1(\"throw\"), i1(\"return\"), e1[Symbol.asyncIterator] = function() {\n        return this;\n    }, e1);\n    function i1(r1) {\n        e1[r1] = t1[r1] && function(e1) {\n            return new Promise(function(i1, s1) {\n                (function(t1, e1, r1, i1) {\n                    Promise.resolve(i1).then(function(e1) {\n                        t1({\n                            value: e1,\n                            done: r1\n                        });\n                    }, e1);\n                })(i1, s1, (e1 = t1[r1](e1)).done, e1.value);\n            });\n        };\n    }\n}\nfunction __makeTemplateObject(t1, e1) {\n    return Object.defineProperty ? Object.defineProperty(t1, \"raw\", {\n        value: e1\n    }) : t1.raw = e1, t1;\n}\nvar __setModuleDefault = Object.create ? function(t1, e1) {\n    Object.defineProperty(t1, \"default\", {\n        enumerable: !0,\n        value: e1\n    });\n} : function(t1, e1) {\n    t1.default = e1;\n};\nfunction __importStar(t1) {\n    if (t1 && t1.__esModule) return t1;\n    var e1 = {};\n    if (null != t1) for(var r1 in t1)\"default\" !== r1 && Object.prototype.hasOwnProperty.call(t1, r1) && __createBinding(e1, t1, r1);\n    return __setModuleDefault(e1, t1), e1;\n}\nfunction __importDefault(t1) {\n    return t1 && t1.__esModule ? t1 : {\n        default: t1\n    };\n}\nfunction __classPrivateFieldGet(t1, e1, r1, i1) {\n    if (\"a\" === r1 && !i1) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (\"function\" == typeof e1 ? t1 !== e1 || !i1 : !e1.has(t1)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return \"m\" === r1 ? i1 : \"a\" === r1 ? i1.call(t1) : i1 ? i1.value : e1.get(t1);\n}\nfunction __classPrivateFieldSet(t1, e1, r1, i1, s1) {\n    if (\"m\" === i1) throw new TypeError(\"Private method is not writable\");\n    if (\"a\" === i1 && !s1) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (\"function\" == typeof e1 ? t1 !== e1 || !s1 : !e1.has(t1)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return \"a\" === i1 ? s1.call(t1, r1) : s1 ? s1.value = r1 : e1.set(t1, r1), r1;\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ }\nvar t$3 = window.ShadowRoot && (void 0 === window.ShadyCSS || window.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype, e$8 = Symbol(), n$5 = new Map;\nclass s$3 {\n    constructor(t1, e1){\n        if (this._$cssResult$ = !0, e1 !== e$8) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n        this.cssText = t1;\n    }\n    get styleSheet() {\n        var t1 = n$5.get(this.cssText);\n        return t$3 && void 0 === t1 && (n$5.set(this.cssText, t1 = new CSSStyleSheet), t1.replaceSync(this.cssText)), t1;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\nvar o$5 = (t1)=>new s$3(\"string\" == typeof t1 ? t1 : t1 + \"\", e$8), r$3 = function(t1) {\n    for(var e1 = arguments.length, r1 = new Array(e1 > 1 ? e1 - 1 : 0), i1 = 1; i1 < e1; i1++)r1[i1 - 1] = arguments[i1];\n    var s1 = 1 === t1.length ? t1[0] : r1.reduce((e1, r1, i1)=>e1 + ((t1)=>{\n            if (!0 === t1._$cssResult$) return t1.cssText;\n            if (\"number\" == typeof t1) return t1;\n            throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + t1 + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n        })(r1) + t1[i1 + 1], t1[0]);\n    return new s$3(s1, e$8);\n}, i$3 = (t1, e1)=>{\n    t$3 ? t1.adoptedStyleSheets = e1.map((t1)=>t1 instanceof CSSStyleSheet ? t1 : t1.styleSheet) : e1.forEach((e1)=>{\n        var r1 = document.createElement(\"style\"), i1 = window.litNonce;\n        void 0 !== i1 && r1.setAttribute(\"nonce\", i1), r1.textContent = e1.cssText, t1.appendChild(r1);\n    });\n}, S$1 = t$3 ? (t1)=>t1 : (t1)=>t1 instanceof CSSStyleSheet ? ((t1)=>{\n        var e1 = \"\";\n        for (var r1 of t1.cssRules)e1 += r1.cssText;\n        return o$5(e1);\n    })(t1) : t1, s$2, e$7 = window.trustedTypes, r$2 = e$7 ? e$7.emptyScript : \"\", h$2 = window.reactiveElementPolyfillSupport, o$4 = {\n    toAttribute (t1, e1) {\n        switch(e1){\n            case Boolean:\n                t1 = t1 ? r$2 : null;\n                break;\n            case Object:\n            case Array:\n                t1 = null == t1 ? t1 : JSON.stringify(t1);\n        }\n        return t1;\n    },\n    fromAttribute (t1, e1) {\n        var r1 = t1;\n        switch(e1){\n            case Boolean:\n                r1 = null !== t1;\n                break;\n            case Number:\n                r1 = null === t1 ? null : Number(t1);\n                break;\n            case Object:\n            case Array:\n                try {\n                    r1 = JSON.parse(t1);\n                } catch (t1) {\n                    r1 = null;\n                }\n        }\n        return r1;\n    }\n}, n$4 = (t1, e1)=>e1 !== t1 && (e1 == e1 || t1 == t1), l$3 = {\n    attribute: !0,\n    type: String,\n    converter: o$4,\n    reflect: !1,\n    hasChanged: n$4\n}, t$2;\nclass a$1 extends HTMLElement {\n    constructor(){\n        super(), this._$Et = new Map, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Ei = null, this.o();\n    }\n    static addInitializer(t1) {\n        var e1;\n        null !== (e1 = this.l) && void 0 !== e1 || (this.l = []), this.l.push(t1);\n    }\n    static get observedAttributes() {\n        this.finalize();\n        var t1 = [];\n        return this.elementProperties.forEach((e1, r1)=>{\n            var i1 = this._$Eh(r1, e1);\n            void 0 !== i1 && (this._$Eu.set(i1, r1), t1.push(i1));\n        }), t1;\n    }\n    static createProperty(t1) {\n        var e1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l$3;\n        if (e1.state && (e1.attribute = !1), this.finalize(), this.elementProperties.set(t1, e1), !e1.noAccessor && !this.prototype.hasOwnProperty(t1)) {\n            var r1 = \"symbol\" == typeof t1 ? Symbol() : \"__\" + t1, i1 = this.getPropertyDescriptor(t1, r1, e1);\n            void 0 !== i1 && Object.defineProperty(this.prototype, t1, i1);\n        }\n    }\n    static getPropertyDescriptor(t1, e1, r1) {\n        return {\n            get () {\n                return this[e1];\n            },\n            set (i1) {\n                var s1 = this[t1];\n                this[e1] = i1, this.requestUpdate(t1, s1, r1);\n            },\n            configurable: !0,\n            enumerable: !0\n        };\n    }\n    static getPropertyOptions(t1) {\n        return this.elementProperties.get(t1) || l$3;\n    }\n    static finalize() {\n        if (this.hasOwnProperty(\"finalized\")) return !1;\n        this.finalized = !0;\n        var t1 = Object.getPrototypeOf(this);\n        if (t1.finalize(), this.elementProperties = new Map(t1.elementProperties), this._$Eu = new Map, this.hasOwnProperty(\"properties\")) {\n            var e1 = this.properties, r1 = [\n                ...Object.getOwnPropertyNames(e1),\n                ...Object.getOwnPropertySymbols(e1)\n            ];\n            for (var i1 of r1)this.createProperty(i1, e1[i1]);\n        }\n        return this.elementStyles = this.finalizeStyles(this.styles), !0;\n    }\n    static finalizeStyles(t1) {\n        var e1 = [];\n        if (Array.isArray(t1)) {\n            var r1 = new Set(t1.flat(1 / 0).reverse());\n            for (var i1 of r1)e1.unshift(S$1(i1));\n        } else void 0 !== t1 && e1.push(S$1(t1));\n        return e1;\n    }\n    static _$Eh(t1, e1) {\n        var r1 = e1.attribute;\n        return !1 === r1 ? void 0 : \"string\" == typeof r1 ? r1 : \"string\" == typeof t1 ? t1.toLowerCase() : void 0;\n    }\n    o() {\n        var t1;\n        this._$Ep = new Promise((t1)=>this.enableUpdating = t1), this._$AL = new Map, this._$Em(), this.requestUpdate(), null === (t1 = this.constructor.l) || void 0 === t1 || t1.forEach((t1)=>t1(this));\n    }\n    addController(t1) {\n        var e1, r1;\n        (null !== (e1 = this._$Eg) && void 0 !== e1 ? e1 : this._$Eg = []).push(t1), void 0 !== this.renderRoot && this.isConnected && (null === (r1 = t1.hostConnected) || void 0 === r1 || r1.call(t1));\n    }\n    removeController(t1) {\n        var e1;\n        null === (e1 = this._$Eg) || void 0 === e1 || e1.splice(this._$Eg.indexOf(t1) >>> 0, 1);\n    }\n    _$Em() {\n        this.constructor.elementProperties.forEach((t1, e1)=>{\n            this.hasOwnProperty(e1) && (this._$Et.set(e1, this[e1]), delete this[e1]);\n        });\n    }\n    createRenderRoot() {\n        var t1, e1 = null !== (t1 = this.shadowRoot) && void 0 !== t1 ? t1 : this.attachShadow(this.constructor.shadowRootOptions);\n        return i$3(e1, this.constructor.elementStyles), e1;\n    }\n    connectedCallback() {\n        var t1;\n        void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (t1 = this._$Eg) || void 0 === t1 || t1.forEach((t1)=>{\n            var e1;\n            return null === (e1 = t1.hostConnected) || void 0 === e1 ? void 0 : e1.call(t1);\n        });\n    }\n    enableUpdating(t1) {}\n    disconnectedCallback() {\n        var t1;\n        null === (t1 = this._$Eg) || void 0 === t1 || t1.forEach((t1)=>{\n            var e1;\n            return null === (e1 = t1.hostDisconnected) || void 0 === e1 ? void 0 : e1.call(t1);\n        });\n    }\n    attributeChangedCallback(t1, e1, r1) {\n        this._$AK(t1, r1);\n    }\n    _$ES(t1, e1) {\n        var r1, i1, s1 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : l$3, a1 = this.constructor._$Eh(t1, s1);\n        if (void 0 !== a1 && !0 === s1.reflect) {\n            var n1 = (null !== (i1 = null === (r1 = s1.converter) || void 0 === r1 ? void 0 : r1.toAttribute) && void 0 !== i1 ? i1 : o$4.toAttribute)(e1, s1.type);\n            this._$Ei = t1, null == n1 ? this.removeAttribute(a1) : this.setAttribute(a1, n1), this._$Ei = null;\n        }\n    }\n    _$AK(t1, e1) {\n        var r1, i1, s1, a1 = this.constructor, n1 = a1._$Eu.get(t1);\n        if (void 0 !== n1 && this._$Ei !== n1) {\n            var o1 = a1.getPropertyOptions(n1), h1 = o1.converter, l1 = null !== (s1 = null !== (i1 = null === (r1 = h1) || void 0 === r1 ? void 0 : r1.fromAttribute) && void 0 !== i1 ? i1 : \"function\" == typeof h1 ? h1 : null) && void 0 !== s1 ? s1 : o$4.fromAttribute;\n            this._$Ei = n1, this[n1] = l1(e1, o1.type), this._$Ei = null;\n        }\n    }\n    requestUpdate(t1, e1, r1) {\n        var i1 = !0;\n        void 0 !== t1 && (((r1 = r1 || this.constructor.getPropertyOptions(t1)).hasChanged || n$4)(this[t1], e1) ? (this._$AL.has(t1) || this._$AL.set(t1, e1), !0 === r1.reflect && this._$Ei !== t1 && (void 0 === this._$E_ && (this._$E_ = new Map), this._$E_.set(t1, r1))) : i1 = !1), !this.isUpdatePending && i1 && (this._$Ep = this._$EC());\n    }\n    _$EC() {\n        var t1 = this;\n        return _asyncToGenerator(function*() {\n            t1.isUpdatePending = !0;\n            try {\n                yield t1._$Ep;\n            } catch (e1) {\n                Promise.reject(e1);\n            }\n            var e1 = t1.scheduleUpdate();\n            return null != e1 && (yield e1), !t1.isUpdatePending;\n        })();\n    }\n    scheduleUpdate() {\n        return this.performUpdate();\n    }\n    performUpdate() {\n        var t1;\n        if (this.isUpdatePending) {\n            this.hasUpdated, this._$Et && (this._$Et.forEach((t1, e1)=>this[e1] = t1), this._$Et = void 0);\n            var e1 = !1, r1 = this._$AL;\n            try {\n                (e1 = this.shouldUpdate(r1)) ? (this.willUpdate(r1), null === (t1 = this._$Eg) || void 0 === t1 || t1.forEach((t1)=>{\n                    var e1;\n                    return null === (e1 = t1.hostUpdate) || void 0 === e1 ? void 0 : e1.call(t1);\n                }), this.update(r1)) : this._$EU();\n            } catch (t1) {\n                throw e1 = !1, this._$EU(), t1;\n            }\n            e1 && this._$AE(r1);\n        }\n    }\n    willUpdate(t1) {}\n    _$AE(t1) {\n        var e1;\n        null === (e1 = this._$Eg) || void 0 === e1 || e1.forEach((t1)=>{\n            var e1;\n            return null === (e1 = t1.hostUpdated) || void 0 === e1 ? void 0 : e1.call(t1);\n        }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t1)), this.updated(t1);\n    }\n    _$EU() {\n        this._$AL = new Map, this.isUpdatePending = !1;\n    }\n    get updateComplete() {\n        return this.getUpdateComplete();\n    }\n    getUpdateComplete() {\n        return this._$Ep;\n    }\n    shouldUpdate(t1) {\n        return !0;\n    }\n    update(t1) {\n        void 0 !== this._$E_ && (this._$E_.forEach((t1, e1)=>this._$ES(e1, this[e1], t1)), this._$E_ = void 0), this._$EU();\n    }\n    updated(t1) {}\n    firstUpdated(t1) {}\n}\na$1.finalized = !0, a$1.elementProperties = new Map, a$1.elementStyles = [], a$1.shadowRootOptions = {\n    mode: \"open\"\n}, null == h$2 || h$2({\n    ReactiveElement: a$1\n}), (null !== (s$2 = globalThis.reactiveElementVersions) && void 0 !== s$2 ? s$2 : globalThis.reactiveElementVersions = []).push(\"1.2.1\");\nvar i$2 = globalThis.trustedTypes, s$1 = i$2 ? i$2.createPolicy(\"lit-html\", {\n    createHTML: (t1)=>t1\n}) : void 0, e$6 = \"lit$\".concat((Math.random() + \"\").slice(9), \"$\"), o$3 = \"?\" + e$6, n$3 = \"<\".concat(o$3, \">\"), l$2 = document, h$1 = function() {\n    var t1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\";\n    return l$2.createComment(t1);\n}, r$1 = (t1)=>null === t1 || \"object\" != typeof t1 && \"function\" != typeof t1, d = Array.isArray, u = (t1)=>{\n    var e1;\n    return d(t1) || \"function\" == typeof (null === (e1 = t1) || void 0 === e1 ? void 0 : e1[Symbol.iterator]);\n}, c = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g, v = /-->/g, a = />/g, f = />|[ \t\\n\f\\r](?:([^\\s\"'>=/]+)([ \t\\n\f\\r]*=[ \t\\n\f\\r]*(?:[^ \t\\n\f\\r\"'`<>=]|(\"|')|))|$)/g, _ = /'/g, m = /\"/g, g = /^(?:script|style|textarea)$/i, p = (t1)=>function(e1) {\n        for(var r1 = arguments.length, i1 = new Array(r1 > 1 ? r1 - 1 : 0), s1 = 1; s1 < r1; s1++)i1[s1 - 1] = arguments[s1];\n        return {\n            _$litType$: t1,\n            strings: e1,\n            values: i1\n        };\n    }, $ = p(1), y = p(2), b = Symbol.for(\"lit-noChange\"), w = Symbol.for(\"lit-nothing\"), T = new WeakMap, x = (t1, e1, r1)=>{\n    var i1, s1, a1 = null !== (i1 = null == r1 ? void 0 : r1.renderBefore) && void 0 !== i1 ? i1 : e1, n1 = a1._$litPart$;\n    if (void 0 === n1) {\n        var o1 = null !== (s1 = null == r1 ? void 0 : r1.renderBefore) && void 0 !== s1 ? s1 : null;\n        a1._$litPart$ = n1 = new N(e1.insertBefore(h$1(), o1), o1, void 0, null != r1 ? r1 : {});\n    }\n    return n1._$AI(t1), n1;\n}, A = l$2.createTreeWalker(l$2, 129, null, !1), C = (t1, e1)=>{\n    for(var r1, i1 = t1.length - 1, s1 = [], n1 = 2 === e1 ? \"<svg>\" : \"\", o1 = c, h1 = 0; h1 < i1; h1++){\n        for(var l1 = t1[h1], p1 = void 0, u1 = void 0, d1 = -1, y1 = 0; y1 < l1.length && (o1.lastIndex = y1, null !== (u1 = o1.exec(l1)));)y1 = o1.lastIndex, o1 === c ? \"!--\" === u1[1] ? o1 = v : void 0 !== u1[1] ? o1 = a : void 0 !== u1[2] ? (g.test(u1[2]) && (r1 = RegExp(\"</\" + u1[2], \"g\")), o1 = f) : void 0 !== u1[3] && (o1 = f) : o1 === f ? \">\" === u1[0] ? (o1 = null != r1 ? r1 : c, d1 = -1) : void 0 === u1[1] ? d1 = -2 : (d1 = o1.lastIndex - u1[2].length, p1 = u1[1], o1 = void 0 === u1[3] ? f : '\"' === u1[3] ? m : _) : o1 === m || o1 === _ ? o1 = f : o1 === v || o1 === a ? o1 = c : (o1 = f, r1 = void 0);\n        var b1 = o1 === f && t1[h1 + 1].startsWith(\"/>\") ? \" \" : \"\";\n        n1 += o1 === c ? l1 + n$3 : d1 >= 0 ? (s1.push(p1), l1.slice(0, d1) + \"$lit$\" + l1.slice(d1) + e$6 + b1) : l1 + e$6 + (-2 === d1 ? (s1.push(void 0), h1) : b1);\n    }\n    var P1 = n1 + (t1[i1] || \"<?>\") + (2 === e1 ? \"</svg>\" : \"\");\n    if (!Array.isArray(t1) || !t1.hasOwnProperty(\"raw\")) throw Error(\"invalid template strings array\");\n    return [\n        void 0 !== s$1 ? s$1.createHTML(P1) : P1,\n        s1\n    ];\n};\nclass E {\n    constructor(t1, e1){\n        var r1, { strings: i1, _$litType$: s1 } = t1;\n        this.parts = [];\n        var a1 = 0, n1 = 0, o1 = i1.length - 1, h1 = this.parts, [l1, p1] = C(i1, s1);\n        if (this.el = E.createElement(l1, e1), A.currentNode = this.el.content, 2 === s1) {\n            var c1 = this.el.content, f1 = c1.firstChild;\n            f1.remove(), c1.append(...f1.childNodes);\n        }\n        for(; null !== (r1 = A.nextNode()) && h1.length < o1;){\n            if (1 === r1.nodeType) {\n                if (r1.hasAttributes()) {\n                    var u1 = [];\n                    for (var d1 of r1.getAttributeNames())if (d1.endsWith(\"$lit$\") || d1.startsWith(e$6)) {\n                        var m1 = p1[n1++];\n                        if (u1.push(d1), void 0 !== m1) {\n                            var y1 = r1.getAttribute(m1.toLowerCase() + \"$lit$\").split(e$6), v1 = /([.?@])?(.*)/.exec(m1);\n                            h1.push({\n                                type: 1,\n                                index: a1,\n                                name: v1[2],\n                                strings: y1,\n                                ctor: \".\" === v1[1] ? M : \"?\" === v1[1] ? H : \"@\" === v1[1] ? I : S\n                            });\n                        } else h1.push({\n                            type: 6,\n                            index: a1\n                        });\n                    }\n                    for (var b1 of u1)r1.removeAttribute(b1);\n                }\n                if (g.test(r1.tagName)) {\n                    var _1 = r1.textContent.split(e$6), P1 = _1.length - 1;\n                    if (P1 > 0) {\n                        r1.textContent = i$2 ? i$2.emptyScript : \"\";\n                        for(var x1 = 0; x1 < P1; x1++)r1.append(_1[x1], h$1()), A.nextNode(), h1.push({\n                            type: 2,\n                            index: ++a1\n                        });\n                        r1.append(_1[P1], h$1());\n                    }\n                }\n            } else if (8 === r1.nodeType) if (r1.data === o$3) h1.push({\n                type: 2,\n                index: a1\n            });\n            else for(var w1 = -1; -1 !== (w1 = r1.data.indexOf(e$6, w1 + 1));)h1.push({\n                type: 7,\n                index: a1\n            }), w1 += e$6.length - 1;\n            a1++;\n        }\n    }\n    static createElement(t1, e1) {\n        var r1 = l$2.createElement(\"template\");\n        return r1.innerHTML = t1, r1;\n    }\n}\nfunction P(t1, e1) {\n    var r1, i1, s1, a1, n1 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t1, o1 = arguments.length > 3 ? arguments[3] : void 0;\n    if (e1 === b) return e1;\n    var h1 = void 0 !== o1 ? null === (r1 = n1._$Cl) || void 0 === r1 ? void 0 : r1[o1] : n1._$Cu, l1 = r$1(e1) ? void 0 : e1._$litDirective$;\n    return (null == h1 ? void 0 : h1.constructor) !== l1 && (null === (i1 = null == h1 ? void 0 : h1._$AO) || void 0 === i1 || i1.call(h1, !1), void 0 === l1 ? h1 = void 0 : (h1 = new l1(t1))._$AT(t1, n1, o1), void 0 !== o1 ? (null !== (s1 = (a1 = n1)._$Cl) && void 0 !== s1 ? s1 : a1._$Cl = [])[o1] = h1 : n1._$Cu = h1), void 0 !== h1 && (e1 = P(t1, h1._$AS(t1, e1.values), h1, o1)), e1;\n}\nclass V {\n    constructor(t1, e1){\n        this.v = [], this._$AN = void 0, this._$AD = t1, this._$AM = e1;\n    }\n    get parentNode() {\n        return this._$AM.parentNode;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    p(t1) {\n        var e1, { el: { content: r1 }, parts: i1 } = this._$AD, s1 = (null !== (e1 = null == t1 ? void 0 : t1.creationScope) && void 0 !== e1 ? e1 : l$2).importNode(r1, !0);\n        A.currentNode = s1;\n        for(var a1 = A.nextNode(), n1 = 0, o1 = 0, h1 = i1[0]; void 0 !== h1;){\n            if (n1 === h1.index) {\n                var l1 = void 0;\n                2 === h1.type ? l1 = new N(a1, a1.nextSibling, this, t1) : 1 === h1.type ? l1 = new h1.ctor(a1, h1.name, h1.strings, this, t1) : 6 === h1.type && (l1 = new L(a1, this, t1)), this.v.push(l1), h1 = i1[++o1];\n            }\n            n1 !== (null == h1 ? void 0 : h1.index) && (a1 = A.nextNode(), n1++);\n        }\n        return s1;\n    }\n    m(t1) {\n        var e1 = 0;\n        for (var r1 of this.v)void 0 !== r1 && (void 0 !== r1.strings ? (r1._$AI(t1, r1, e1), e1 += r1.strings.length - 2) : r1._$AI(t1[e1])), e1++;\n    }\n}\nclass N {\n    constructor(t1, e1, r1, i1){\n        var s1;\n        this.type = 2, this._$AH = w, this._$AN = void 0, this._$AA = t1, this._$AB = e1, this._$AM = r1, this.options = i1, this._$Cg = null === (s1 = null == i1 ? void 0 : i1.isConnected) || void 0 === s1 || s1;\n    }\n    get _$AU() {\n        var t1, e1;\n        return null !== (e1 = null === (t1 = this._$AM) || void 0 === t1 ? void 0 : t1._$AU) && void 0 !== e1 ? e1 : this._$Cg;\n    }\n    get parentNode() {\n        var t1 = this._$AA.parentNode, e1 = this._$AM;\n        return void 0 !== e1 && 11 === t1.nodeType && (t1 = e1.parentNode), t1;\n    }\n    get startNode() {\n        return this._$AA;\n    }\n    get endNode() {\n        return this._$AB;\n    }\n    _$AI(t1) {\n        t1 = P(this, t1, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this), r$1(t1) ? t1 === w || null == t1 || \"\" === t1 ? (this._$AH !== w && this._$AR(), this._$AH = w) : t1 !== this._$AH && t1 !== b && this.$(t1) : void 0 !== t1._$litType$ ? this.T(t1) : void 0 !== t1.nodeType ? this.S(t1) : u(t1) ? this.A(t1) : this.$(t1);\n    }\n    M(t1) {\n        var e1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._$AB;\n        return this._$AA.parentNode.insertBefore(t1, e1);\n    }\n    S(t1) {\n        this._$AH !== t1 && (this._$AR(), this._$AH = this.M(t1));\n    }\n    $(t1) {\n        this._$AH !== w && r$1(this._$AH) ? this._$AA.nextSibling.data = t1 : this.S(l$2.createTextNode(t1)), this._$AH = t1;\n    }\n    T(t1) {\n        var e1, { values: r1, _$litType$: i1 } = t1, s1 = \"number\" == typeof i1 ? this._$AC(t1) : (void 0 === i1.el && (i1.el = E.createElement(i1.h, this.options)), i1);\n        if ((null === (e1 = this._$AH) || void 0 === e1 ? void 0 : e1._$AD) === s1) this._$AH.m(r1);\n        else {\n            var a1 = new V(s1, this), n1 = a1.p(this.options);\n            a1.m(r1), this.S(n1), this._$AH = a1;\n        }\n    }\n    _$AC(t1) {\n        var e1 = T.get(t1.strings);\n        return void 0 === e1 && T.set(t1.strings, e1 = new E(t1)), e1;\n    }\n    A(t1) {\n        d(this._$AH) || (this._$AH = [], this._$AR());\n        var e1, r1 = this._$AH, i1 = 0;\n        for (var s1 of t1)i1 === r1.length ? r1.push(e1 = new N(this.M(h$1()), this.M(h$1()), this, this.options)) : e1 = r1[i1], e1._$AI(s1), i1++;\n        i1 < r1.length && (this._$AR(e1 && e1._$AB.nextSibling, i1), r1.length = i1);\n    }\n    _$AR() {\n        var t1, e1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._$AA.nextSibling, r1 = arguments.length > 1 ? arguments[1] : void 0;\n        for(null === (t1 = this._$AP) || void 0 === t1 || t1.call(this, !1, !0, r1); e1 && e1 !== this._$AB;){\n            var i1 = e1.nextSibling;\n            e1.remove(), e1 = i1;\n        }\n    }\n    setConnected(t1) {\n        var e1;\n        void 0 === this._$AM && (this._$Cg = t1, null === (e1 = this._$AP) || void 0 === e1 || e1.call(this, t1));\n    }\n}\nclass S {\n    constructor(t1, e1, r1, i1, s1){\n        this.type = 1, this._$AH = w, this._$AN = void 0, this.element = t1, this.name = e1, this._$AM = i1, this.options = s1, r1.length > 2 || \"\" !== r1[0] || \"\" !== r1[1] ? (this._$AH = Array(r1.length - 1).fill(new String), this.strings = r1) : this._$AH = w;\n    }\n    get tagName() {\n        return this.element.tagName;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t1) {\n        var e1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this, r1 = arguments.length > 2 ? arguments[2] : void 0, i1 = arguments.length > 3 ? arguments[3] : void 0, s1 = this.strings, a1 = !1;\n        if (void 0 === s1) t1 = P(this, t1, e1, 0), (a1 = !r$1(t1) || t1 !== this._$AH && t1 !== b) && (this._$AH = t1);\n        else {\n            var n1, o1, h1 = t1;\n            for(t1 = s1[0], n1 = 0; n1 < s1.length - 1; n1++)(o1 = P(this, h1[r1 + n1], e1, n1)) === b && (o1 = this._$AH[n1]), a1 || (a1 = !r$1(o1) || o1 !== this._$AH[n1]), o1 === w ? t1 = w : t1 !== w && (t1 += (null != o1 ? o1 : \"\") + s1[n1 + 1]), this._$AH[n1] = o1;\n        }\n        a1 && !i1 && this.k(t1);\n    }\n    k(t1) {\n        t1 === w ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t1 ? t1 : \"\");\n    }\n}\nclass M extends S {\n    constructor(){\n        super(...arguments), this.type = 3;\n    }\n    k(t1) {\n        this.element[this.name] = t1 === w ? void 0 : t1;\n    }\n}\nvar k = i$2 ? i$2.emptyScript : \"\";\nclass H extends S {\n    constructor(){\n        super(...arguments), this.type = 4;\n    }\n    k(t1) {\n        t1 && t1 !== w ? this.element.setAttribute(this.name, k) : this.element.removeAttribute(this.name);\n    }\n}\nclass I extends S {\n    constructor(t1, e1, r1, i1, s1){\n        super(t1, e1, r1, i1, s1), this.type = 5;\n    }\n    _$AI(t1) {\n        var e1;\n        if ((t1 = null !== (e1 = P(this, t1, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this, 0)) && void 0 !== e1 ? e1 : w) !== b) {\n            var r1 = this._$AH, i1 = t1 === w && r1 !== w || t1.capture !== r1.capture || t1.once !== r1.once || t1.passive !== r1.passive, s1 = t1 !== w && (r1 === w || i1);\n            i1 && this.element.removeEventListener(this.name, this, r1), s1 && this.element.addEventListener(this.name, this, t1), this._$AH = t1;\n        }\n    }\n    handleEvent(t1) {\n        var e1, r1;\n        \"function\" == typeof this._$AH ? this._$AH.call(null !== (r1 = null === (e1 = this.options) || void 0 === e1 ? void 0 : e1.host) && void 0 !== r1 ? r1 : this.element, t1) : this._$AH.handleEvent(t1);\n    }\n}\nclass L {\n    constructor(t1, e1, r1){\n        this.element = t1, this.type = 6, this._$AN = void 0, this._$AM = e1, this.options = r1;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t1) {\n        P(this, t1);\n    }\n}\nvar R = {\n    P: \"$lit$\",\n    V: e$6,\n    L: o$3,\n    I: 1,\n    N: C,\n    R: V,\n    D: u,\n    j: P,\n    H: N,\n    O: S,\n    F: H,\n    B: I,\n    W: M,\n    Z: L\n}, z = window.litHtmlPolyfillSupport, l$1, o$2;\nnull == z || z(E, N), (null !== (t$2 = globalThis.litHtmlVersions) && void 0 !== t$2 ? t$2 : globalThis.litHtmlVersions = []).push(\"2.1.2\");\nvar r = a$1;\nclass s extends a$1 {\n    constructor(){\n        super(...arguments), this.renderOptions = {\n            host: this\n        }, this._$Dt = void 0;\n    }\n    createRenderRoot() {\n        var t1, e1, r1 = super.createRenderRoot();\n        return null !== (t1 = (e1 = this.renderOptions).renderBefore) && void 0 !== t1 || (e1.renderBefore = r1.firstChild), r1;\n    }\n    update(t1) {\n        var e1 = this.render();\n        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t1), this._$Dt = x(e1, this.renderRoot, this.renderOptions);\n    }\n    connectedCallback() {\n        var t1;\n        super.connectedCallback(), null === (t1 = this._$Dt) || void 0 === t1 || t1.setConnected(!0);\n    }\n    disconnectedCallback() {\n        var t1;\n        super.disconnectedCallback(), null === (t1 = this._$Dt) || void 0 === t1 || t1.setConnected(!1);\n    }\n    render() {\n        return b;\n    }\n}\ns.finalized = !0, s._$litElement$ = !0, null === (l$1 = globalThis.litElementHydrateSupport) || void 0 === l$1 || l$1.call(globalThis, {\n    LitElement: s\n});\nvar n$2 = globalThis.litElementPolyfillSupport;\nnull == n$2 || n$2({\n    LitElement: s\n});\nvar h = {\n    _$AK: (t1, e1, r1)=>{\n        t1._$AK(e1, r1);\n    },\n    _$AL: (t1)=>t1._$AL\n};\n(null !== (o$2 = globalThis.litElementVersions) && void 0 !== o$2 ? o$2 : globalThis.litElementVersions = []).push(\"3.1.2\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ var n$1 = (t1)=>(e1)=>\"function\" == typeof e1 ? ((t1, e1)=>(window.customElements.define(t1, e1), e1))(t1, e1) : ((t1, e1)=>{\n            var { kind: r1, elements: i1 } = e1;\n            return {\n                kind: r1,\n                elements: i1,\n                finisher (e1) {\n                    window.customElements.define(t1, e1);\n                }\n            };\n        })(t1, e1), i$1 = (t1, e1)=>\"method\" === e1.kind && e1.descriptor && !(\"value\" in e1.descriptor) ? _objectSpread2(_objectSpread2({}, e1), {}, {\n        finisher (r1) {\n            r1.createProperty(e1.key, t1);\n        }\n    }) : {\n        kind: \"field\",\n        key: Symbol(),\n        placement: \"own\",\n        descriptor: {},\n        originalKey: e1.key,\n        initializer () {\n            \"function\" == typeof e1.initializer && (this[e1.key] = e1.initializer.call(this));\n        },\n        finisher (r1) {\n            r1.createProperty(e1.key, t1);\n        }\n    };\nfunction e$5(t1) {\n    return (e1, r1)=>void 0 !== r1 ? ((t1, e1, r1)=>{\n            e1.constructor.createProperty(r1, t1);\n        })(t1, e1, r1) : i$1(t1, e1);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function t$1(t1) {\n    return e$5(_objectSpread2(_objectSpread2({}, t1), {}, {\n        state: !0\n    }));\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ var e$4 = (t1, e1, r1)=>{\n    Object.defineProperty(e1, r1, t1);\n}, t = (t1, e1)=>({\n        kind: \"method\",\n        placement: \"prototype\",\n        key: e1.key,\n        descriptor: t1\n    }), o$1 = (t1)=>{\n    var { finisher: e1, descriptor: r1 } = t1;\n    return (t1, i1)=>{\n        var s1;\n        if (void 0 === i1) {\n            var a1 = null !== (s1 = t1.originalKey) && void 0 !== s1 ? s1 : t1.key, n1 = null != r1 ? {\n                kind: \"method\",\n                placement: \"prototype\",\n                key: a1,\n                descriptor: r1(t1.key)\n            } : _objectSpread2(_objectSpread2({}, t1), {}, {\n                key: a1\n            });\n            return null != e1 && (n1.finisher = function(t1) {\n                e1(t1, a1);\n            }), n1;\n        }\n        var o1 = t1.constructor;\n        void 0 !== r1 && Object.defineProperty(t1, i1, r1(i1)), null == e1 || e1(o1, i1);\n    };\n}, n;\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function e$3(t1) {\n    return o$1({\n        finisher: (e1, r1)=>{\n            Object.assign(e1.prototype[r1], t1);\n        }\n    });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function i(t1, e1) {\n    return o$1({\n        descriptor: (r1)=>{\n            var i1 = {\n                get () {\n                    var e1, r1;\n                    return null !== (r1 = null === (e1 = this.renderRoot) || void 0 === e1 ? void 0 : e1.querySelector(t1)) && void 0 !== r1 ? r1 : null;\n                },\n                enumerable: !0,\n                configurable: !0\n            };\n            if (e1) {\n                var s1 = \"symbol\" == typeof r1 ? Symbol() : \"__\" + r1;\n                i1.get = function() {\n                    var e1, r1;\n                    return void 0 === this[s1] && (this[s1] = null !== (r1 = null === (e1 = this.renderRoot) || void 0 === e1 ? void 0 : e1.querySelector(t1)) && void 0 !== r1 ? r1 : null), this[s1];\n                };\n            }\n            return i1;\n        }\n    });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function e$2(t1) {\n    return o$1({\n        descriptor: (e1)=>({\n                get () {\n                    var e1, r1;\n                    return null !== (r1 = null === (e1 = this.renderRoot) || void 0 === e1 ? void 0 : e1.querySelectorAll(t1)) && void 0 !== r1 ? r1 : [];\n                },\n                enumerable: !0,\n                configurable: !0\n            })\n    });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function e$1(t1) {\n    return o$1({\n        descriptor: (e1)=>({\n                get () {\n                    var e1 = this;\n                    return _asyncToGenerator(function*() {\n                        var r1;\n                        return yield e1.updateComplete, null === (r1 = e1.renderRoot) || void 0 === r1 ? void 0 : r1.querySelector(t1);\n                    })();\n                },\n                enumerable: !0,\n                configurable: !0\n            })\n    });\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ var e = null != (null === (n = window.HTMLSlotElement) || void 0 === n ? void 0 : n.prototype.assignedElements) ? (t1, e1)=>t1.assignedElements(e1) : (t1, e1)=>t1.assignedNodes(e1).filter((t1)=>t1.nodeType === Node.ELEMENT_NODE);\nfunction l(t1) {\n    var { slot: r1, selector: i1 } = null != t1 ? t1 : {};\n    return o$1({\n        descriptor: (s1)=>({\n                get () {\n                    var s1, a1 = \"slot\" + (r1 ? \"[name=\".concat(r1, \"]\") : \":not([name])\"), n1 = null === (s1 = this.renderRoot) || void 0 === s1 ? void 0 : s1.querySelector(a1), o1 = null != n1 ? e(n1, t1) : [];\n                    return i1 ? o1.filter((t1)=>t1.matches(i1)) : o1;\n                },\n                enumerable: !0,\n                configurable: !0\n            })\n    });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ function o(t1, e1, r1) {\n    var i1, s1 = t1;\n    return \"object\" == typeof t1 ? (s1 = t1.slot, i1 = t1) : i1 = {\n        flatten: e1\n    }, r1 ? l({\n        slot: s1,\n        flatten: e1,\n        selector: r1\n    }) : o$1({\n        descriptor: (t1)=>({\n                get () {\n                    var t1, e1, r1 = \"slot\" + (s1 ? \"[name=\".concat(s1, \"]\") : \":not([name])\"), a1 = null === (t1 = this.renderRoot) || void 0 === t1 ? void 0 : t1.querySelector(r1);\n                    return null !== (e1 = null == a1 ? void 0 : a1.assignedNodes(i1)) && void 0 !== e1 ? e1 : [];\n                },\n                enumerable: !0,\n                configurable: !0\n            })\n    });\n}\nvar commonjsGlobal = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction getDefaultExportFromCjs(t1) {\n    return t1 && t1.__esModule && Object.prototype.hasOwnProperty.call(t1, \"default\") ? t1.default : t1;\n}\nfunction getDefaultExportFromNamespaceIfPresent(t1) {\n    return t1 && Object.prototype.hasOwnProperty.call(t1, \"default\") ? t1.default : t1;\n}\nfunction getDefaultExportFromNamespaceIfNotNamed(t1) {\n    return t1 && Object.prototype.hasOwnProperty.call(t1, \"default\") && 1 === Object.keys(t1).length ? t1.default : t1;\n}\nfunction getAugmentedNamespace(t1) {\n    if (t1.__esModule) return t1;\n    var e1 = Object.defineProperty({}, \"__esModule\", {\n        value: !0\n    });\n    return Object.keys(t1).forEach(function(r1) {\n        var i1 = Object.getOwnPropertyDescriptor(t1, r1);\n        Object.defineProperty(e1, r1, i1.get ? i1 : {\n            enumerable: !0,\n            get: function() {\n                return t1[r1];\n            }\n        });\n    }), e1;\n}\nfunction commonjsRequire(t1) {\n    throw new Error('Could not dynamically require \"' + t1 + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar lottie$1 = {\n    exports: {}\n};\n(function(module, exports) {\n    var factory;\n    \"undefined\" != typeof navigator && (factory = function() {\n        var svgNS = \"http://www.w3.org/2000/svg\", locationHref = \"\", _useWebWorker = !1, initialDefaultFrame = -999999, setWebWorker = function(t1) {\n            _useWebWorker = !!t1;\n        }, getWebWorker = function() {\n            return _useWebWorker;\n        }, setLocationHref = function(t1) {\n            locationHref = t1;\n        }, getLocationHref = function() {\n            return locationHref;\n        };\n        function createTag(t1) {\n            return document.createElement(t1);\n        }\n        function extendPrototype(t1, e1) {\n            var r1, i1, s1 = t1.length;\n            for(r1 = 0; r1 < s1; r1 += 1)for(var a1 in i1 = t1[r1].prototype)Object.prototype.hasOwnProperty.call(i1, a1) && (e1.prototype[a1] = i1[a1]);\n        }\n        function getDescriptor(t1, e1) {\n            return Object.getOwnPropertyDescriptor(t1, e1);\n        }\n        function createProxyFunction(t1) {\n            function e1() {}\n            return e1.prototype = t1, e1;\n        }\n        var audioControllerFactory = function() {\n            function t1(t1) {\n                this.audios = [], this.audioFactory = t1, this._volume = 1, this._isMuted = !1;\n            }\n            return t1.prototype = {\n                addAudio: function(t1) {\n                    this.audios.push(t1);\n                },\n                pause: function() {\n                    var t1, e1 = this.audios.length;\n                    for(t1 = 0; t1 < e1; t1 += 1)this.audios[t1].pause();\n                },\n                resume: function() {\n                    var t1, e1 = this.audios.length;\n                    for(t1 = 0; t1 < e1; t1 += 1)this.audios[t1].resume();\n                },\n                setRate: function(t1) {\n                    var e1, r1 = this.audios.length;\n                    for(e1 = 0; e1 < r1; e1 += 1)this.audios[e1].setRate(t1);\n                },\n                createAudio: function(t1) {\n                    return this.audioFactory ? this.audioFactory(t1) : window.Howl ? new window.Howl({\n                        src: [\n                            t1\n                        ]\n                    }) : {\n                        isPlaying: !1,\n                        play: function() {\n                            this.isPlaying = !0;\n                        },\n                        seek: function() {\n                            this.isPlaying = !1;\n                        },\n                        playing: function() {},\n                        rate: function() {},\n                        setVolume: function() {}\n                    };\n                },\n                setAudioFactory: function(t1) {\n                    this.audioFactory = t1;\n                },\n                setVolume: function(t1) {\n                    this._volume = t1, this._updateVolume();\n                },\n                mute: function() {\n                    this._isMuted = !0, this._updateVolume();\n                },\n                unmute: function() {\n                    this._isMuted = !1, this._updateVolume();\n                },\n                getVolume: function() {\n                    return this._volume;\n                },\n                _updateVolume: function() {\n                    var t1, e1 = this.audios.length;\n                    for(t1 = 0; t1 < e1; t1 += 1)this.audios[t1].volume(this._volume * (this._isMuted ? 0 : 1));\n                }\n            }, function() {\n                return new t1;\n            };\n        }(), createTypedArray = function() {\n            function t1(t1, e1) {\n                var r1, i1 = 0, s1 = [];\n                switch(t1){\n                    case \"int16\":\n                    case \"uint8c\":\n                        r1 = 1;\n                        break;\n                    default:\n                        r1 = 1.1;\n                }\n                for(i1 = 0; i1 < e1; i1 += 1)s1.push(r1);\n                return s1;\n            }\n            return \"function\" == typeof Uint8ClampedArray && \"function\" == typeof Float32Array ? function(e1, r1) {\n                return \"float32\" === e1 ? new Float32Array(r1) : \"int16\" === e1 ? new Int16Array(r1) : \"uint8c\" === e1 ? new Uint8ClampedArray(r1) : t1(e1, r1);\n            } : t1;\n        }();\n        function createSizedArray(t1) {\n            return Array.apply(null, {\n                length: t1\n            });\n        }\n        function _typeof$6(t1) {\n            return _typeof$6 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$6(t1);\n        }\n        var subframeEnabled = !0, expressionsPlugin = null, expressionsInterfaces = null, idPrefix$1 = \"\", isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent), _shouldRoundValues = !1, bmPow = Math.pow, bmSqrt = Math.sqrt, bmFloor = Math.floor, bmMax = Math.max, bmMin = Math.min, BMMath = {};\n        function ProjectInterface$1() {\n            return {};\n        }\n        !function() {\n            var t1, e1 = [\n                \"abs\",\n                \"acos\",\n                \"acosh\",\n                \"asin\",\n                \"asinh\",\n                \"atan\",\n                \"atanh\",\n                \"atan2\",\n                \"ceil\",\n                \"cbrt\",\n                \"expm1\",\n                \"clz32\",\n                \"cos\",\n                \"cosh\",\n                \"exp\",\n                \"floor\",\n                \"fround\",\n                \"hypot\",\n                \"imul\",\n                \"log\",\n                \"log1p\",\n                \"log2\",\n                \"log10\",\n                \"max\",\n                \"min\",\n                \"pow\",\n                \"random\",\n                \"round\",\n                \"sign\",\n                \"sin\",\n                \"sinh\",\n                \"sqrt\",\n                \"tan\",\n                \"tanh\",\n                \"trunc\",\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG10E\",\n                \"LOG2E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\"\n            ], r1 = e1.length;\n            for(t1 = 0; t1 < r1; t1 += 1)BMMath[e1[t1]] = Math[e1[t1]];\n        }(), BMMath.random = Math.random, BMMath.abs = function(t1) {\n            if (\"object\" === _typeof$6(t1) && t1.length) {\n                var e1, r1 = createSizedArray(t1.length), i1 = t1.length;\n                for(e1 = 0; e1 < i1; e1 += 1)r1[e1] = Math.abs(t1[e1]);\n                return r1;\n            }\n            return Math.abs(t1);\n        };\n        var defaultCurveSegments = 150, degToRads = Math.PI / 180, roundCorner = .5519;\n        function roundValues(t1) {\n            _shouldRoundValues = !!t1;\n        }\n        function bmRnd(t1) {\n            return _shouldRoundValues ? Math.round(t1) : t1;\n        }\n        function styleDiv(t1) {\n            t1.style.position = \"absolute\", t1.style.top = 0, t1.style.left = 0, t1.style.display = \"block\", t1.style.transformOrigin = \"0 0\", t1.style.webkitTransformOrigin = \"0 0\", t1.style.backfaceVisibility = \"visible\", t1.style.webkitBackfaceVisibility = \"visible\", t1.style.transformStyle = \"preserve-3d\", t1.style.webkitTransformStyle = \"preserve-3d\", t1.style.mozTransformStyle = \"preserve-3d\";\n        }\n        function BMEnterFrameEvent(t1, e1, r1, i1) {\n            this.type = t1, this.currentTime = e1, this.totalTime = r1, this.direction = i1 < 0 ? -1 : 1;\n        }\n        function BMCompleteEvent(t1, e1) {\n            this.type = t1, this.direction = e1 < 0 ? -1 : 1;\n        }\n        function BMCompleteLoopEvent(t1, e1, r1, i1) {\n            this.type = t1, this.currentLoop = r1, this.totalLoops = e1, this.direction = i1 < 0 ? -1 : 1;\n        }\n        function BMSegmentStartEvent(t1, e1, r1) {\n            this.type = t1, this.firstFrame = e1, this.totalFrames = r1;\n        }\n        function BMDestroyEvent(t1, e1) {\n            this.type = t1, this.target = e1;\n        }\n        function BMRenderFrameErrorEvent(t1, e1) {\n            this.type = \"renderFrameError\", this.nativeError = t1, this.currentTime = e1;\n        }\n        function BMConfigErrorEvent(t1) {\n            this.type = \"configError\", this.nativeError = t1;\n        }\n        function BMAnimationConfigErrorEvent(t1, e1) {\n            this.type = t1, this.nativeError = e1;\n        }\n        var createElementID = (_count = 0, function() {\n            return idPrefix$1 + \"__lottie_element_\" + (_count += 1);\n        }), _count;\n        function HSVtoRGB(t1, e1, r1) {\n            var i1, s1, a1, n1, o1, h1, l1, p1;\n            switch(h1 = r1 * (1 - e1), l1 = r1 * (1 - (o1 = 6 * t1 - (n1 = Math.floor(6 * t1))) * e1), p1 = r1 * (1 - (1 - o1) * e1), n1 % 6){\n                case 0:\n                    i1 = r1, s1 = p1, a1 = h1;\n                    break;\n                case 1:\n                    i1 = l1, s1 = r1, a1 = h1;\n                    break;\n                case 2:\n                    i1 = h1, s1 = r1, a1 = p1;\n                    break;\n                case 3:\n                    i1 = h1, s1 = l1, a1 = r1;\n                    break;\n                case 4:\n                    i1 = p1, s1 = h1, a1 = r1;\n                    break;\n                case 5:\n                    i1 = r1, s1 = h1, a1 = l1;\n            }\n            return [\n                i1,\n                s1,\n                a1\n            ];\n        }\n        function RGBtoHSV(t1, e1, r1) {\n            var i1, s1 = Math.max(t1, e1, r1), a1 = Math.min(t1, e1, r1), n1 = s1 - a1, o1 = 0 === s1 ? 0 : n1 / s1, h1 = s1 / 255;\n            switch(s1){\n                case a1:\n                    i1 = 0;\n                    break;\n                case t1:\n                    i1 = e1 - r1 + n1 * (e1 < r1 ? 6 : 0), i1 /= 6 * n1;\n                    break;\n                case e1:\n                    i1 = r1 - t1 + 2 * n1, i1 /= 6 * n1;\n                    break;\n                case r1:\n                    i1 = t1 - e1 + 4 * n1, i1 /= 6 * n1;\n            }\n            return [\n                i1,\n                o1,\n                h1\n            ];\n        }\n        function addSaturationToRGB(t1, e1) {\n            var r1 = RGBtoHSV(255 * t1[0], 255 * t1[1], 255 * t1[2]);\n            return r1[1] += e1, r1[1] > 1 ? r1[1] = 1 : r1[1] <= 0 && (r1[1] = 0), HSVtoRGB(r1[0], r1[1], r1[2]);\n        }\n        function addBrightnessToRGB(t1, e1) {\n            var r1 = RGBtoHSV(255 * t1[0], 255 * t1[1], 255 * t1[2]);\n            return r1[2] += e1, r1[2] > 1 ? r1[2] = 1 : r1[2] < 0 && (r1[2] = 0), HSVtoRGB(r1[0], r1[1], r1[2]);\n        }\n        function addHueToRGB(t1, e1) {\n            var r1 = RGBtoHSV(255 * t1[0], 255 * t1[1], 255 * t1[2]);\n            return r1[0] += e1 / 360, r1[0] > 1 ? r1[0] -= 1 : r1[0] < 0 && (r1[0] += 1), HSVtoRGB(r1[0], r1[1], r1[2]);\n        }\n        var rgbToHex = function() {\n            var t1, e1, r1 = [];\n            for(t1 = 0; t1 < 256; t1 += 1)e1 = t1.toString(16), r1[t1] = 1 === e1.length ? \"0\" + e1 : e1;\n            return function(t1, e1, i1) {\n                return t1 < 0 && (t1 = 0), e1 < 0 && (e1 = 0), i1 < 0 && (i1 = 0), \"#\" + r1[t1] + r1[e1] + r1[i1];\n            };\n        }(), setSubframeEnabled = function(t1) {\n            subframeEnabled = !!t1;\n        }, getSubframeEnabled = function() {\n            return subframeEnabled;\n        }, setExpressionsPlugin = function(t1) {\n            expressionsPlugin = t1;\n        }, getExpressionsPlugin = function() {\n            return expressionsPlugin;\n        }, setExpressionInterfaces = function(t1) {\n            expressionsInterfaces = t1;\n        }, getExpressionInterfaces = function() {\n            return expressionsInterfaces;\n        }, setDefaultCurveSegments = function(t1) {\n            defaultCurveSegments = t1;\n        }, getDefaultCurveSegments = function() {\n            return defaultCurveSegments;\n        }, setIdPrefix = function(t1) {\n            idPrefix$1 = t1;\n        }, getIdPrefix = function() {\n            return idPrefix$1;\n        };\n        function createNS(t1) {\n            return document.createElementNS(svgNS, t1);\n        }\n        function _typeof$5(t1) {\n            return _typeof$5 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$5(t1);\n        }\n        var dataManager = function() {\n            var t1, e1, r1 = 1, i1 = [], s1 = {\n                onmessage: function() {},\n                postMessage: function(e1) {\n                    t1({\n                        data: e1\n                    });\n                }\n            }, _workerSelf1 = {\n                postMessage: function(t1) {\n                    s1.onmessage({\n                        data: t1\n                    });\n                }\n            };\n            function a1() {\n                e1 || (e1 = function(e1) {\n                    if (window.Worker && window.Blob && getWebWorker()) {\n                        var r1 = new Blob([\n                            \"var _workerSelf = self; self.onmessage = \",\n                            e1.toString()\n                        ], {\n                            type: \"text/javascript\"\n                        }), i1 = URL.createObjectURL(r1);\n                        return new Worker(i1);\n                    }\n                    return t1 = e1, s1;\n                }(function(t1) {\n                    if (_workerSelf1.dataManager || (_workerSelf1.dataManager = function() {\n                        function t1(s1, a1) {\n                            var n1, o1, h1, l1, p1, f1, u1 = s1.length;\n                            for(o1 = 0; o1 < u1; o1 += 1)if (\"ks\" in (n1 = s1[o1]) && !n1.completed) {\n                                if (n1.completed = !0, n1.hasMask) {\n                                    var d1 = n1.masksProperties;\n                                    for(l1 = d1.length, h1 = 0; h1 < l1; h1 += 1)if (d1[h1].pt.k.i) i1(d1[h1].pt.k);\n                                    else for(f1 = d1[h1].pt.k.length, p1 = 0; p1 < f1; p1 += 1)d1[h1].pt.k[p1].s && i1(d1[h1].pt.k[p1].s[0]), d1[h1].pt.k[p1].e && i1(d1[h1].pt.k[p1].e[0]);\n                                }\n                                0 === n1.ty ? (n1.layers = e1(n1.refId, a1), t1(n1.layers, a1)) : 4 === n1.ty ? r1(n1.shapes) : 5 === n1.ty && c1(n1);\n                            }\n                        }\n                        function e1(t1, e1) {\n                            var r1 = function(t1, e1) {\n                                for(var r1 = 0, i1 = e1.length; r1 < i1;){\n                                    if (e1[r1].id === t1) return e1[r1];\n                                    r1 += 1;\n                                }\n                                return null;\n                            }(t1, e1);\n                            return r1 ? r1.layers.__used ? JSON.parse(JSON.stringify(r1.layers)) : (r1.layers.__used = !0, r1.layers) : null;\n                        }\n                        function r1(t1) {\n                            var e1, s1, a1;\n                            for(e1 = t1.length - 1; e1 >= 0; e1 -= 1)if (\"sh\" === t1[e1].ty) if (t1[e1].ks.k.i) i1(t1[e1].ks.k);\n                            else for(a1 = t1[e1].ks.k.length, s1 = 0; s1 < a1; s1 += 1)t1[e1].ks.k[s1].s && i1(t1[e1].ks.k[s1].s[0]), t1[e1].ks.k[s1].e && i1(t1[e1].ks.k[s1].e[0]);\n                            else \"gr\" === t1[e1].ty && r1(t1[e1].it);\n                        }\n                        function i1(t1) {\n                            var e1, r1 = t1.i.length;\n                            for(e1 = 0; e1 < r1; e1 += 1)t1.i[e1][0] += t1.v[e1][0], t1.i[e1][1] += t1.v[e1][1], t1.o[e1][0] += t1.v[e1][0], t1.o[e1][1] += t1.v[e1][1];\n                        }\n                        function s1(t1, e1) {\n                            var r1 = e1 ? e1.split(\".\") : [\n                                100,\n                                100,\n                                100\n                            ];\n                            return t1[0] > r1[0] || !(r1[0] > t1[0]) && (t1[1] > r1[1] || !(r1[1] > t1[1]) && (t1[2] > r1[2] || !(r1[2] > t1[2]) && null));\n                        }\n                        var a1, n1 = function() {\n                            var t1 = [\n                                4,\n                                4,\n                                14\n                            ];\n                            function e1(t1) {\n                                var e1, r1, i1, s1 = t1.length;\n                                for(e1 = 0; e1 < s1; e1 += 1)5 === t1[e1].ty && (i1 = void 0, i1 = (r1 = t1[e1]).t.d, r1.t.d = {\n                                    k: [\n                                        {\n                                            s: i1,\n                                            t: 0\n                                        }\n                                    ]\n                                });\n                            }\n                            return function(r1) {\n                                if (s1(t1, r1.v) && (e1(r1.layers), r1.assets)) {\n                                    var i1, a1 = r1.assets.length;\n                                    for(i1 = 0; i1 < a1; i1 += 1)r1.assets[i1].layers && e1(r1.assets[i1].layers);\n                                }\n                            };\n                        }(), o1 = (a1 = [\n                            4,\n                            7,\n                            99\n                        ], function(t1) {\n                            if (t1.chars && !s1(a1, t1.v)) {\n                                var e1, i1 = t1.chars.length;\n                                for(e1 = 0; e1 < i1; e1 += 1){\n                                    var n1 = t1.chars[e1];\n                                    n1.data && n1.data.shapes && (r1(n1.data.shapes), n1.data.ip = 0, n1.data.op = 99999, n1.data.st = 0, n1.data.sr = 1, n1.data.ks = {\n                                        p: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        s: {\n                                            k: [\n                                                100,\n                                                100\n                                            ],\n                                            a: 0\n                                        },\n                                        a: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        r: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        o: {\n                                            k: 100,\n                                            a: 0\n                                        }\n                                    }, t1.chars[e1].t || (n1.data.shapes.push({\n                                        ty: \"no\"\n                                    }), n1.data.shapes[0].it.push({\n                                        p: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        s: {\n                                            k: [\n                                                100,\n                                                100\n                                            ],\n                                            a: 0\n                                        },\n                                        a: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        r: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        o: {\n                                            k: 100,\n                                            a: 0\n                                        },\n                                        sk: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        sa: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        ty: \"tr\"\n                                    })));\n                                }\n                            }\n                        }), h1 = function() {\n                            var t1 = [\n                                5,\n                                7,\n                                15\n                            ];\n                            function e1(t1) {\n                                var e1, r1, i1 = t1.length;\n                                for(e1 = 0; e1 < i1; e1 += 1)5 === t1[e1].ty && (r1 = void 0, \"number\" == typeof (r1 = t1[e1].t.p).a && (r1.a = {\n                                    a: 0,\n                                    k: r1.a\n                                }), \"number\" == typeof r1.p && (r1.p = {\n                                    a: 0,\n                                    k: r1.p\n                                }), \"number\" == typeof r1.r && (r1.r = {\n                                    a: 0,\n                                    k: r1.r\n                                }));\n                            }\n                            return function(r1) {\n                                if (s1(t1, r1.v) && (e1(r1.layers), r1.assets)) {\n                                    var i1, a1 = r1.assets.length;\n                                    for(i1 = 0; i1 < a1; i1 += 1)r1.assets[i1].layers && e1(r1.assets[i1].layers);\n                                }\n                            };\n                        }(), l1 = function() {\n                            var t1 = [\n                                4,\n                                1,\n                                9\n                            ];\n                            function e1(t1) {\n                                var r1, i1, s1, a1 = t1.length;\n                                for(r1 = 0; r1 < a1; r1 += 1)if (\"gr\" === t1[r1].ty) e1(t1[r1].it);\n                                else if (\"fl\" === t1[r1].ty || \"st\" === t1[r1].ty) if (t1[r1].c.k && t1[r1].c.k[0].i) for(s1 = t1[r1].c.k.length, i1 = 0; i1 < s1; i1 += 1)t1[r1].c.k[i1].s && (t1[r1].c.k[i1].s[0] /= 255, t1[r1].c.k[i1].s[1] /= 255, t1[r1].c.k[i1].s[2] /= 255, t1[r1].c.k[i1].s[3] /= 255), t1[r1].c.k[i1].e && (t1[r1].c.k[i1].e[0] /= 255, t1[r1].c.k[i1].e[1] /= 255, t1[r1].c.k[i1].e[2] /= 255, t1[r1].c.k[i1].e[3] /= 255);\n                                else t1[r1].c.k[0] /= 255, t1[r1].c.k[1] /= 255, t1[r1].c.k[2] /= 255, t1[r1].c.k[3] /= 255;\n                            }\n                            function r1(t1) {\n                                var r1, i1 = t1.length;\n                                for(r1 = 0; r1 < i1; r1 += 1)4 === t1[r1].ty && e1(t1[r1].shapes);\n                            }\n                            return function(e1) {\n                                if (s1(t1, e1.v) && (r1(e1.layers), e1.assets)) {\n                                    var i1, a1 = e1.assets.length;\n                                    for(i1 = 0; i1 < a1; i1 += 1)e1.assets[i1].layers && r1(e1.assets[i1].layers);\n                                }\n                            };\n                        }(), p1 = function() {\n                            var t1 = [\n                                4,\n                                4,\n                                18\n                            ];\n                            function e1(t1) {\n                                var r1, i1, s1;\n                                for(r1 = t1.length - 1; r1 >= 0; r1 -= 1)if (\"sh\" === t1[r1].ty) if (t1[r1].ks.k.i) t1[r1].ks.k.c = t1[r1].closed;\n                                else for(s1 = t1[r1].ks.k.length, i1 = 0; i1 < s1; i1 += 1)t1[r1].ks.k[i1].s && (t1[r1].ks.k[i1].s[0].c = t1[r1].closed), t1[r1].ks.k[i1].e && (t1[r1].ks.k[i1].e[0].c = t1[r1].closed);\n                                else \"gr\" === t1[r1].ty && e1(t1[r1].it);\n                            }\n                            function r1(t1) {\n                                var r1, i1, s1, a1, n1, o1, h1 = t1.length;\n                                for(i1 = 0; i1 < h1; i1 += 1){\n                                    if ((r1 = t1[i1]).hasMask) {\n                                        var l1 = r1.masksProperties;\n                                        for(a1 = l1.length, s1 = 0; s1 < a1; s1 += 1)if (l1[s1].pt.k.i) l1[s1].pt.k.c = l1[s1].cl;\n                                        else for(o1 = l1[s1].pt.k.length, n1 = 0; n1 < o1; n1 += 1)l1[s1].pt.k[n1].s && (l1[s1].pt.k[n1].s[0].c = l1[s1].cl), l1[s1].pt.k[n1].e && (l1[s1].pt.k[n1].e[0].c = l1[s1].cl);\n                                    }\n                                    4 === r1.ty && e1(r1.shapes);\n                                }\n                            }\n                            return function(e1) {\n                                if (s1(t1, e1.v) && (r1(e1.layers), e1.assets)) {\n                                    var i1, a1 = e1.assets.length;\n                                    for(i1 = 0; i1 < a1; i1 += 1)e1.assets[i1].layers && r1(e1.assets[i1].layers);\n                                }\n                            };\n                        }();\n                        function c1(t1) {\n                            0 === t1.t.a.length && t1.t.p;\n                        }\n                        var f1 = {\n                            completeData: function(r1) {\n                                r1.__complete || (l1(r1), n1(r1), o1(r1), h1(r1), p1(r1), t1(r1.layers, r1.assets), function(r1, i1) {\n                                    if (r1) {\n                                        var s1 = 0, a1 = r1.length;\n                                        for(s1 = 0; s1 < a1; s1 += 1)1 === r1[s1].t && (r1[s1].data.layers = e1(r1[s1].data.refId, i1), t1(r1[s1].data.layers, i1));\n                                    }\n                                }(r1.chars, r1.assets), r1.__complete = !0);\n                            }\n                        };\n                        return f1.checkColors = l1, f1.checkChars = o1, f1.checkPathProperties = h1, f1.checkShapes = p1, f1.completeLayers = t1, f1;\n                    }()), _workerSelf1.assetLoader || (_workerSelf1.assetLoader = function() {\n                        function t1(t1) {\n                            var e1 = t1.getResponseHeader(\"content-type\");\n                            return e1 && \"json\" === t1.responseType && -1 !== e1.indexOf(\"json\") || t1.response && \"object\" === _typeof$5(t1.response) ? t1.response : t1.response && \"string\" == typeof t1.response ? JSON.parse(t1.response) : t1.responseText ? JSON.parse(t1.responseText) : null;\n                        }\n                        return {\n                            load: function(e1, r1, i1, s1) {\n                                var a1, n1 = new XMLHttpRequest;\n                                try {\n                                    n1.responseType = \"json\";\n                                } catch (t1) {}\n                                n1.onreadystatechange = function() {\n                                    if (4 === n1.readyState) if (200 === n1.status) a1 = t1(n1), i1(a1);\n                                    else try {\n                                        a1 = t1(n1), i1(a1);\n                                    } catch (t1) {\n                                        s1 && s1(t1);\n                                    }\n                                };\n                                try {\n                                    n1.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), e1, !0);\n                                } catch (t1) {\n                                    n1.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), r1 + \"/\" + e1, !0);\n                                }\n                                n1.send();\n                            }\n                        };\n                    }()), \"loadAnimation\" === t1.data.type) _workerSelf1.assetLoader.load(t1.data.path, t1.data.fullPath, function(e1) {\n                        _workerSelf1.dataManager.completeData(e1), _workerSelf1.postMessage({\n                            id: t1.data.id,\n                            payload: e1,\n                            status: \"success\"\n                        });\n                    }, function() {\n                        _workerSelf1.postMessage({\n                            id: t1.data.id,\n                            status: \"error\"\n                        });\n                    });\n                    else if (\"complete\" === t1.data.type) {\n                        var e1 = t1.data.animation;\n                        _workerSelf1.dataManager.completeData(e1), _workerSelf1.postMessage({\n                            id: t1.data.id,\n                            payload: e1,\n                            status: \"success\"\n                        });\n                    } else \"loadData\" === t1.data.type && _workerSelf1.assetLoader.load(t1.data.path, t1.data.fullPath, function(e1) {\n                        _workerSelf1.postMessage({\n                            id: t1.data.id,\n                            payload: e1,\n                            status: \"success\"\n                        });\n                    }, function() {\n                        _workerSelf1.postMessage({\n                            id: t1.data.id,\n                            status: \"error\"\n                        });\n                    });\n                }), e1.onmessage = function(t1) {\n                    var e1 = t1.data, r1 = e1.id, s1 = i1[r1];\n                    i1[r1] = null, \"success\" === e1.status ? s1.onComplete(e1.payload) : s1.onError && s1.onError();\n                });\n            }\n            function n1(t1, e1) {\n                var s1 = \"processId_\" + (r1 += 1);\n                return i1[s1] = {\n                    onComplete: t1,\n                    onError: e1\n                }, s1;\n            }\n            return {\n                loadAnimation: function(t1, r1, i1) {\n                    a1();\n                    var s1 = n1(r1, i1);\n                    e1.postMessage({\n                        type: \"loadAnimation\",\n                        path: t1,\n                        fullPath: window.location.origin + window.location.pathname,\n                        id: s1\n                    });\n                },\n                loadData: function(t1, r1, i1) {\n                    a1();\n                    var s1 = n1(r1, i1);\n                    e1.postMessage({\n                        type: \"loadData\",\n                        path: t1,\n                        fullPath: window.location.origin + window.location.pathname,\n                        id: s1\n                    });\n                },\n                completeAnimation: function(t1, r1, i1) {\n                    a1();\n                    var s1 = n1(r1, i1);\n                    e1.postMessage({\n                        type: \"complete\",\n                        animation: t1,\n                        id: s1\n                    });\n                }\n            };\n        }(), ImagePreloader = function() {\n            var t1 = function() {\n                var t1 = createTag(\"canvas\");\n                t1.width = 1, t1.height = 1;\n                var e1 = t1.getContext(\"2d\");\n                return e1.fillStyle = \"rgba(0,0,0,0)\", e1.fillRect(0, 0, 1, 1), t1;\n            }();\n            function e1() {\n                this.loadedAssets += 1, this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages && this.imagesLoadedCb && this.imagesLoadedCb(null);\n            }\n            function r1() {\n                this.loadedFootagesCount += 1, this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages && this.imagesLoadedCb && this.imagesLoadedCb(null);\n            }\n            function i1(t1, e1, r1) {\n                var i1 = \"\";\n                if (t1.e) i1 = t1.p;\n                else if (e1) {\n                    var s1 = t1.p;\n                    -1 !== s1.indexOf(\"images/\") && (s1 = s1.split(\"/\")[1]), i1 = e1 + s1;\n                } else i1 = r1, i1 += t1.u ? t1.u : \"\", i1 += t1.p;\n                return i1;\n            }\n            function s1(t1) {\n                var e1 = 0, r1 = setInterval((function() {\n                    (t1.getBBox().width || e1 > 500) && (this._imageLoaded(), clearInterval(r1)), e1 += 1;\n                }).bind(this), 50);\n            }\n            function a1(t1) {\n                var e1 = {\n                    assetData: t1\n                }, r1 = i1(t1, this.assetsPath, this.path);\n                return dataManager.loadData(r1, (function(t1) {\n                    e1.img = t1, this._footageLoaded();\n                }).bind(this), (function() {\n                    e1.img = {}, this._footageLoaded();\n                }).bind(this)), e1;\n            }\n            function n1() {\n                this._imageLoaded = e1.bind(this), this._footageLoaded = r1.bind(this), this.testImageLoaded = s1.bind(this), this.createFootageData = a1.bind(this), this.assetsPath = \"\", this.path = \"\", this.totalImages = 0, this.totalFootages = 0, this.loadedAssets = 0, this.loadedFootagesCount = 0, this.imagesLoadedCb = null, this.images = [];\n            }\n            return n1.prototype = {\n                loadAssets: function(t1, e1) {\n                    var r1;\n                    this.imagesLoadedCb = e1;\n                    var i1 = t1.length;\n                    for(r1 = 0; r1 < i1; r1 += 1)t1[r1].layers || (t1[r1].t && \"seq\" !== t1[r1].t ? 3 === t1[r1].t && (this.totalFootages += 1, this.images.push(this.createFootageData(t1[r1]))) : (this.totalImages += 1, this.images.push(this._createImageData(t1[r1]))));\n                },\n                setAssetsPath: function(t1) {\n                    this.assetsPath = t1 || \"\";\n                },\n                setPath: function(t1) {\n                    this.path = t1 || \"\";\n                },\n                loadedImages: function() {\n                    return this.totalImages === this.loadedAssets;\n                },\n                loadedFootages: function() {\n                    return this.totalFootages === this.loadedFootagesCount;\n                },\n                destroy: function() {\n                    this.imagesLoadedCb = null, this.images.length = 0;\n                },\n                getAsset: function(t1) {\n                    for(var e1 = 0, r1 = this.images.length; e1 < r1;){\n                        if (this.images[e1].assetData === t1) return this.images[e1].img;\n                        e1 += 1;\n                    }\n                    return null;\n                },\n                createImgData: function(e1) {\n                    var r1 = i1(e1, this.assetsPath, this.path), s1 = createTag(\"img\");\n                    s1.crossOrigin = \"anonymous\", s1.addEventListener(\"load\", this._imageLoaded, !1), s1.addEventListener(\"error\", (function() {\n                        a1.img = t1, this._imageLoaded();\n                    }).bind(this), !1), s1.src = r1;\n                    var a1 = {\n                        img: s1,\n                        assetData: e1\n                    };\n                    return a1;\n                },\n                createImageData: function(e1) {\n                    var r1 = i1(e1, this.assetsPath, this.path), s1 = createNS(\"image\");\n                    isSafari ? this.testImageLoaded(s1) : s1.addEventListener(\"load\", this._imageLoaded, !1), s1.addEventListener(\"error\", (function() {\n                        a1.img = t1, this._imageLoaded();\n                    }).bind(this), !1), s1.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", r1), this._elementHelper.append ? this._elementHelper.append(s1) : this._elementHelper.appendChild(s1);\n                    var a1 = {\n                        img: s1,\n                        assetData: e1\n                    };\n                    return a1;\n                },\n                imageLoaded: e1,\n                footageLoaded: r1,\n                setCacheType: function(t1, e1) {\n                    \"svg\" === t1 ? (this._elementHelper = e1, this._createImageData = this.createImageData.bind(this)) : this._createImageData = this.createImgData.bind(this);\n                }\n            }, n1;\n        }();\n        function BaseEvent() {}\n        BaseEvent.prototype = {\n            triggerEvent: function(t1, e1) {\n                if (this._cbs[t1]) for(var r1 = this._cbs[t1], i1 = 0; i1 < r1.length; i1 += 1)r1[i1](e1);\n            },\n            addEventListener: function(t1, e1) {\n                return this._cbs[t1] || (this._cbs[t1] = []), this._cbs[t1].push(e1), (function() {\n                    this.removeEventListener(t1, e1);\n                }).bind(this);\n            },\n            removeEventListener: function(t1, e1) {\n                if (e1) {\n                    if (this._cbs[t1]) {\n                        for(var r1 = 0, i1 = this._cbs[t1].length; r1 < i1;)this._cbs[t1][r1] === e1 && (this._cbs[t1].splice(r1, 1), r1 -= 1, i1 -= 1), r1 += 1;\n                        this._cbs[t1].length || (this._cbs[t1] = null);\n                    }\n                } else this._cbs[t1] = null;\n            }\n        };\n        var markerParser = function() {\n            function t1(t1) {\n                for(var e1, r1 = t1.split(\"\\r\\n\"), i1 = {}, s1 = 0, a1 = 0; a1 < r1.length; a1 += 1)2 === (e1 = r1[a1].split(\":\")).length && (i1[e1[0]] = e1[1].trim(), s1 += 1);\n                if (0 === s1) throw new Error;\n                return i1;\n            }\n            return function(e1) {\n                for(var r1 = [], i1 = 0; i1 < e1.length; i1 += 1){\n                    var s1 = e1[i1], a1 = {\n                        time: s1.tm,\n                        duration: s1.dr\n                    };\n                    try {\n                        a1.payload = JSON.parse(e1[i1].cm);\n                    } catch (r1) {\n                        try {\n                            a1.payload = t1(e1[i1].cm);\n                        } catch (t1) {\n                            a1.payload = {\n                                name: e1[i1].cm\n                            };\n                        }\n                    }\n                    r1.push(a1);\n                }\n                return r1;\n            };\n        }(), ProjectInterface = function() {\n            function t1(t1) {\n                this.compositions.push(t1);\n            }\n            return function() {\n                function e1(t1) {\n                    for(var e1 = 0, r1 = this.compositions.length; e1 < r1;){\n                        if (this.compositions[e1].data && this.compositions[e1].data.nm === t1) return this.compositions[e1].prepareFrame && this.compositions[e1].data.xt && this.compositions[e1].prepareFrame(this.currentFrame), this.compositions[e1].compInterface;\n                        e1 += 1;\n                    }\n                    return null;\n                }\n                return e1.compositions = [], e1.currentFrame = 0, e1.registerComposition = t1, e1;\n            };\n        }(), renderers = {}, registerRenderer = function(t1, e1) {\n            renderers[t1] = e1;\n        };\n        function getRenderer(t1) {\n            return renderers[t1];\n        }\n        function getRegisteredRenderer() {\n            if (renderers.canvas) return \"canvas\";\n            for(var t1 in renderers)if (renderers[t1]) return t1;\n            return \"\";\n        }\n        function _typeof$4(t1) {\n            return _typeof$4 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$4(t1);\n        }\n        var AnimationItem = function() {\n            this._cbs = [], this.name = \"\", this.path = \"\", this.isLoaded = !1, this.currentFrame = 0, this.currentRawFrame = 0, this.firstFrame = 0, this.totalFrames = 0, this.frameRate = 0, this.frameMult = 0, this.playSpeed = 1, this.playDirection = 1, this.playCount = 0, this.animationData = {}, this.assets = [], this.isPaused = !0, this.autoplay = !1, this.loop = !0, this.renderer = null, this.animationID = createElementID(), this.assetsPath = \"\", this.timeCompleted = 0, this.segmentPos = 0, this.isSubframeEnabled = getSubframeEnabled(), this.segments = [], this._idle = !0, this._completedLoop = !1, this.projectInterface = ProjectInterface(), this.imagePreloader = new ImagePreloader, this.audioController = audioControllerFactory(), this.markers = [], this.configAnimation = this.configAnimation.bind(this), this.onSetupError = this.onSetupError.bind(this), this.onSegmentComplete = this.onSegmentComplete.bind(this), this.drawnFrameEvent = new BMEnterFrameEvent(\"drawnFrame\", 0, 0, 0), this.expressionsPlugin = getExpressionsPlugin();\n        };\n        extendPrototype([\n            BaseEvent\n        ], AnimationItem), AnimationItem.prototype.setParams = function(t1) {\n            (t1.wrapper || t1.container) && (this.wrapper = t1.wrapper || t1.container);\n            var e1 = \"svg\";\n            t1.animType ? e1 = t1.animType : t1.renderer && (e1 = t1.renderer);\n            var r1 = getRenderer(e1);\n            this.renderer = new r1(this, t1.rendererSettings), this.imagePreloader.setCacheType(e1, this.renderer.globalData.defs), this.renderer.setProjectInterface(this.projectInterface), this.animType = e1, \"\" === t1.loop || null === t1.loop || void 0 === t1.loop || !0 === t1.loop ? this.loop = !0 : !1 === t1.loop ? this.loop = !1 : this.loop = parseInt(t1.loop, 10), this.autoplay = !(\"autoplay\" in t1) || t1.autoplay, this.name = t1.name ? t1.name : \"\", this.autoloadSegments = !Object.prototype.hasOwnProperty.call(t1, \"autoloadSegments\") || t1.autoloadSegments, this.assetsPath = t1.assetsPath, this.initialSegment = t1.initialSegment, t1.audioFactory && this.audioController.setAudioFactory(t1.audioFactory), t1.animationData ? this.setupAnimation(t1.animationData) : t1.path && (-1 !== t1.path.lastIndexOf(\"\\\\\") ? this.path = t1.path.substr(0, t1.path.lastIndexOf(\"\\\\\") + 1) : this.path = t1.path.substr(0, t1.path.lastIndexOf(\"/\") + 1), this.fileName = t1.path.substr(t1.path.lastIndexOf(\"/\") + 1), this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(\".json\")), dataManager.loadAnimation(t1.path, this.configAnimation, this.onSetupError));\n        }, AnimationItem.prototype.onSetupError = function() {\n            this.trigger(\"data_failed\");\n        }, AnimationItem.prototype.setupAnimation = function(t1) {\n            dataManager.completeAnimation(t1, this.configAnimation);\n        }, AnimationItem.prototype.setData = function(t1, e1) {\n            e1 && \"object\" !== _typeof$4(e1) && (e1 = JSON.parse(e1));\n            var r1 = {\n                wrapper: t1,\n                animationData: e1\n            }, i1 = t1.attributes;\n            r1.path = i1.getNamedItem(\"data-animation-path\") ? i1.getNamedItem(\"data-animation-path\").value : i1.getNamedItem(\"data-bm-path\") ? i1.getNamedItem(\"data-bm-path\").value : i1.getNamedItem(\"bm-path\") ? i1.getNamedItem(\"bm-path\").value : \"\", r1.animType = i1.getNamedItem(\"data-anim-type\") ? i1.getNamedItem(\"data-anim-type\").value : i1.getNamedItem(\"data-bm-type\") ? i1.getNamedItem(\"data-bm-type\").value : i1.getNamedItem(\"bm-type\") ? i1.getNamedItem(\"bm-type\").value : i1.getNamedItem(\"data-bm-renderer\") ? i1.getNamedItem(\"data-bm-renderer\").value : i1.getNamedItem(\"bm-renderer\") ? i1.getNamedItem(\"bm-renderer\").value : getRegisteredRenderer() || \"canvas\";\n            var s1 = i1.getNamedItem(\"data-anim-loop\") ? i1.getNamedItem(\"data-anim-loop\").value : i1.getNamedItem(\"data-bm-loop\") ? i1.getNamedItem(\"data-bm-loop\").value : i1.getNamedItem(\"bm-loop\") ? i1.getNamedItem(\"bm-loop\").value : \"\";\n            \"false\" === s1 ? r1.loop = !1 : \"true\" === s1 ? r1.loop = !0 : \"\" !== s1 && (r1.loop = parseInt(s1, 10));\n            var a1 = i1.getNamedItem(\"data-anim-autoplay\") ? i1.getNamedItem(\"data-anim-autoplay\").value : i1.getNamedItem(\"data-bm-autoplay\") ? i1.getNamedItem(\"data-bm-autoplay\").value : !i1.getNamedItem(\"bm-autoplay\") || i1.getNamedItem(\"bm-autoplay\").value;\n            r1.autoplay = \"false\" !== a1, r1.name = i1.getNamedItem(\"data-name\") ? i1.getNamedItem(\"data-name\").value : i1.getNamedItem(\"data-bm-name\") ? i1.getNamedItem(\"data-bm-name\").value : i1.getNamedItem(\"bm-name\") ? i1.getNamedItem(\"bm-name\").value : \"\", \"false\" === (i1.getNamedItem(\"data-anim-prerender\") ? i1.getNamedItem(\"data-anim-prerender\").value : i1.getNamedItem(\"data-bm-prerender\") ? i1.getNamedItem(\"data-bm-prerender\").value : i1.getNamedItem(\"bm-prerender\") ? i1.getNamedItem(\"bm-prerender\").value : \"\") && (r1.prerender = !1), r1.path ? this.setParams(r1) : this.trigger(\"destroy\");\n        }, AnimationItem.prototype.includeLayers = function(t1) {\n            t1.op > this.animationData.op && (this.animationData.op = t1.op, this.totalFrames = Math.floor(t1.op - this.animationData.ip));\n            var e1, r1, i1 = this.animationData.layers, s1 = i1.length, a1 = t1.layers, n1 = a1.length;\n            for(r1 = 0; r1 < n1; r1 += 1)for(e1 = 0; e1 < s1;){\n                if (i1[e1].id === a1[r1].id) {\n                    i1[e1] = a1[r1];\n                    break;\n                }\n                e1 += 1;\n            }\n            if ((t1.chars || t1.fonts) && (this.renderer.globalData.fontManager.addChars(t1.chars), this.renderer.globalData.fontManager.addFonts(t1.fonts, this.renderer.globalData.defs)), t1.assets) for(s1 = t1.assets.length, e1 = 0; e1 < s1; e1 += 1)this.animationData.assets.push(t1.assets[e1]);\n            this.animationData.__complete = !1, dataManager.completeAnimation(this.animationData, this.onSegmentComplete);\n        }, AnimationItem.prototype.onSegmentComplete = function(t1) {\n            this.animationData = t1;\n            var e1 = getExpressionsPlugin();\n            e1 && e1.initExpressions(this), this.loadNextSegment();\n        }, AnimationItem.prototype.loadNextSegment = function() {\n            var t1 = this.animationData.segments;\n            if (!t1 || 0 === t1.length || !this.autoloadSegments) return this.trigger(\"data_ready\"), void (this.timeCompleted = this.totalFrames);\n            var e1 = t1.shift();\n            this.timeCompleted = e1.time * this.frameRate;\n            var r1 = this.path + this.fileName + \"_\" + this.segmentPos + \".json\";\n            this.segmentPos += 1, dataManager.loadData(r1, this.includeLayers.bind(this), (function() {\n                this.trigger(\"data_failed\");\n            }).bind(this));\n        }, AnimationItem.prototype.loadSegments = function() {\n            this.animationData.segments || (this.timeCompleted = this.totalFrames), this.loadNextSegment();\n        }, AnimationItem.prototype.imagesLoaded = function() {\n            this.trigger(\"loaded_images\"), this.checkLoaded();\n        }, AnimationItem.prototype.preloadImages = function() {\n            this.imagePreloader.setAssetsPath(this.assetsPath), this.imagePreloader.setPath(this.path), this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));\n        }, AnimationItem.prototype.configAnimation = function(t1) {\n            if (this.renderer) try {\n                this.animationData = t1, this.initialSegment ? (this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]), this.firstFrame = Math.round(this.initialSegment[0])) : (this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip), this.firstFrame = Math.round(this.animationData.ip)), this.renderer.configAnimation(t1), t1.assets || (t1.assets = []), this.assets = this.animationData.assets, this.frameRate = this.animationData.fr, this.frameMult = this.animationData.fr / 1e3, this.renderer.searchExtraCompositions(t1.assets), this.markers = markerParser(t1.markers || []), this.trigger(\"config_ready\"), this.preloadImages(), this.loadSegments(), this.updaFrameModifier(), this.waitForFontsLoaded(), this.isPaused && this.audioController.pause();\n            } catch (t1) {\n                this.triggerConfigError(t1);\n            }\n        }, AnimationItem.prototype.waitForFontsLoaded = function() {\n            this.renderer && (this.renderer.globalData.fontManager.isLoaded ? this.checkLoaded() : setTimeout(this.waitForFontsLoaded.bind(this), 20));\n        }, AnimationItem.prototype.checkLoaded = function() {\n            if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || \"canvas\" !== this.renderer.rendererType) && this.imagePreloader.loadedFootages()) {\n                this.isLoaded = !0;\n                var t1 = getExpressionsPlugin();\n                t1 && t1.initExpressions(this), this.renderer.initItems(), setTimeout((function() {\n                    this.trigger(\"DOMLoaded\");\n                }).bind(this), 0), this.gotoFrame(), this.autoplay && this.play();\n            }\n        }, AnimationItem.prototype.resize = function(t1, e1) {\n            var r1 = \"number\" == typeof t1 ? t1 : void 0, i1 = \"number\" == typeof e1 ? e1 : void 0;\n            this.renderer.updateContainerSize(r1, i1);\n        }, AnimationItem.prototype.setSubframe = function(t1) {\n            this.isSubframeEnabled = !!t1;\n        }, AnimationItem.prototype.gotoFrame = function() {\n            this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame, this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted && (this.currentFrame = this.timeCompleted), this.trigger(\"enterFrame\"), this.renderFrame(), this.trigger(\"drawnFrame\");\n        }, AnimationItem.prototype.renderFrame = function() {\n            if (!1 !== this.isLoaded && this.renderer) try {\n                this.expressionsPlugin && this.expressionsPlugin.resetFrame(), this.renderer.renderFrame(this.currentFrame + this.firstFrame);\n            } catch (t1) {\n                this.triggerRenderFrameError(t1);\n            }\n        }, AnimationItem.prototype.play = function(t1) {\n            t1 && this.name !== t1 || !0 === this.isPaused && (this.isPaused = !1, this.trigger(\"_play\"), this.audioController.resume(), this._idle && (this._idle = !1, this.trigger(\"_active\")));\n        }, AnimationItem.prototype.pause = function(t1) {\n            t1 && this.name !== t1 || !1 === this.isPaused && (this.isPaused = !0, this.trigger(\"_pause\"), this._idle = !0, this.trigger(\"_idle\"), this.audioController.pause());\n        }, AnimationItem.prototype.togglePause = function(t1) {\n            t1 && this.name !== t1 || (!0 === this.isPaused ? this.play() : this.pause());\n        }, AnimationItem.prototype.stop = function(t1) {\n            t1 && this.name !== t1 || (this.pause(), this.playCount = 0, this._completedLoop = !1, this.setCurrentRawFrameValue(0));\n        }, AnimationItem.prototype.getMarkerData = function(t1) {\n            for(var e1, r1 = 0; r1 < this.markers.length; r1 += 1)if ((e1 = this.markers[r1]).payload && e1.payload.name === t1) return e1;\n            return null;\n        }, AnimationItem.prototype.goToAndStop = function(t1, e1, r1) {\n            if (!r1 || this.name === r1) {\n                var i1 = Number(t1);\n                if (isNaN(i1)) {\n                    var s1 = this.getMarkerData(t1);\n                    s1 && this.goToAndStop(s1.time, !0);\n                } else e1 ? this.setCurrentRawFrameValue(t1) : this.setCurrentRawFrameValue(t1 * this.frameModifier);\n                this.pause();\n            }\n        }, AnimationItem.prototype.goToAndPlay = function(t1, e1, r1) {\n            if (!r1 || this.name === r1) {\n                var i1 = Number(t1);\n                if (isNaN(i1)) {\n                    var s1 = this.getMarkerData(t1);\n                    s1 && (s1.duration ? this.playSegments([\n                        s1.time,\n                        s1.time + s1.duration\n                    ], !0) : this.goToAndStop(s1.time, !0));\n                } else this.goToAndStop(i1, e1, r1);\n                this.play();\n            }\n        }, AnimationItem.prototype.advanceTime = function(t1) {\n            if (!0 !== this.isPaused && !1 !== this.isLoaded) {\n                var e1 = this.currentRawFrame + t1 * this.frameModifier, r1 = !1;\n                e1 >= this.totalFrames - 1 && this.frameModifier > 0 ? this.loop && this.playCount !== this.loop ? e1 >= this.totalFrames ? (this.playCount += 1, this.checkSegments(e1 % this.totalFrames) || (this.setCurrentRawFrameValue(e1 % this.totalFrames), this._completedLoop = !0, this.trigger(\"loopComplete\"))) : this.setCurrentRawFrameValue(e1) : this.checkSegments(e1 > this.totalFrames ? e1 % this.totalFrames : 0) || (r1 = !0, e1 = this.totalFrames - 1) : e1 < 0 ? this.checkSegments(e1 % this.totalFrames) || (!this.loop || this.playCount-- <= 0 && !0 !== this.loop ? (r1 = !0, e1 = 0) : (this.setCurrentRawFrameValue(this.totalFrames + e1 % this.totalFrames), this._completedLoop ? this.trigger(\"loopComplete\") : this._completedLoop = !0)) : this.setCurrentRawFrameValue(e1), r1 && (this.setCurrentRawFrameValue(e1), this.pause(), this.trigger(\"complete\"));\n            }\n        }, AnimationItem.prototype.adjustSegment = function(t1, e1) {\n            this.playCount = 0, t1[1] < t1[0] ? (this.frameModifier > 0 && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(-1)), this.totalFrames = t1[0] - t1[1], this.timeCompleted = this.totalFrames, this.firstFrame = t1[1], this.setCurrentRawFrameValue(this.totalFrames - .001 - e1)) : t1[1] > t1[0] && (this.frameModifier < 0 && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(1)), this.totalFrames = t1[1] - t1[0], this.timeCompleted = this.totalFrames, this.firstFrame = t1[0], this.setCurrentRawFrameValue(.001 + e1)), this.trigger(\"segmentStart\");\n        }, AnimationItem.prototype.setSegment = function(t1, e1) {\n            var r1 = -1;\n            this.isPaused && (this.currentRawFrame + this.firstFrame < t1 ? r1 = t1 : this.currentRawFrame + this.firstFrame > e1 && (r1 = e1 - t1)), this.firstFrame = t1, this.totalFrames = e1 - t1, this.timeCompleted = this.totalFrames, -1 !== r1 && this.goToAndStop(r1, !0);\n        }, AnimationItem.prototype.playSegments = function(t1, e1) {\n            if (e1 && (this.segments.length = 0), \"object\" === _typeof$4(t1[0])) {\n                var r1, i1 = t1.length;\n                for(r1 = 0; r1 < i1; r1 += 1)this.segments.push(t1[r1]);\n            } else this.segments.push(t1);\n            this.segments.length && e1 && this.adjustSegment(this.segments.shift(), 0), this.isPaused && this.play();\n        }, AnimationItem.prototype.resetSegments = function(t1) {\n            this.segments.length = 0, this.segments.push([\n                this.animationData.ip,\n                this.animationData.op\n            ]), t1 && this.checkSegments(0);\n        }, AnimationItem.prototype.checkSegments = function(t1) {\n            return !!this.segments.length && (this.adjustSegment(this.segments.shift(), t1), !0);\n        }, AnimationItem.prototype.destroy = function(t1) {\n            t1 && this.name !== t1 || !this.renderer || (this.renderer.destroy(), this.imagePreloader.destroy(), this.trigger(\"destroy\"), this._cbs = null, this.onEnterFrame = null, this.onLoopComplete = null, this.onComplete = null, this.onSegmentStart = null, this.onDestroy = null, this.renderer = null, this.expressionsPlugin = null, this.imagePreloader = null, this.projectInterface = null);\n        }, AnimationItem.prototype.setCurrentRawFrameValue = function(t1) {\n            this.currentRawFrame = t1, this.gotoFrame();\n        }, AnimationItem.prototype.setSpeed = function(t1) {\n            this.playSpeed = t1, this.updaFrameModifier();\n        }, AnimationItem.prototype.setDirection = function(t1) {\n            this.playDirection = t1 < 0 ? -1 : 1, this.updaFrameModifier();\n        }, AnimationItem.prototype.setLoop = function(t1) {\n            this.loop = t1;\n        }, AnimationItem.prototype.setVolume = function(t1, e1) {\n            e1 && this.name !== e1 || this.audioController.setVolume(t1);\n        }, AnimationItem.prototype.getVolume = function() {\n            return this.audioController.getVolume();\n        }, AnimationItem.prototype.mute = function(t1) {\n            t1 && this.name !== t1 || this.audioController.mute();\n        }, AnimationItem.prototype.unmute = function(t1) {\n            t1 && this.name !== t1 || this.audioController.unmute();\n        }, AnimationItem.prototype.updaFrameModifier = function() {\n            this.frameModifier = this.frameMult * this.playSpeed * this.playDirection, this.audioController.setRate(this.playSpeed * this.playDirection);\n        }, AnimationItem.prototype.getPath = function() {\n            return this.path;\n        }, AnimationItem.prototype.getAssetsPath = function(t1) {\n            var e1 = \"\";\n            if (t1.e) e1 = t1.p;\n            else if (this.assetsPath) {\n                var r1 = t1.p;\n                -1 !== r1.indexOf(\"images/\") && (r1 = r1.split(\"/\")[1]), e1 = this.assetsPath + r1;\n            } else e1 = this.path, e1 += t1.u ? t1.u : \"\", e1 += t1.p;\n            return e1;\n        }, AnimationItem.prototype.getAssetData = function(t1) {\n            for(var e1 = 0, r1 = this.assets.length; e1 < r1;){\n                if (t1 === this.assets[e1].id) return this.assets[e1];\n                e1 += 1;\n            }\n            return null;\n        }, AnimationItem.prototype.hide = function() {\n            this.renderer.hide();\n        }, AnimationItem.prototype.show = function() {\n            this.renderer.show();\n        }, AnimationItem.prototype.getDuration = function(t1) {\n            return t1 ? this.totalFrames : this.totalFrames / this.frameRate;\n        }, AnimationItem.prototype.updateDocumentData = function(t1, e1, r1) {\n            try {\n                this.renderer.getElementByPath(t1).updateDocumentData(e1, r1);\n            } catch (t1) {}\n        }, AnimationItem.prototype.trigger = function(t1) {\n            if (this._cbs && this._cbs[t1]) switch(t1){\n                case \"enterFrame\":\n                    this.triggerEvent(t1, new BMEnterFrameEvent(t1, this.currentFrame, this.totalFrames, this.frameModifier));\n                    break;\n                case \"drawnFrame\":\n                    this.drawnFrameEvent.currentTime = this.currentFrame, this.drawnFrameEvent.totalTime = this.totalFrames, this.drawnFrameEvent.direction = this.frameModifier, this.triggerEvent(t1, this.drawnFrameEvent);\n                    break;\n                case \"loopComplete\":\n                    this.triggerEvent(t1, new BMCompleteLoopEvent(t1, this.loop, this.playCount, this.frameMult));\n                    break;\n                case \"complete\":\n                    this.triggerEvent(t1, new BMCompleteEvent(t1, this.frameMult));\n                    break;\n                case \"segmentStart\":\n                    this.triggerEvent(t1, new BMSegmentStartEvent(t1, this.firstFrame, this.totalFrames));\n                    break;\n                case \"destroy\":\n                    this.triggerEvent(t1, new BMDestroyEvent(t1, this));\n                    break;\n                default:\n                    this.triggerEvent(t1);\n            }\n            \"enterFrame\" === t1 && this.onEnterFrame && this.onEnterFrame.call(this, new BMEnterFrameEvent(t1, this.currentFrame, this.totalFrames, this.frameMult)), \"loopComplete\" === t1 && this.onLoopComplete && this.onLoopComplete.call(this, new BMCompleteLoopEvent(t1, this.loop, this.playCount, this.frameMult)), \"complete\" === t1 && this.onComplete && this.onComplete.call(this, new BMCompleteEvent(t1, this.frameMult)), \"segmentStart\" === t1 && this.onSegmentStart && this.onSegmentStart.call(this, new BMSegmentStartEvent(t1, this.firstFrame, this.totalFrames)), \"destroy\" === t1 && this.onDestroy && this.onDestroy.call(this, new BMDestroyEvent(t1, this));\n        }, AnimationItem.prototype.triggerRenderFrameError = function(t1) {\n            var e1 = new BMRenderFrameErrorEvent(t1, this.currentFrame);\n            this.triggerEvent(\"error\", e1), this.onError && this.onError.call(this, e1);\n        }, AnimationItem.prototype.triggerConfigError = function(t1) {\n            var e1 = new BMConfigErrorEvent(t1, this.currentFrame);\n            this.triggerEvent(\"error\", e1), this.onError && this.onError.call(this, e1);\n        };\n        var animationManager = function() {\n            var t1 = {}, e1 = [], r1 = 0, i1 = 0, s1 = 0, a1 = !0, n1 = !1;\n            function o1(t1) {\n                for(var r1 = 0, s1 = t1.target; r1 < i1;)e1[r1].animation === s1 && (e1.splice(r1, 1), r1 -= 1, i1 -= 1, s1.isPaused || p1()), r1 += 1;\n            }\n            function h1(t1, r1) {\n                if (!t1) return null;\n                for(var s1 = 0; s1 < i1;){\n                    if (e1[s1].elem === t1 && null !== e1[s1].elem) return e1[s1].animation;\n                    s1 += 1;\n                }\n                var a1 = new AnimationItem;\n                return c1(a1, t1), a1.setData(t1, r1), a1;\n            }\n            function l1() {\n                s1 += 1, d1();\n            }\n            function p1() {\n                s1 -= 1;\n            }\n            function c1(t1, r1) {\n                t1.addEventListener(\"destroy\", o1), t1.addEventListener(\"_active\", l1), t1.addEventListener(\"_idle\", p1), e1.push({\n                    elem: r1,\n                    animation: t1\n                }), i1 += 1;\n            }\n            function f1(t1) {\n                var o1, h1 = t1 - r1;\n                for(o1 = 0; o1 < i1; o1 += 1)e1[o1].animation.advanceTime(h1);\n                r1 = t1, s1 && !n1 ? window.requestAnimationFrame(f1) : a1 = !0;\n            }\n            function u1(t1) {\n                r1 = t1, window.requestAnimationFrame(f1);\n            }\n            function d1() {\n                !n1 && s1 && a1 && (window.requestAnimationFrame(u1), a1 = !1);\n            }\n            return t1.registerAnimation = h1, t1.loadAnimation = function(t1) {\n                var e1 = new AnimationItem;\n                return c1(e1, null), e1.setParams(t1), e1;\n            }, t1.setSpeed = function(t1, r1) {\n                var s1;\n                for(s1 = 0; s1 < i1; s1 += 1)e1[s1].animation.setSpeed(t1, r1);\n            }, t1.setDirection = function(t1, r1) {\n                var s1;\n                for(s1 = 0; s1 < i1; s1 += 1)e1[s1].animation.setDirection(t1, r1);\n            }, t1.play = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.play(t1);\n            }, t1.pause = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.pause(t1);\n            }, t1.stop = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.stop(t1);\n            }, t1.togglePause = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.togglePause(t1);\n            }, t1.searchAnimations = function(t1, e1, r1) {\n                var i1, s1 = [].concat([].slice.call(document.getElementsByClassName(\"lottie\")), [].slice.call(document.getElementsByClassName(\"bodymovin\"))), a1 = s1.length;\n                for(i1 = 0; i1 < a1; i1 += 1)r1 && s1[i1].setAttribute(\"data-bm-type\", r1), h1(s1[i1], t1);\n                if (e1 && 0 === a1) {\n                    r1 || (r1 = \"svg\");\n                    var n1 = document.getElementsByTagName(\"body\")[0];\n                    n1.innerText = \"\";\n                    var o1 = createTag(\"div\");\n                    o1.style.width = \"100%\", o1.style.height = \"100%\", o1.setAttribute(\"data-bm-type\", r1), n1.appendChild(o1), h1(o1, t1);\n                }\n            }, t1.resize = function() {\n                var t1;\n                for(t1 = 0; t1 < i1; t1 += 1)e1[t1].animation.resize();\n            }, t1.goToAndStop = function(t1, r1, s1) {\n                var a1;\n                for(a1 = 0; a1 < i1; a1 += 1)e1[a1].animation.goToAndStop(t1, r1, s1);\n            }, t1.destroy = function(t1) {\n                var r1;\n                for(r1 = i1 - 1; r1 >= 0; r1 -= 1)e1[r1].animation.destroy(t1);\n            }, t1.freeze = function() {\n                n1 = !0;\n            }, t1.unfreeze = function() {\n                n1 = !1, d1();\n            }, t1.setVolume = function(t1, r1) {\n                var s1;\n                for(s1 = 0; s1 < i1; s1 += 1)e1[s1].animation.setVolume(t1, r1);\n            }, t1.mute = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.mute(t1);\n            }, t1.unmute = function(t1) {\n                var r1;\n                for(r1 = 0; r1 < i1; r1 += 1)e1[r1].animation.unmute(t1);\n            }, t1.getRegisteredAnimations = function() {\n                var t1, r1 = e1.length, i1 = [];\n                for(t1 = 0; t1 < r1; t1 += 1)i1.push(e1[t1].animation);\n                return i1;\n            }, t1;\n        }(), BezierFactory = function() {\n            var t1 = {\n                getBezierEasing: function(t1, r1, i1, s1, a1) {\n                    var n1 = a1 || (\"bez_\" + t1 + \"_\" + r1 + \"_\" + i1 + \"_\" + s1).replace(/\\./g, \"p\");\n                    if (e1[n1]) return e1[n1];\n                    var o1 = new l1([\n                        t1,\n                        r1,\n                        i1,\n                        s1\n                    ]);\n                    return e1[n1] = o1, o1;\n                }\n            }, e1 = {}, r1 = .1, i1 = \"function\" == typeof Float32Array;\n            function s1(t1, e1) {\n                return 1 - 3 * e1 + 3 * t1;\n            }\n            function a1(t1, e1) {\n                return 3 * e1 - 6 * t1;\n            }\n            function n1(t1) {\n                return 3 * t1;\n            }\n            function o1(t1, e1, r1) {\n                return ((s1(e1, r1) * t1 + a1(e1, r1)) * t1 + n1(e1)) * t1;\n            }\n            function h1(t1, e1, r1) {\n                return 3 * s1(e1, r1) * t1 * t1 + 2 * a1(e1, r1) * t1 + n1(e1);\n            }\n            function l1(t1) {\n                this._p = t1, this._mSampleValues = i1 ? new Float32Array(11) : new Array(11), this._precomputed = !1, this.get = this.get.bind(this);\n            }\n            return l1.prototype = {\n                get: function(t1) {\n                    var e1 = this._p[0], r1 = this._p[1], i1 = this._p[2], s1 = this._p[3];\n                    return this._precomputed || this._precompute(), e1 === r1 && i1 === s1 ? t1 : 0 === t1 ? 0 : 1 === t1 ? 1 : o1(this._getTForX(t1), r1, s1);\n                },\n                _precompute: function() {\n                    var t1 = this._p[0], e1 = this._p[1], r1 = this._p[2], i1 = this._p[3];\n                    this._precomputed = !0, t1 === e1 && r1 === i1 || this._calcSampleValues();\n                },\n                _calcSampleValues: function() {\n                    for(var t1 = this._p[0], e1 = this._p[2], i1 = 0; i1 < 11; ++i1)this._mSampleValues[i1] = o1(i1 * r1, t1, e1);\n                },\n                _getTForX: function(t1) {\n                    for(var e1 = this._p[0], i1 = this._p[2], s1 = this._mSampleValues, a1 = 0, n1 = 1; 10 !== n1 && s1[n1] <= t1; ++n1)a1 += r1;\n                    var l1 = a1 + (t1 - s1[--n1]) / (s1[n1 + 1] - s1[n1]) * r1, p1 = h1(l1, e1, i1);\n                    return p1 >= .001 ? function(t1, e1, r1, i1) {\n                        for(var s1 = 0; s1 < 4; ++s1){\n                            var a1 = h1(e1, r1, i1);\n                            if (0 === a1) return e1;\n                            e1 -= (o1(e1, r1, i1) - t1) / a1;\n                        }\n                        return e1;\n                    }(t1, l1, e1, i1) : 0 === p1 ? l1 : function(t1, e1, r1, i1, s1) {\n                        var a1, n1, h1 = 0;\n                        do {\n                            (a1 = o1(n1 = e1 + (r1 - e1) / 2, i1, s1) - t1) > 0 ? r1 = n1 : e1 = n1;\n                        }while (Math.abs(a1) > 1e-7 && ++h1 < 10);\n                        return n1;\n                    }(t1, a1, a1 + r1, e1, i1);\n                }\n            }, t1;\n        }(), pooling = {\n            double: function(t1) {\n                return t1.concat(createSizedArray(t1.length));\n            }\n        }, poolFactory = function(t1, e1, r1) {\n            var i1 = 0, s1 = t1, a1 = createSizedArray(s1);\n            return {\n                newElement: function() {\n                    return i1 ? a1[i1 -= 1] : e1();\n                },\n                release: function(t1) {\n                    i1 === s1 && (a1 = pooling.double(a1), s1 *= 2), r1 && r1(t1), a1[i1] = t1, i1 += 1;\n                }\n            };\n        }, bezierLengthPool = poolFactory(8, function() {\n            return {\n                addedLength: 0,\n                percents: createTypedArray(\"float32\", getDefaultCurveSegments()),\n                lengths: createTypedArray(\"float32\", getDefaultCurveSegments())\n            };\n        }), segmentsLengthPool = poolFactory(8, function() {\n            return {\n                lengths: [],\n                totalLength: 0\n            };\n        }, function(t1) {\n            var e1, r1 = t1.lengths.length;\n            for(e1 = 0; e1 < r1; e1 += 1)bezierLengthPool.release(t1.lengths[e1]);\n            t1.lengths.length = 0;\n        });\n        function bezFunction() {\n            var t1 = Math;\n            function e1(t1, e1, r1, i1, s1, a1) {\n                var n1 = t1 * i1 + e1 * s1 + r1 * a1 - s1 * i1 - a1 * t1 - r1 * e1;\n                return n1 > -.001 && n1 < .001;\n            }\n            var r1 = function(t1, e1, r1, i1) {\n                var s1, a1, n1, o1, h1, l1, p1 = getDefaultCurveSegments(), c1 = 0, f1 = [], u1 = [], d1 = bezierLengthPool.newElement();\n                for(n1 = r1.length, s1 = 0; s1 < p1; s1 += 1){\n                    for(h1 = s1 / (p1 - 1), l1 = 0, a1 = 0; a1 < n1; a1 += 1)o1 = bmPow(1 - h1, 3) * t1[a1] + 3 * bmPow(1 - h1, 2) * h1 * r1[a1] + 3 * (1 - h1) * bmPow(h1, 2) * i1[a1] + bmPow(h1, 3) * e1[a1], f1[a1] = o1, null !== u1[a1] && (l1 += bmPow(f1[a1] - u1[a1], 2)), u1[a1] = f1[a1];\n                    l1 && (c1 += l1 = bmSqrt(l1)), d1.percents[s1] = h1, d1.lengths[s1] = c1;\n                }\n                return d1.addedLength = c1, d1;\n            };\n            function i1(t1) {\n                this.segmentLength = 0, this.points = new Array(t1);\n            }\n            function s1(t1, e1) {\n                this.partialLength = t1, this.point = e1;\n            }\n            var a1, n1 = (a1 = {}, function(t1, r1, n1, o1) {\n                var h1 = (t1[0] + \"_\" + t1[1] + \"_\" + r1[0] + \"_\" + r1[1] + \"_\" + n1[0] + \"_\" + n1[1] + \"_\" + o1[0] + \"_\" + o1[1]).replace(/\\./g, \"p\");\n                if (!a1[h1]) {\n                    var l1, p1, c1, f1, u1, d1, m1, y1 = getDefaultCurveSegments(), g1 = 0, v1 = null;\n                    2 === t1.length && (t1[0] !== r1[0] || t1[1] !== r1[1]) && e1(t1[0], t1[1], r1[0], r1[1], t1[0] + n1[0], t1[1] + n1[1]) && e1(t1[0], t1[1], r1[0], r1[1], r1[0] + o1[0], r1[1] + o1[1]) && (y1 = 2);\n                    var b1 = new i1(y1);\n                    for(c1 = n1.length, l1 = 0; l1 < y1; l1 += 1){\n                        for(m1 = createSizedArray(c1), u1 = l1 / (y1 - 1), d1 = 0, p1 = 0; p1 < c1; p1 += 1)f1 = bmPow(1 - u1, 3) * t1[p1] + 3 * bmPow(1 - u1, 2) * u1 * (t1[p1] + n1[p1]) + 3 * (1 - u1) * bmPow(u1, 2) * (r1[p1] + o1[p1]) + bmPow(u1, 3) * r1[p1], m1[p1] = f1, null !== v1 && (d1 += bmPow(m1[p1] - v1[p1], 2));\n                        g1 += d1 = bmSqrt(d1), b1.points[l1] = new s1(d1, m1), v1 = m1;\n                    }\n                    b1.segmentLength = g1, a1[h1] = b1;\n                }\n                return a1[h1];\n            });\n            function o1(t1, e1) {\n                var r1 = e1.percents, i1 = e1.lengths, s1 = r1.length, a1 = bmFloor((s1 - 1) * t1), n1 = t1 * e1.addedLength, o1 = 0;\n                if (a1 === s1 - 1 || 0 === a1 || n1 === i1[a1]) return r1[a1];\n                for(var h1 = i1[a1] > n1 ? -1 : 1, l1 = !0; l1;)if (i1[a1] <= n1 && i1[a1 + 1] > n1 ? (o1 = (n1 - i1[a1]) / (i1[a1 + 1] - i1[a1]), l1 = !1) : a1 += h1, a1 < 0 || a1 >= s1 - 1) {\n                    if (a1 === s1 - 1) return r1[a1];\n                    l1 = !1;\n                }\n                return r1[a1] + (r1[a1 + 1] - r1[a1]) * o1;\n            }\n            var h1 = createTypedArray(\"float32\", 8);\n            return {\n                getSegmentsLength: function(t1) {\n                    var e1, i1 = segmentsLengthPool.newElement(), s1 = t1.c, a1 = t1.v, n1 = t1.o, o1 = t1.i, h1 = t1._length, l1 = i1.lengths, p1 = 0;\n                    for(e1 = 0; e1 < h1 - 1; e1 += 1)l1[e1] = r1(a1[e1], a1[e1 + 1], n1[e1], o1[e1 + 1]), p1 += l1[e1].addedLength;\n                    return s1 && h1 && (l1[e1] = r1(a1[e1], a1[0], n1[e1], o1[0]), p1 += l1[e1].addedLength), i1.totalLength = p1, i1;\n                },\n                getNewSegment: function(e1, r1, i1, s1, a1, n1, l1) {\n                    a1 < 0 ? a1 = 0 : a1 > 1 && (a1 = 1);\n                    var p1, c1 = o1(a1, l1), f1 = o1(n1 = n1 > 1 ? 1 : n1, l1), u1 = e1.length, d1 = 1 - c1, m1 = 1 - f1, y1 = d1 * d1 * d1, g1 = c1 * d1 * d1 * 3, v1 = c1 * c1 * d1 * 3, b1 = c1 * c1 * c1, _1 = d1 * d1 * m1, P1 = c1 * d1 * m1 + d1 * c1 * m1 + d1 * d1 * f1, S1 = c1 * c1 * m1 + d1 * c1 * f1 + c1 * d1 * f1, E1 = c1 * c1 * f1, x1 = d1 * m1 * m1, C1 = c1 * m1 * m1 + d1 * f1 * m1 + d1 * m1 * f1, A1 = c1 * f1 * m1 + d1 * f1 * f1 + c1 * m1 * f1, w1 = c1 * f1 * f1, k1 = m1 * m1 * m1, T1 = f1 * m1 * m1 + m1 * f1 * m1 + m1 * m1 * f1, M1 = f1 * f1 * m1 + m1 * f1 * f1 + f1 * m1 * f1, D1 = f1 * f1 * f1;\n                    for(p1 = 0; p1 < u1; p1 += 1)h1[4 * p1] = t1.round(1e3 * (y1 * e1[p1] + g1 * i1[p1] + v1 * s1[p1] + b1 * r1[p1])) / 1e3, h1[4 * p1 + 1] = t1.round(1e3 * (_1 * e1[p1] + P1 * i1[p1] + S1 * s1[p1] + E1 * r1[p1])) / 1e3, h1[4 * p1 + 2] = t1.round(1e3 * (x1 * e1[p1] + C1 * i1[p1] + A1 * s1[p1] + w1 * r1[p1])) / 1e3, h1[4 * p1 + 3] = t1.round(1e3 * (k1 * e1[p1] + T1 * i1[p1] + M1 * s1[p1] + D1 * r1[p1])) / 1e3;\n                    return h1;\n                },\n                getPointInSegment: function(e1, r1, i1, s1, a1, n1) {\n                    var h1 = o1(a1, n1), l1 = 1 - h1;\n                    return [\n                        t1.round(1e3 * (l1 * l1 * l1 * e1[0] + (h1 * l1 * l1 + l1 * h1 * l1 + l1 * l1 * h1) * i1[0] + (h1 * h1 * l1 + l1 * h1 * h1 + h1 * l1 * h1) * s1[0] + h1 * h1 * h1 * r1[0])) / 1e3,\n                        t1.round(1e3 * (l1 * l1 * l1 * e1[1] + (h1 * l1 * l1 + l1 * h1 * l1 + l1 * l1 * h1) * i1[1] + (h1 * h1 * l1 + l1 * h1 * h1 + h1 * l1 * h1) * s1[1] + h1 * h1 * h1 * r1[1])) / 1e3\n                    ];\n                },\n                buildBezierData: n1,\n                pointOnLine2D: e1,\n                pointOnLine3D: function(r1, i1, s1, a1, n1, o1, h1, l1, p1) {\n                    if (0 === s1 && 0 === o1 && 0 === p1) return e1(r1, i1, a1, n1, h1, l1);\n                    var c1, f1 = t1.sqrt(t1.pow(a1 - r1, 2) + t1.pow(n1 - i1, 2) + t1.pow(o1 - s1, 2)), u1 = t1.sqrt(t1.pow(h1 - r1, 2) + t1.pow(l1 - i1, 2) + t1.pow(p1 - s1, 2)), d1 = t1.sqrt(t1.pow(h1 - a1, 2) + t1.pow(l1 - n1, 2) + t1.pow(p1 - o1, 2));\n                    return (c1 = f1 > u1 ? f1 > d1 ? f1 - u1 - d1 : d1 - u1 - f1 : d1 > u1 ? d1 - u1 - f1 : u1 - f1 - d1) > -1e-4 && c1 < 1e-4;\n                }\n            };\n        }\n        var bez = bezFunction(), initFrame = initialDefaultFrame, mathAbs = Math.abs;\n        function interpolateValue(t1, e1) {\n            var r1, i1 = this.offsetTime;\n            \"multidimensional\" === this.propType && (r1 = createTypedArray(\"float32\", this.pv.length));\n            for(var s1, a1, n1, o1, h1, l1, p1, c1, f1, u1 = e1.lastIndex, d1 = u1, m1 = this.keyframes.length - 1, y1 = !0; y1;){\n                if (s1 = this.keyframes[d1], a1 = this.keyframes[d1 + 1], d1 === m1 - 1 && t1 >= a1.t - i1) {\n                    s1.h && (s1 = a1), u1 = 0;\n                    break;\n                }\n                if (a1.t - i1 > t1) {\n                    u1 = d1;\n                    break;\n                }\n                d1 < m1 - 1 ? d1 += 1 : (u1 = 0, y1 = !1);\n            }\n            n1 = this.keyframesMetadata[d1] || {};\n            var g1, v1 = a1.t - i1, b1 = s1.t - i1;\n            if (s1.to) {\n                n1.bezierData || (n1.bezierData = bez.buildBezierData(s1.s, a1.s || s1.e, s1.to, s1.ti));\n                var _1 = n1.bezierData;\n                if (t1 >= v1 || t1 < b1) {\n                    var P1 = t1 >= v1 ? _1.points.length - 1 : 0;\n                    for(h1 = _1.points[P1].point.length, o1 = 0; o1 < h1; o1 += 1)r1[o1] = _1.points[P1].point[o1];\n                } else {\n                    n1.__fnct ? f1 = n1.__fnct : (f1 = BezierFactory.getBezierEasing(s1.o.x, s1.o.y, s1.i.x, s1.i.y, s1.n).get, n1.__fnct = f1), l1 = f1((t1 - b1) / (v1 - b1));\n                    var S1, E1 = _1.segmentLength * l1, x1 = e1.lastFrame < t1 && e1._lastKeyframeIndex === d1 ? e1._lastAddedLength : 0;\n                    for(c1 = e1.lastFrame < t1 && e1._lastKeyframeIndex === d1 ? e1._lastPoint : 0, y1 = !0, p1 = _1.points.length; y1;){\n                        if (x1 += _1.points[c1].partialLength, 0 === E1 || 0 === l1 || c1 === _1.points.length - 1) {\n                            for(h1 = _1.points[c1].point.length, o1 = 0; o1 < h1; o1 += 1)r1[o1] = _1.points[c1].point[o1];\n                            break;\n                        }\n                        if (E1 >= x1 && E1 < x1 + _1.points[c1 + 1].partialLength) {\n                            for(S1 = (E1 - x1) / _1.points[c1 + 1].partialLength, h1 = _1.points[c1].point.length, o1 = 0; o1 < h1; o1 += 1)r1[o1] = _1.points[c1].point[o1] + (_1.points[c1 + 1].point[o1] - _1.points[c1].point[o1]) * S1;\n                            break;\n                        }\n                        c1 < p1 - 1 ? c1 += 1 : y1 = !1;\n                    }\n                    e1._lastPoint = c1, e1._lastAddedLength = x1 - _1.points[c1].partialLength, e1._lastKeyframeIndex = d1;\n                }\n            } else {\n                var C1, A1, w1, k1, T1;\n                if (m1 = s1.s.length, g1 = a1.s || s1.e, this.sh && 1 !== s1.h) t1 >= v1 ? (r1[0] = g1[0], r1[1] = g1[1], r1[2] = g1[2]) : t1 <= b1 ? (r1[0] = s1.s[0], r1[1] = s1.s[1], r1[2] = s1.s[2]) : quaternionToEuler(r1, slerp(createQuaternion(s1.s), createQuaternion(g1), (t1 - b1) / (v1 - b1)));\n                else for(d1 = 0; d1 < m1; d1 += 1)1 !== s1.h && (t1 >= v1 ? l1 = 1 : t1 < b1 ? l1 = 0 : (s1.o.x.constructor === Array ? (n1.__fnct || (n1.__fnct = []), n1.__fnct[d1] ? f1 = n1.__fnct[d1] : (C1 = void 0 === s1.o.x[d1] ? s1.o.x[0] : s1.o.x[d1], A1 = void 0 === s1.o.y[d1] ? s1.o.y[0] : s1.o.y[d1], w1 = void 0 === s1.i.x[d1] ? s1.i.x[0] : s1.i.x[d1], k1 = void 0 === s1.i.y[d1] ? s1.i.y[0] : s1.i.y[d1], f1 = BezierFactory.getBezierEasing(C1, A1, w1, k1).get, n1.__fnct[d1] = f1)) : n1.__fnct ? f1 = n1.__fnct : (C1 = s1.o.x, A1 = s1.o.y, w1 = s1.i.x, k1 = s1.i.y, f1 = BezierFactory.getBezierEasing(C1, A1, w1, k1).get, s1.keyframeMetadata = f1), l1 = f1((t1 - b1) / (v1 - b1)))), g1 = a1.s || s1.e, T1 = 1 === s1.h ? s1.s[d1] : s1.s[d1] + (g1[d1] - s1.s[d1]) * l1, \"multidimensional\" === this.propType ? r1[d1] = T1 : r1 = T1;\n            }\n            return e1.lastIndex = u1, r1;\n        }\n        function slerp(t1, e1, r1) {\n            var i1, s1, a1, n1, o1, h1 = [], l1 = t1[0], p1 = t1[1], c1 = t1[2], f1 = t1[3], u1 = e1[0], d1 = e1[1], m1 = e1[2], y1 = e1[3];\n            return (s1 = l1 * u1 + p1 * d1 + c1 * m1 + f1 * y1) < 0 && (s1 = -s1, u1 = -u1, d1 = -d1, m1 = -m1, y1 = -y1), 1 - s1 > 1e-6 ? (i1 = Math.acos(s1), a1 = Math.sin(i1), n1 = Math.sin((1 - r1) * i1) / a1, o1 = Math.sin(r1 * i1) / a1) : (n1 = 1 - r1, o1 = r1), h1[0] = n1 * l1 + o1 * u1, h1[1] = n1 * p1 + o1 * d1, h1[2] = n1 * c1 + o1 * m1, h1[3] = n1 * f1 + o1 * y1, h1;\n        }\n        function quaternionToEuler(t1, e1) {\n            var r1 = e1[0], i1 = e1[1], s1 = e1[2], a1 = e1[3], n1 = Math.atan2(2 * i1 * a1 - 2 * r1 * s1, 1 - 2 * i1 * i1 - 2 * s1 * s1), o1 = Math.asin(2 * r1 * i1 + 2 * s1 * a1), h1 = Math.atan2(2 * r1 * a1 - 2 * i1 * s1, 1 - 2 * r1 * r1 - 2 * s1 * s1);\n            t1[0] = n1 / degToRads, t1[1] = o1 / degToRads, t1[2] = h1 / degToRads;\n        }\n        function createQuaternion(t1) {\n            var e1 = t1[0] * degToRads, r1 = t1[1] * degToRads, i1 = t1[2] * degToRads, s1 = Math.cos(e1 / 2), a1 = Math.cos(r1 / 2), n1 = Math.cos(i1 / 2), o1 = Math.sin(e1 / 2), h1 = Math.sin(r1 / 2), l1 = Math.sin(i1 / 2);\n            return [\n                o1 * h1 * n1 + s1 * a1 * l1,\n                o1 * a1 * n1 + s1 * h1 * l1,\n                s1 * h1 * n1 - o1 * a1 * l1,\n                s1 * a1 * n1 - o1 * h1 * l1\n            ];\n        }\n        function getValueAtCurrentTime() {\n            var t1 = this.comp.renderedFrame - this.offsetTime, e1 = this.keyframes[0].t - this.offsetTime, r1 = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n            if (!(t1 === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= r1 && t1 >= r1 || this._caching.lastFrame < e1 && t1 < e1))) {\n                this._caching.lastFrame >= t1 && (this._caching._lastKeyframeIndex = -1, this._caching.lastIndex = 0);\n                var i1 = this.interpolateValue(t1, this._caching);\n                this.pv = i1;\n            }\n            return this._caching.lastFrame = t1, this.pv;\n        }\n        function setVValue(t1) {\n            var e1;\n            if (\"unidimensional\" === this.propType) e1 = t1 * this.mult, mathAbs(this.v - e1) > 1e-5 && (this.v = e1, this._mdf = !0);\n            else for(var r1 = 0, i1 = this.v.length; r1 < i1;)e1 = t1[r1] * this.mult, mathAbs(this.v[r1] - e1) > 1e-5 && (this.v[r1] = e1, this._mdf = !0), r1 += 1;\n        }\n        function processEffectsSequence() {\n            if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length) if (this.lock) this.setVValue(this.pv);\n            else {\n                var t1;\n                this.lock = !0, this._mdf = this._isFirstFrame;\n                var e1 = this.effectsSequence.length, r1 = this.kf ? this.pv : this.data.k;\n                for(t1 = 0; t1 < e1; t1 += 1)r1 = this.effectsSequence[t1](r1);\n                this.setVValue(r1), this._isFirstFrame = !1, this.lock = !1, this.frameId = this.elem.globalData.frameId;\n            }\n        }\n        function addEffect(t1) {\n            this.effectsSequence.push(t1), this.container.addDynamicProperty(this);\n        }\n        function ValueProperty(t1, e1, r1, i1) {\n            this.propType = \"unidimensional\", this.mult = r1 || 1, this.data = e1, this.v = r1 ? e1.k * r1 : e1.k, this.pv = e1.k, this._mdf = !1, this.elem = t1, this.container = i1, this.comp = t1.comp, this.k = !1, this.kf = !1, this.vel = 0, this.effectsSequence = [], this._isFirstFrame = !0, this.getValue = processEffectsSequence, this.setVValue = setVValue, this.addEffect = addEffect;\n        }\n        function MultiDimensionalProperty(t1, e1, r1, i1) {\n            var s1;\n            this.propType = \"multidimensional\", this.mult = r1 || 1, this.data = e1, this._mdf = !1, this.elem = t1, this.container = i1, this.comp = t1.comp, this.k = !1, this.kf = !1, this.frameId = -1;\n            var a1 = e1.k.length;\n            for(this.v = createTypedArray(\"float32\", a1), this.pv = createTypedArray(\"float32\", a1), this.vel = createTypedArray(\"float32\", a1), s1 = 0; s1 < a1; s1 += 1)this.v[s1] = e1.k[s1] * this.mult, this.pv[s1] = e1.k[s1];\n            this._isFirstFrame = !0, this.effectsSequence = [], this.getValue = processEffectsSequence, this.setVValue = setVValue, this.addEffect = addEffect;\n        }\n        function KeyframedValueProperty(t1, e1, r1, i1) {\n            this.propType = \"unidimensional\", this.keyframes = e1.k, this.keyframesMetadata = [], this.offsetTime = t1.data.st, this.frameId = -1, this._caching = {\n                lastFrame: initFrame,\n                lastIndex: 0,\n                value: 0,\n                _lastKeyframeIndex: -1\n            }, this.k = !0, this.kf = !0, this.data = e1, this.mult = r1 || 1, this.elem = t1, this.container = i1, this.comp = t1.comp, this.v = initFrame, this.pv = initFrame, this._isFirstFrame = !0, this.getValue = processEffectsSequence, this.setVValue = setVValue, this.interpolateValue = interpolateValue, this.effectsSequence = [\n                getValueAtCurrentTime.bind(this)\n            ], this.addEffect = addEffect;\n        }\n        function KeyframedMultidimensionalProperty(t1, e1, r1, i1) {\n            var s1;\n            this.propType = \"multidimensional\";\n            var a1, n1, o1, h1, l1 = e1.k.length;\n            for(s1 = 0; s1 < l1 - 1; s1 += 1)e1.k[s1].to && e1.k[s1].s && e1.k[s1 + 1] && e1.k[s1 + 1].s && (a1 = e1.k[s1].s, n1 = e1.k[s1 + 1].s, o1 = e1.k[s1].to, h1 = e1.k[s1].ti, (2 === a1.length && (a1[0] !== n1[0] || a1[1] !== n1[1]) && bez.pointOnLine2D(a1[0], a1[1], n1[0], n1[1], a1[0] + o1[0], a1[1] + o1[1]) && bez.pointOnLine2D(a1[0], a1[1], n1[0], n1[1], n1[0] + h1[0], n1[1] + h1[1]) || 3 === a1.length && (a1[0] !== n1[0] || a1[1] !== n1[1] || a1[2] !== n1[2]) && bez.pointOnLine3D(a1[0], a1[1], a1[2], n1[0], n1[1], n1[2], a1[0] + o1[0], a1[1] + o1[1], a1[2] + o1[2]) && bez.pointOnLine3D(a1[0], a1[1], a1[2], n1[0], n1[1], n1[2], n1[0] + h1[0], n1[1] + h1[1], n1[2] + h1[2])) && (e1.k[s1].to = null, e1.k[s1].ti = null), a1[0] === n1[0] && a1[1] === n1[1] && 0 === o1[0] && 0 === o1[1] && 0 === h1[0] && 0 === h1[1] && (2 === a1.length || a1[2] === n1[2] && 0 === o1[2] && 0 === h1[2]) && (e1.k[s1].to = null, e1.k[s1].ti = null));\n            this.effectsSequence = [\n                getValueAtCurrentTime.bind(this)\n            ], this.data = e1, this.keyframes = e1.k, this.keyframesMetadata = [], this.offsetTime = t1.data.st, this.k = !0, this.kf = !0, this._isFirstFrame = !0, this.mult = r1 || 1, this.elem = t1, this.container = i1, this.comp = t1.comp, this.getValue = processEffectsSequence, this.setVValue = setVValue, this.interpolateValue = interpolateValue, this.frameId = -1;\n            var p1 = e1.k[0].s.length;\n            for(this.v = createTypedArray(\"float32\", p1), this.pv = createTypedArray(\"float32\", p1), s1 = 0; s1 < p1; s1 += 1)this.v[s1] = initFrame, this.pv[s1] = initFrame;\n            this._caching = {\n                lastFrame: initFrame,\n                lastIndex: 0,\n                value: createTypedArray(\"float32\", p1)\n            }, this.addEffect = addEffect;\n        }\n        var PropertyFactory = (ob = {\n            getProp: function(t1, e1, r1, i1, s1) {\n                var a1;\n                if (e1.sid && (e1 = t1.globalData.slotManager.getProp(e1)), e1.k.length) if (\"number\" == typeof e1.k[0]) a1 = new MultiDimensionalProperty(t1, e1, i1, s1);\n                else switch(r1){\n                    case 0:\n                        a1 = new KeyframedValueProperty(t1, e1, i1, s1);\n                        break;\n                    case 1:\n                        a1 = new KeyframedMultidimensionalProperty(t1, e1, i1, s1);\n                }\n                else a1 = new ValueProperty(t1, e1, i1, s1);\n                return a1.effectsSequence.length && s1.addDynamicProperty(a1), a1;\n            }\n        }, ob), ob;\n        function DynamicPropertyContainer() {}\n        DynamicPropertyContainer.prototype = {\n            addDynamicProperty: function(t1) {\n                -1 === this.dynamicProperties.indexOf(t1) && (this.dynamicProperties.push(t1), this.container.addDynamicProperty(this), this._isAnimated = !0);\n            },\n            iterateDynamicProperties: function() {\n                var t1;\n                this._mdf = !1;\n                var e1 = this.dynamicProperties.length;\n                for(t1 = 0; t1 < e1; t1 += 1)this.dynamicProperties[t1].getValue(), this.dynamicProperties[t1]._mdf && (this._mdf = !0);\n            },\n            initDynamicPropertyContainer: function(t1) {\n                this.container = t1, this.dynamicProperties = [], this._mdf = !1, this._isAnimated = !1;\n            }\n        };\n        var pointPool = poolFactory(8, function() {\n            return createTypedArray(\"float32\", 2);\n        });\n        function ShapePath() {\n            this.c = !1, this._length = 0, this._maxLength = 8, this.v = createSizedArray(this._maxLength), this.o = createSizedArray(this._maxLength), this.i = createSizedArray(this._maxLength);\n        }\n        ShapePath.prototype.setPathData = function(t1, e1) {\n            this.c = t1, this.setLength(e1);\n            for(var r1 = 0; r1 < e1;)this.v[r1] = pointPool.newElement(), this.o[r1] = pointPool.newElement(), this.i[r1] = pointPool.newElement(), r1 += 1;\n        }, ShapePath.prototype.setLength = function(t1) {\n            for(; this._maxLength < t1;)this.doubleArrayLength();\n            this._length = t1;\n        }, ShapePath.prototype.doubleArrayLength = function() {\n            this.v = this.v.concat(createSizedArray(this._maxLength)), this.i = this.i.concat(createSizedArray(this._maxLength)), this.o = this.o.concat(createSizedArray(this._maxLength)), this._maxLength *= 2;\n        }, ShapePath.prototype.setXYAt = function(t1, e1, r1, i1, s1) {\n            var a1;\n            switch(this._length = Math.max(this._length, i1 + 1), this._length >= this._maxLength && this.doubleArrayLength(), r1){\n                case \"v\":\n                    a1 = this.v;\n                    break;\n                case \"i\":\n                    a1 = this.i;\n                    break;\n                case \"o\":\n                    a1 = this.o;\n                    break;\n                default:\n                    a1 = [];\n            }\n            (!a1[i1] || a1[i1] && !s1) && (a1[i1] = pointPool.newElement()), a1[i1][0] = t1, a1[i1][1] = e1;\n        }, ShapePath.prototype.setTripleAt = function(t1, e1, r1, i1, s1, a1, n1, o1) {\n            this.setXYAt(t1, e1, \"v\", n1, o1), this.setXYAt(r1, i1, \"o\", n1, o1), this.setXYAt(s1, a1, \"i\", n1, o1);\n        }, ShapePath.prototype.reverse = function() {\n            var t1 = new ShapePath;\n            t1.setPathData(this.c, this._length);\n            var e1 = this.v, r1 = this.o, i1 = this.i, s1 = 0;\n            this.c && (t1.setTripleAt(e1[0][0], e1[0][1], i1[0][0], i1[0][1], r1[0][0], r1[0][1], 0, !1), s1 = 1);\n            var a1, n1 = this._length - 1, o1 = this._length;\n            for(a1 = s1; a1 < o1; a1 += 1)t1.setTripleAt(e1[n1][0], e1[n1][1], i1[n1][0], i1[n1][1], r1[n1][0], r1[n1][1], a1, !1), n1 -= 1;\n            return t1;\n        }, ShapePath.prototype.length = function() {\n            return this._length;\n        };\n        var shapePool = (factory = poolFactory(4, function() {\n            return new ShapePath;\n        }, function(t1) {\n            var e1, r1 = t1._length;\n            for(e1 = 0; e1 < r1; e1 += 1)pointPool.release(t1.v[e1]), pointPool.release(t1.i[e1]), pointPool.release(t1.o[e1]), t1.v[e1] = null, t1.i[e1] = null, t1.o[e1] = null;\n            t1._length = 0, t1.c = !1;\n        }), factory.clone = function(t1) {\n            var e1, r1 = factory.newElement(), i1 = void 0 === t1._length ? t1.v.length : t1._length;\n            for(r1.setLength(i1), r1.c = t1.c, e1 = 0; e1 < i1; e1 += 1)r1.setTripleAt(t1.v[e1][0], t1.v[e1][1], t1.o[e1][0], t1.o[e1][1], t1.i[e1][0], t1.i[e1][1], e1);\n            return r1;\n        }, factory), factory;\n        function ShapeCollection() {\n            this._length = 0, this._maxLength = 4, this.shapes = createSizedArray(this._maxLength);\n        }\n        ShapeCollection.prototype.addShape = function(t1) {\n            this._length === this._maxLength && (this.shapes = this.shapes.concat(createSizedArray(this._maxLength)), this._maxLength *= 2), this.shapes[this._length] = t1, this._length += 1;\n        }, ShapeCollection.prototype.releaseShapes = function() {\n            var t1;\n            for(t1 = 0; t1 < this._length; t1 += 1)shapePool.release(this.shapes[t1]);\n            this._length = 0;\n        };\n        var shapeCollectionPool = function() {\n            var t1 = {\n                newShapeCollection: function() {\n                    return e1 ? i1[e1 -= 1] : new ShapeCollection;\n                },\n                release: function(t1) {\n                    var s1, a1 = t1._length;\n                    for(s1 = 0; s1 < a1; s1 += 1)shapePool.release(t1.shapes[s1]);\n                    t1._length = 0, e1 === r1 && (i1 = pooling.double(i1), r1 *= 2), i1[e1] = t1, e1 += 1;\n                }\n            }, e1 = 0, r1 = 4, i1 = createSizedArray(r1);\n            return t1;\n        }(), ShapePropertyFactory = function() {\n            var t1 = -999999;\n            function e1(t1, e1, r1) {\n                var i1, s1, a1, n1, o1, h1, l1, p1, c1, f1 = r1.lastIndex, u1 = this.keyframes;\n                if (t1 < u1[0].t - this.offsetTime) i1 = u1[0].s[0], a1 = !0, f1 = 0;\n                else if (t1 >= u1[u1.length - 1].t - this.offsetTime) i1 = u1[u1.length - 1].s ? u1[u1.length - 1].s[0] : u1[u1.length - 2].e[0], a1 = !0;\n                else {\n                    for(var d1, m1, y1, g1 = f1, v1 = u1.length - 1, b1 = !0; b1 && (d1 = u1[g1], !((m1 = u1[g1 + 1]).t - this.offsetTime > t1));)g1 < v1 - 1 ? g1 += 1 : b1 = !1;\n                    if (y1 = this.keyframesMetadata[g1] || {}, f1 = g1, !(a1 = 1 === d1.h)) {\n                        if (t1 >= m1.t - this.offsetTime) p1 = 1;\n                        else if (t1 < d1.t - this.offsetTime) p1 = 0;\n                        else {\n                            var _1;\n                            y1.__fnct ? _1 = y1.__fnct : (_1 = BezierFactory.getBezierEasing(d1.o.x, d1.o.y, d1.i.x, d1.i.y).get, y1.__fnct = _1), p1 = _1((t1 - (d1.t - this.offsetTime)) / (m1.t - this.offsetTime - (d1.t - this.offsetTime)));\n                        }\n                        s1 = m1.s ? m1.s[0] : d1.e[0];\n                    }\n                    i1 = d1.s[0];\n                }\n                for(h1 = e1._length, l1 = i1.i[0].length, r1.lastIndex = f1, n1 = 0; n1 < h1; n1 += 1)for(o1 = 0; o1 < l1; o1 += 1)c1 = a1 ? i1.i[n1][o1] : i1.i[n1][o1] + (s1.i[n1][o1] - i1.i[n1][o1]) * p1, e1.i[n1][o1] = c1, c1 = a1 ? i1.o[n1][o1] : i1.o[n1][o1] + (s1.o[n1][o1] - i1.o[n1][o1]) * p1, e1.o[n1][o1] = c1, c1 = a1 ? i1.v[n1][o1] : i1.v[n1][o1] + (s1.v[n1][o1] - i1.v[n1][o1]) * p1, e1.v[n1][o1] = c1;\n            }\n            function r1() {\n                var e1 = this.comp.renderedFrame - this.offsetTime, r1 = this.keyframes[0].t - this.offsetTime, i1 = this.keyframes[this.keyframes.length - 1].t - this.offsetTime, s1 = this._caching.lastFrame;\n                return s1 !== t1 && (s1 < r1 && e1 < r1 || s1 > i1 && e1 > i1) || (this._caching.lastIndex = s1 < e1 ? this._caching.lastIndex : 0, this.interpolateShape(e1, this.pv, this._caching)), this._caching.lastFrame = e1, this.pv;\n            }\n            function i1() {\n                this.paths = this.localShapeCollection;\n            }\n            function s1(t1) {\n                (function(t1, e1) {\n                    if (t1._length !== e1._length || t1.c !== e1.c) return !1;\n                    var r1, i1 = t1._length;\n                    for(r1 = 0; r1 < i1; r1 += 1)if (t1.v[r1][0] !== e1.v[r1][0] || t1.v[r1][1] !== e1.v[r1][1] || t1.o[r1][0] !== e1.o[r1][0] || t1.o[r1][1] !== e1.o[r1][1] || t1.i[r1][0] !== e1.i[r1][0] || t1.i[r1][1] !== e1.i[r1][1]) return !1;\n                    return !0;\n                })(this.v, t1) || (this.v = shapePool.clone(t1), this.localShapeCollection.releaseShapes(), this.localShapeCollection.addShape(this.v), this._mdf = !0, this.paths = this.localShapeCollection);\n            }\n            function a1() {\n                if (this.elem.globalData.frameId !== this.frameId) if (this.effectsSequence.length) if (this.lock) this.setVValue(this.pv);\n                else {\n                    var t1, e1;\n                    this.lock = !0, this._mdf = !1, t1 = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;\n                    var r1 = this.effectsSequence.length;\n                    for(e1 = 0; e1 < r1; e1 += 1)t1 = this.effectsSequence[e1](t1);\n                    this.setVValue(t1), this.lock = !1, this.frameId = this.elem.globalData.frameId;\n                }\n                else this._mdf = !1;\n            }\n            function n1(t1, e1, r1) {\n                this.propType = \"shape\", this.comp = t1.comp, this.container = t1, this.elem = t1, this.data = e1, this.k = !1, this.kf = !1, this._mdf = !1;\n                var s1 = 3 === r1 ? e1.pt.k : e1.ks.k;\n                this.v = shapePool.clone(s1), this.pv = shapePool.clone(this.v), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.reset = i1, this.effectsSequence = [];\n            }\n            function o1(t1) {\n                this.effectsSequence.push(t1), this.container.addDynamicProperty(this);\n            }\n            function h1(e1, s1, a1) {\n                this.propType = \"shape\", this.comp = e1.comp, this.elem = e1, this.container = e1, this.offsetTime = e1.data.st, this.keyframes = 3 === a1 ? s1.pt.k : s1.ks.k, this.keyframesMetadata = [], this.k = !0, this.kf = !0;\n                var n1 = this.keyframes[0].s[0].i.length;\n                this.v = shapePool.newElement(), this.v.setPathData(this.keyframes[0].s[0].c, n1), this.pv = shapePool.clone(this.v), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.lastFrame = t1, this.reset = i1, this._caching = {\n                    lastFrame: t1,\n                    lastIndex: 0\n                }, this.effectsSequence = [\n                    r1.bind(this)\n                ];\n            }\n            n1.prototype.interpolateShape = e1, n1.prototype.getValue = a1, n1.prototype.setVValue = s1, n1.prototype.addEffect = o1, h1.prototype.getValue = a1, h1.prototype.interpolateShape = e1, h1.prototype.setVValue = s1, h1.prototype.addEffect = o1;\n            var l1 = function() {\n                var t1 = roundCorner;\n                function e1(t1, e1) {\n                    this.v = shapePool.newElement(), this.v.setPathData(!0, 4), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.localShapeCollection.addShape(this.v), this.d = e1.d, this.elem = t1, this.comp = t1.comp, this.frameId = -1, this.initDynamicPropertyContainer(t1), this.p = PropertyFactory.getProp(t1, e1.p, 1, 0, this), this.s = PropertyFactory.getProp(t1, e1.s, 1, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertEllToPath());\n                }\n                return e1.prototype = {\n                    reset: i1,\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertEllToPath());\n                    },\n                    convertEllToPath: function() {\n                        var e1 = this.p.v[0], r1 = this.p.v[1], i1 = this.s.v[0] / 2, s1 = this.s.v[1] / 2, a1 = 3 !== this.d, n1 = this.v;\n                        n1.v[0][0] = e1, n1.v[0][1] = r1 - s1, n1.v[1][0] = a1 ? e1 + i1 : e1 - i1, n1.v[1][1] = r1, n1.v[2][0] = e1, n1.v[2][1] = r1 + s1, n1.v[3][0] = a1 ? e1 - i1 : e1 + i1, n1.v[3][1] = r1, n1.i[0][0] = a1 ? e1 - i1 * t1 : e1 + i1 * t1, n1.i[0][1] = r1 - s1, n1.i[1][0] = a1 ? e1 + i1 : e1 - i1, n1.i[1][1] = r1 - s1 * t1, n1.i[2][0] = a1 ? e1 + i1 * t1 : e1 - i1 * t1, n1.i[2][1] = r1 + s1, n1.i[3][0] = a1 ? e1 - i1 : e1 + i1, n1.i[3][1] = r1 + s1 * t1, n1.o[0][0] = a1 ? e1 + i1 * t1 : e1 - i1 * t1, n1.o[0][1] = r1 - s1, n1.o[1][0] = a1 ? e1 + i1 : e1 - i1, n1.o[1][1] = r1 + s1 * t1, n1.o[2][0] = a1 ? e1 - i1 * t1 : e1 + i1 * t1, n1.o[2][1] = r1 + s1, n1.o[3][0] = a1 ? e1 - i1 : e1 + i1, n1.o[3][1] = r1 - s1 * t1;\n                    }\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], e1), e1;\n            }(), p1 = function() {\n                function t1(t1, e1) {\n                    this.v = shapePool.newElement(), this.v.setPathData(!0, 0), this.elem = t1, this.comp = t1.comp, this.data = e1, this.frameId = -1, this.d = e1.d, this.initDynamicPropertyContainer(t1), 1 === e1.sy ? (this.ir = PropertyFactory.getProp(t1, e1.ir, 0, 0, this), this.is = PropertyFactory.getProp(t1, e1.is, 0, .01, this), this.convertToPath = this.convertStarToPath) : this.convertToPath = this.convertPolygonToPath, this.pt = PropertyFactory.getProp(t1, e1.pt, 0, 0, this), this.p = PropertyFactory.getProp(t1, e1.p, 1, 0, this), this.r = PropertyFactory.getProp(t1, e1.r, 0, degToRads, this), this.or = PropertyFactory.getProp(t1, e1.or, 0, 0, this), this.os = PropertyFactory.getProp(t1, e1.os, 0, .01, this), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertToPath());\n                }\n                return t1.prototype = {\n                    reset: i1,\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertToPath());\n                    },\n                    convertStarToPath: function() {\n                        var t1, e1, r1, i1, s1 = 2 * Math.floor(this.pt.v), a1 = 2 * Math.PI / s1, n1 = !0, o1 = this.or.v, h1 = this.ir.v, l1 = this.os.v, p1 = this.is.v, c1 = 2 * Math.PI * o1 / (2 * s1), f1 = 2 * Math.PI * h1 / (2 * s1), u1 = -Math.PI / 2;\n                        u1 += this.r.v;\n                        var d1 = 3 === this.data.d ? -1 : 1;\n                        for(this.v._length = 0, t1 = 0; t1 < s1; t1 += 1){\n                            r1 = n1 ? l1 : p1, i1 = n1 ? c1 : f1;\n                            var m1 = (e1 = n1 ? o1 : h1) * Math.cos(u1), y1 = e1 * Math.sin(u1), g1 = 0 === m1 && 0 === y1 ? 0 : y1 / Math.sqrt(m1 * m1 + y1 * y1), v1 = 0 === m1 && 0 === y1 ? 0 : -m1 / Math.sqrt(m1 * m1 + y1 * y1);\n                            m1 += +this.p.v[0], y1 += +this.p.v[1], this.v.setTripleAt(m1, y1, m1 - g1 * i1 * r1 * d1, y1 - v1 * i1 * r1 * d1, m1 + g1 * i1 * r1 * d1, y1 + v1 * i1 * r1 * d1, t1, !0), n1 = !n1, u1 += a1 * d1;\n                        }\n                    },\n                    convertPolygonToPath: function() {\n                        var t1, e1 = Math.floor(this.pt.v), r1 = 2 * Math.PI / e1, i1 = this.or.v, s1 = this.os.v, a1 = 2 * Math.PI * i1 / (4 * e1), n1 = .5 * -Math.PI, o1 = 3 === this.data.d ? -1 : 1;\n                        for(n1 += this.r.v, this.v._length = 0, t1 = 0; t1 < e1; t1 += 1){\n                            var h1 = i1 * Math.cos(n1), l1 = i1 * Math.sin(n1), p1 = 0 === h1 && 0 === l1 ? 0 : l1 / Math.sqrt(h1 * h1 + l1 * l1), c1 = 0 === h1 && 0 === l1 ? 0 : -h1 / Math.sqrt(h1 * h1 + l1 * l1);\n                            h1 += +this.p.v[0], l1 += +this.p.v[1], this.v.setTripleAt(h1, l1, h1 - p1 * a1 * s1 * o1, l1 - c1 * a1 * s1 * o1, h1 + p1 * a1 * s1 * o1, l1 + c1 * a1 * s1 * o1, t1, !0), n1 += r1 * o1;\n                        }\n                        this.paths.length = 0, this.paths[0] = this.v;\n                    }\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], t1), t1;\n            }(), c1 = function() {\n                function t1(t1, e1) {\n                    this.v = shapePool.newElement(), this.v.c = !0, this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.elem = t1, this.comp = t1.comp, this.frameId = -1, this.d = e1.d, this.initDynamicPropertyContainer(t1), this.p = PropertyFactory.getProp(t1, e1.p, 1, 0, this), this.s = PropertyFactory.getProp(t1, e1.s, 1, 0, this), this.r = PropertyFactory.getProp(t1, e1.r, 0, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertRectToPath());\n                }\n                return t1.prototype = {\n                    convertRectToPath: function() {\n                        var t1 = this.p.v[0], e1 = this.p.v[1], r1 = this.s.v[0] / 2, i1 = this.s.v[1] / 2, s1 = bmMin(r1, i1, this.r.v), a1 = s1 * (1 - roundCorner);\n                        this.v._length = 0, 2 === this.d || 1 === this.d ? (this.v.setTripleAt(t1 + r1, e1 - i1 + s1, t1 + r1, e1 - i1 + s1, t1 + r1, e1 - i1 + a1, 0, !0), this.v.setTripleAt(t1 + r1, e1 + i1 - s1, t1 + r1, e1 + i1 - a1, t1 + r1, e1 + i1 - s1, 1, !0), 0 !== s1 ? (this.v.setTripleAt(t1 + r1 - s1, e1 + i1, t1 + r1 - s1, e1 + i1, t1 + r1 - a1, e1 + i1, 2, !0), this.v.setTripleAt(t1 - r1 + s1, e1 + i1, t1 - r1 + a1, e1 + i1, t1 - r1 + s1, e1 + i1, 3, !0), this.v.setTripleAt(t1 - r1, e1 + i1 - s1, t1 - r1, e1 + i1 - s1, t1 - r1, e1 + i1 - a1, 4, !0), this.v.setTripleAt(t1 - r1, e1 - i1 + s1, t1 - r1, e1 - i1 + a1, t1 - r1, e1 - i1 + s1, 5, !0), this.v.setTripleAt(t1 - r1 + s1, e1 - i1, t1 - r1 + s1, e1 - i1, t1 - r1 + a1, e1 - i1, 6, !0), this.v.setTripleAt(t1 + r1 - s1, e1 - i1, t1 + r1 - a1, e1 - i1, t1 + r1 - s1, e1 - i1, 7, !0)) : (this.v.setTripleAt(t1 - r1, e1 + i1, t1 - r1 + a1, e1 + i1, t1 - r1, e1 + i1, 2), this.v.setTripleAt(t1 - r1, e1 - i1, t1 - r1, e1 - i1 + a1, t1 - r1, e1 - i1, 3))) : (this.v.setTripleAt(t1 + r1, e1 - i1 + s1, t1 + r1, e1 - i1 + a1, t1 + r1, e1 - i1 + s1, 0, !0), 0 !== s1 ? (this.v.setTripleAt(t1 + r1 - s1, e1 - i1, t1 + r1 - s1, e1 - i1, t1 + r1 - a1, e1 - i1, 1, !0), this.v.setTripleAt(t1 - r1 + s1, e1 - i1, t1 - r1 + a1, e1 - i1, t1 - r1 + s1, e1 - i1, 2, !0), this.v.setTripleAt(t1 - r1, e1 - i1 + s1, t1 - r1, e1 - i1 + s1, t1 - r1, e1 - i1 + a1, 3, !0), this.v.setTripleAt(t1 - r1, e1 + i1 - s1, t1 - r1, e1 + i1 - a1, t1 - r1, e1 + i1 - s1, 4, !0), this.v.setTripleAt(t1 - r1 + s1, e1 + i1, t1 - r1 + s1, e1 + i1, t1 - r1 + a1, e1 + i1, 5, !0), this.v.setTripleAt(t1 + r1 - s1, e1 + i1, t1 + r1 - a1, e1 + i1, t1 + r1 - s1, e1 + i1, 6, !0), this.v.setTripleAt(t1 + r1, e1 + i1 - s1, t1 + r1, e1 + i1 - s1, t1 + r1, e1 + i1 - a1, 7, !0)) : (this.v.setTripleAt(t1 - r1, e1 - i1, t1 - r1 + a1, e1 - i1, t1 - r1, e1 - i1, 1, !0), this.v.setTripleAt(t1 - r1, e1 + i1, t1 - r1, e1 + i1 - a1, t1 - r1, e1 + i1, 2, !0), this.v.setTripleAt(t1 + r1, e1 + i1, t1 + r1 - a1, e1 + i1, t1 + r1, e1 + i1, 3, !0)));\n                    },\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertRectToPath());\n                    },\n                    reset: i1\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], t1), t1;\n            }(), f1 = {\n                getShapeProp: function(t1, e1, r1) {\n                    var i1;\n                    return 3 === r1 || 4 === r1 ? i1 = (3 === r1 ? e1.pt : e1.ks).k.length ? new h1(t1, e1, r1) : new n1(t1, e1, r1) : 5 === r1 ? i1 = new c1(t1, e1) : 6 === r1 ? i1 = new l1(t1, e1) : 7 === r1 && (i1 = new p1(t1, e1)), i1.k && t1.addDynamicProperty(i1), i1;\n                },\n                getConstructorFunction: function() {\n                    return n1;\n                },\n                getKeyframedConstructorFunction: function() {\n                    return h1;\n                }\n            };\n            return f1;\n        }(), Matrix = function() {\n            var t1 = Math.cos, e1 = Math.sin, r1 = Math.tan, i1 = Math.round;\n            function s1() {\n                return this.props[0] = 1, this.props[1] = 0, this.props[2] = 0, this.props[3] = 0, this.props[4] = 0, this.props[5] = 1, this.props[6] = 0, this.props[7] = 0, this.props[8] = 0, this.props[9] = 0, this.props[10] = 1, this.props[11] = 0, this.props[12] = 0, this.props[13] = 0, this.props[14] = 0, this.props[15] = 1, this;\n            }\n            function a1(r1) {\n                if (0 === r1) return this;\n                var i1 = t1(r1), s1 = e1(r1);\n                return this._t(i1, -s1, 0, 0, s1, i1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function n1(r1) {\n                if (0 === r1) return this;\n                var i1 = t1(r1), s1 = e1(r1);\n                return this._t(1, 0, 0, 0, 0, i1, -s1, 0, 0, s1, i1, 0, 0, 0, 0, 1);\n            }\n            function o1(r1) {\n                if (0 === r1) return this;\n                var i1 = t1(r1), s1 = e1(r1);\n                return this._t(i1, 0, s1, 0, 0, 1, 0, 0, -s1, 0, i1, 0, 0, 0, 0, 1);\n            }\n            function h1(r1) {\n                if (0 === r1) return this;\n                var i1 = t1(r1), s1 = e1(r1);\n                return this._t(i1, -s1, 0, 0, s1, i1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function l1(t1, e1) {\n                return this._t(1, e1, t1, 1, 0, 0);\n            }\n            function p1(t1, e1) {\n                return this.shear(r1(t1), r1(e1));\n            }\n            function c1(i1, s1) {\n                var a1 = t1(s1), n1 = e1(s1);\n                return this._t(a1, n1, 0, 0, -n1, a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, r1(i1), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(a1, -n1, 0, 0, n1, a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function f1(t1, e1, r1) {\n                return r1 || 0 === r1 || (r1 = 1), 1 === t1 && 1 === e1 && 1 === r1 ? this : this._t(t1, 0, 0, 0, 0, e1, 0, 0, 0, 0, r1, 0, 0, 0, 0, 1);\n            }\n            function u1(t1, e1, r1, i1, s1, a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1) {\n                return this.props[0] = t1, this.props[1] = e1, this.props[2] = r1, this.props[3] = i1, this.props[4] = s1, this.props[5] = a1, this.props[6] = n1, this.props[7] = o1, this.props[8] = h1, this.props[9] = l1, this.props[10] = p1, this.props[11] = c1, this.props[12] = f1, this.props[13] = u1, this.props[14] = d1, this.props[15] = m1, this;\n            }\n            function d1(t1, e1, r1) {\n                return r1 = r1 || 0, 0 !== t1 || 0 !== e1 || 0 !== r1 ? this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, t1, e1, r1, 1) : this;\n            }\n            function m1(t1, e1, r1, i1, s1, a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1) {\n                var y1 = this.props;\n                if (1 === t1 && 0 === e1 && 0 === r1 && 0 === i1 && 0 === s1 && 1 === a1 && 0 === n1 && 0 === o1 && 0 === h1 && 0 === l1 && 1 === p1 && 0 === c1) return y1[12] = y1[12] * t1 + y1[15] * f1, y1[13] = y1[13] * a1 + y1[15] * u1, y1[14] = y1[14] * p1 + y1[15] * d1, y1[15] *= m1, this._identityCalculated = !1, this;\n                var g1 = y1[0], v1 = y1[1], b1 = y1[2], _1 = y1[3], P1 = y1[4], S1 = y1[5], E1 = y1[6], x1 = y1[7], C1 = y1[8], A1 = y1[9], w1 = y1[10], k1 = y1[11], T1 = y1[12], M1 = y1[13], D1 = y1[14], F1 = y1[15];\n                return y1[0] = g1 * t1 + v1 * s1 + b1 * h1 + _1 * f1, y1[1] = g1 * e1 + v1 * a1 + b1 * l1 + _1 * u1, y1[2] = g1 * r1 + v1 * n1 + b1 * p1 + _1 * d1, y1[3] = g1 * i1 + v1 * o1 + b1 * c1 + _1 * m1, y1[4] = P1 * t1 + S1 * s1 + E1 * h1 + x1 * f1, y1[5] = P1 * e1 + S1 * a1 + E1 * l1 + x1 * u1, y1[6] = P1 * r1 + S1 * n1 + E1 * p1 + x1 * d1, y1[7] = P1 * i1 + S1 * o1 + E1 * c1 + x1 * m1, y1[8] = C1 * t1 + A1 * s1 + w1 * h1 + k1 * f1, y1[9] = C1 * e1 + A1 * a1 + w1 * l1 + k1 * u1, y1[10] = C1 * r1 + A1 * n1 + w1 * p1 + k1 * d1, y1[11] = C1 * i1 + A1 * o1 + w1 * c1 + k1 * m1, y1[12] = T1 * t1 + M1 * s1 + D1 * h1 + F1 * f1, y1[13] = T1 * e1 + M1 * a1 + D1 * l1 + F1 * u1, y1[14] = T1 * r1 + M1 * n1 + D1 * p1 + F1 * d1, y1[15] = T1 * i1 + M1 * o1 + D1 * c1 + F1 * m1, this._identityCalculated = !1, this;\n            }\n            function y1(t1) {\n                var e1 = t1.props;\n                return this.transform(e1[0], e1[1], e1[2], e1[3], e1[4], e1[5], e1[6], e1[7], e1[8], e1[9], e1[10], e1[11], e1[12], e1[13], e1[14], e1[15]);\n            }\n            function g1() {\n                return this._identityCalculated || (this._identity = !(1 !== this.props[0] || 0 !== this.props[1] || 0 !== this.props[2] || 0 !== this.props[3] || 0 !== this.props[4] || 1 !== this.props[5] || 0 !== this.props[6] || 0 !== this.props[7] || 0 !== this.props[8] || 0 !== this.props[9] || 1 !== this.props[10] || 0 !== this.props[11] || 0 !== this.props[12] || 0 !== this.props[13] || 0 !== this.props[14] || 1 !== this.props[15]), this._identityCalculated = !0), this._identity;\n            }\n            function v1(t1) {\n                for(var e1 = 0; e1 < 16;){\n                    if (t1.props[e1] !== this.props[e1]) return !1;\n                    e1 += 1;\n                }\n                return !0;\n            }\n            function b1(t1) {\n                var e1;\n                for(e1 = 0; e1 < 16; e1 += 1)t1.props[e1] = this.props[e1];\n                return t1;\n            }\n            function _1(t1) {\n                var e1;\n                for(e1 = 0; e1 < 16; e1 += 1)this.props[e1] = t1[e1];\n            }\n            function P1(t1, e1, r1) {\n                return {\n                    x: t1 * this.props[0] + e1 * this.props[4] + r1 * this.props[8] + this.props[12],\n                    y: t1 * this.props[1] + e1 * this.props[5] + r1 * this.props[9] + this.props[13],\n                    z: t1 * this.props[2] + e1 * this.props[6] + r1 * this.props[10] + this.props[14]\n                };\n            }\n            function S1(t1, e1, r1) {\n                return t1 * this.props[0] + e1 * this.props[4] + r1 * this.props[8] + this.props[12];\n            }\n            function E1(t1, e1, r1) {\n                return t1 * this.props[1] + e1 * this.props[5] + r1 * this.props[9] + this.props[13];\n            }\n            function x1(t1, e1, r1) {\n                return t1 * this.props[2] + e1 * this.props[6] + r1 * this.props[10] + this.props[14];\n            }\n            function C1() {\n                var t1 = this.props[0] * this.props[5] - this.props[1] * this.props[4], e1 = this.props[5] / t1, r1 = -this.props[1] / t1, i1 = -this.props[4] / t1, s1 = this.props[0] / t1, a1 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / t1, n1 = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / t1, o1 = new Matrix;\n                return o1.props[0] = e1, o1.props[1] = r1, o1.props[4] = i1, o1.props[5] = s1, o1.props[12] = a1, o1.props[13] = n1, o1;\n            }\n            function A1(t1) {\n                return this.getInverseMatrix().applyToPointArray(t1[0], t1[1], t1[2] || 0);\n            }\n            function w1(t1) {\n                var e1, r1 = t1.length, i1 = [];\n                for(e1 = 0; e1 < r1; e1 += 1)i1[e1] = A1(t1[e1]);\n                return i1;\n            }\n            function k1(t1, e1, r1) {\n                var i1 = createTypedArray(\"float32\", 6);\n                if (this.isIdentity()) i1[0] = t1[0], i1[1] = t1[1], i1[2] = e1[0], i1[3] = e1[1], i1[4] = r1[0], i1[5] = r1[1];\n                else {\n                    var s1 = this.props[0], a1 = this.props[1], n1 = this.props[4], o1 = this.props[5], h1 = this.props[12], l1 = this.props[13];\n                    i1[0] = t1[0] * s1 + t1[1] * n1 + h1, i1[1] = t1[0] * a1 + t1[1] * o1 + l1, i1[2] = e1[0] * s1 + e1[1] * n1 + h1, i1[3] = e1[0] * a1 + e1[1] * o1 + l1, i1[4] = r1[0] * s1 + r1[1] * n1 + h1, i1[5] = r1[0] * a1 + r1[1] * o1 + l1;\n                }\n                return i1;\n            }\n            function T1(t1, e1, r1) {\n                return this.isIdentity() ? [\n                    t1,\n                    e1,\n                    r1\n                ] : [\n                    t1 * this.props[0] + e1 * this.props[4] + r1 * this.props[8] + this.props[12],\n                    t1 * this.props[1] + e1 * this.props[5] + r1 * this.props[9] + this.props[13],\n                    t1 * this.props[2] + e1 * this.props[6] + r1 * this.props[10] + this.props[14]\n                ];\n            }\n            function M1(t1, e1) {\n                if (this.isIdentity()) return t1 + \",\" + e1;\n                var r1 = this.props;\n                return Math.round(100 * (t1 * r1[0] + e1 * r1[4] + r1[12])) / 100 + \",\" + Math.round(100 * (t1 * r1[1] + e1 * r1[5] + r1[13])) / 100;\n            }\n            function D1() {\n                for(var t1 = 0, e1 = this.props, r1 = \"matrix3d(\"; t1 < 16;)r1 += i1(1e4 * e1[t1]) / 1e4, r1 += 15 === t1 ? \")\" : \",\", t1 += 1;\n                return r1;\n            }\n            function F1(t1) {\n                return t1 < 1e-6 && t1 > 0 || t1 > -1e-6 && t1 < 0 ? i1(1e4 * t1) / 1e4 : t1;\n            }\n            function I1() {\n                var t1 = this.props;\n                return \"matrix(\" + F1(t1[0]) + \",\" + F1(t1[1]) + \",\" + F1(t1[4]) + \",\" + F1(t1[5]) + \",\" + F1(t1[12]) + \",\" + F1(t1[13]) + \")\";\n            }\n            return function() {\n                this.reset = s1, this.rotate = a1, this.rotateX = n1, this.rotateY = o1, this.rotateZ = h1, this.skew = p1, this.skewFromAxis = c1, this.shear = l1, this.scale = f1, this.setTransform = u1, this.translate = d1, this.transform = m1, this.multiply = y1, this.applyToPoint = P1, this.applyToX = S1, this.applyToY = E1, this.applyToZ = x1, this.applyToPointArray = T1, this.applyToTriplePoints = k1, this.applyToPointStringified = M1, this.toCSS = D1, this.to2dCSS = I1, this.clone = b1, this.cloneFromProps = _1, this.equals = v1, this.inversePoints = w1, this.inversePoint = A1, this.getInverseMatrix = C1, this._t = this.transform, this.isIdentity = g1, this._identity = !0, this._identityCalculated = !1, this.props = createTypedArray(\"float32\", 16), this.reset();\n            };\n        }();\n        function _typeof$3(t1) {\n            return _typeof$3 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$3(t1);\n        }\n        var lottie = {}, standalone = \"__[STANDALONE]__\", animationData = \"__[ANIMATIONDATA]__\", renderer = \"\";\n        function setLocation(t1) {\n            setLocationHref(t1);\n        }\n        function searchAnimations() {\n            !0 === standalone ? animationManager.searchAnimations(animationData, standalone, renderer) : animationManager.searchAnimations();\n        }\n        function setSubframeRendering(t1) {\n            setSubframeEnabled(t1);\n        }\n        function setPrefix(t1) {\n            setIdPrefix(t1);\n        }\n        function loadAnimation(t1) {\n            return !0 === standalone && (t1.animationData = JSON.parse(animationData)), animationManager.loadAnimation(t1);\n        }\n        function setQuality(t1) {\n            if (\"string\" == typeof t1) switch(t1){\n                case \"high\":\n                    setDefaultCurveSegments(200);\n                    break;\n                default:\n                case \"medium\":\n                    setDefaultCurveSegments(50);\n                    break;\n                case \"low\":\n                    setDefaultCurveSegments(10);\n            }\n            else !isNaN(t1) && t1 > 1 && setDefaultCurveSegments(t1);\n            getDefaultCurveSegments() >= 50 ? roundValues(!1) : roundValues(!0);\n        }\n        function inBrowser() {\n            return \"undefined\" != typeof navigator;\n        }\n        function installPlugin(t1, e1) {\n            \"expressions\" === t1 && setExpressionsPlugin(e1);\n        }\n        function getFactory(t1) {\n            switch(t1){\n                case \"propertyFactory\":\n                    return PropertyFactory;\n                case \"shapePropertyFactory\":\n                    return ShapePropertyFactory;\n                case \"matrix\":\n                    return Matrix;\n                default:\n                    return null;\n            }\n        }\n        function checkReady() {\n            \"complete\" === document.readyState && (clearInterval(readyStateCheckInterval), searchAnimations());\n        }\n        function getQueryVariable(t1) {\n            for(var e1 = queryString.split(\"&\"), r1 = 0; r1 < e1.length; r1 += 1){\n                var i1 = e1[r1].split(\"=\");\n                if (decodeURIComponent(i1[0]) == t1) return decodeURIComponent(i1[1]);\n            }\n            return null;\n        }\n        lottie.play = animationManager.play, lottie.pause = animationManager.pause, lottie.setLocationHref = setLocation, lottie.togglePause = animationManager.togglePause, lottie.setSpeed = animationManager.setSpeed, lottie.setDirection = animationManager.setDirection, lottie.stop = animationManager.stop, lottie.searchAnimations = searchAnimations, lottie.registerAnimation = animationManager.registerAnimation, lottie.loadAnimation = loadAnimation, lottie.setSubframeRendering = setSubframeRendering, lottie.resize = animationManager.resize, lottie.goToAndStop = animationManager.goToAndStop, lottie.destroy = animationManager.destroy, lottie.setQuality = setQuality, lottie.inBrowser = inBrowser, lottie.installPlugin = installPlugin, lottie.freeze = animationManager.freeze, lottie.unfreeze = animationManager.unfreeze, lottie.setVolume = animationManager.setVolume, lottie.mute = animationManager.mute, lottie.unmute = animationManager.unmute, lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations, lottie.useWebWorker = setWebWorker, lottie.setIDPrefix = setPrefix, lottie.__getFactory = getFactory, lottie.version = \"5.12.2\";\n        var queryString = \"\";\n        if (standalone) {\n            var scripts = document.getElementsByTagName(\"script\"), index = scripts.length - 1, myScript = scripts[index] || {\n                src: \"\"\n            };\n            queryString = myScript.src ? myScript.src.replace(/^[^\\?]+\\??/, \"\") : \"\", renderer = getQueryVariable(\"renderer\");\n        }\n        var readyStateCheckInterval = setInterval(checkReady, 100);\n        try {\n            \"object\" !== _typeof$3(exports) && (window.bodymovin = lottie);\n        } catch (t) {}\n        var ShapeModifiers = function() {\n            var t1 = {}, e1 = {};\n            return t1.registerModifier = function(t1, r1) {\n                e1[t1] || (e1[t1] = r1);\n            }, t1.getModifier = function(t1, r1, i1) {\n                return new e1[t1](r1, i1);\n            }, t1;\n        }();\n        function ShapeModifier() {}\n        function TrimModifier() {}\n        function PuckerAndBloatModifier() {}\n        ShapeModifier.prototype.initModifierProperties = function() {}, ShapeModifier.prototype.addShapeToModifier = function() {}, ShapeModifier.prototype.addShape = function(t1) {\n            if (!this.closed) {\n                t1.sh.container.addDynamicProperty(t1.sh);\n                var e1 = {\n                    shape: t1.sh,\n                    data: t1,\n                    localShapeCollection: shapeCollectionPool.newShapeCollection()\n                };\n                this.shapes.push(e1), this.addShapeToModifier(e1), this._isAnimated && t1.setAsAnimated();\n            }\n        }, ShapeModifier.prototype.init = function(t1, e1) {\n            this.shapes = [], this.elem = t1, this.initDynamicPropertyContainer(t1), this.initModifierProperties(t1, e1), this.frameId = initialDefaultFrame, this.closed = !1, this.k = !1, this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);\n        }, ShapeModifier.prototype.processKeys = function() {\n            this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties());\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], ShapeModifier), extendPrototype([\n            ShapeModifier\n        ], TrimModifier), TrimModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.s = PropertyFactory.getProp(t1, e1.s, 0, .01, this), this.e = PropertyFactory.getProp(t1, e1.e, 0, .01, this), this.o = PropertyFactory.getProp(t1, e1.o, 0, 0, this), this.sValue = 0, this.eValue = 0, this.getValue = this.processKeys, this.m = e1.m, this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;\n        }, TrimModifier.prototype.addShapeToModifier = function(t1) {\n            t1.pathsData = [];\n        }, TrimModifier.prototype.calculateShapeEdges = function(t1, e1, r1, i1, s1) {\n            var a1 = [];\n            e1 <= 1 ? a1.push({\n                s: t1,\n                e: e1\n            }) : t1 >= 1 ? a1.push({\n                s: t1 - 1,\n                e: e1 - 1\n            }) : (a1.push({\n                s: t1,\n                e: 1\n            }), a1.push({\n                s: 0,\n                e: e1 - 1\n            }));\n            var n1, o1, h1 = [], l1 = a1.length;\n            for(n1 = 0; n1 < l1; n1 += 1){\n                var p1, c1;\n                (o1 = a1[n1]).e * s1 < i1 || o1.s * s1 > i1 + r1 || (p1 = o1.s * s1 <= i1 ? 0 : (o1.s * s1 - i1) / r1, c1 = o1.e * s1 >= i1 + r1 ? 1 : (o1.e * s1 - i1) / r1, h1.push([\n                    p1,\n                    c1\n                ]));\n            }\n            return h1.length || h1.push([\n                0,\n                0\n            ]), h1;\n        }, TrimModifier.prototype.releasePathsData = function(t1) {\n            var e1, r1 = t1.length;\n            for(e1 = 0; e1 < r1; e1 += 1)segmentsLengthPool.release(t1[e1]);\n            return t1.length = 0, t1;\n        }, TrimModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1;\n            if (this._mdf || t1) {\n                var a1 = this.o.v % 360 / 360;\n                if (a1 < 0 && (a1 += 1), (e1 = this.s.v > 1 ? 1 + a1 : this.s.v < 0 ? 0 + a1 : this.s.v + a1) > (r1 = this.e.v > 1 ? 1 + a1 : this.e.v < 0 ? 0 + a1 : this.e.v + a1)) {\n                    var n1 = e1;\n                    e1 = r1, r1 = n1;\n                }\n                e1 = 1e-4 * Math.round(1e4 * e1), r1 = 1e-4 * Math.round(1e4 * r1), this.sValue = e1, this.eValue = r1;\n            } else e1 = this.sValue, r1 = this.eValue;\n            var o1, h1, l1, p1, c1, f1 = this.shapes.length, u1 = 0;\n            if (r1 === e1) for(s1 = 0; s1 < f1; s1 += 1)this.shapes[s1].localShapeCollection.releaseShapes(), this.shapes[s1].shape._mdf = !0, this.shapes[s1].shape.paths = this.shapes[s1].localShapeCollection, this._mdf && (this.shapes[s1].pathsData.length = 0);\n            else if (1 === r1 && 0 === e1 || 0 === r1 && 1 === e1) {\n                if (this._mdf) for(s1 = 0; s1 < f1; s1 += 1)this.shapes[s1].pathsData.length = 0, this.shapes[s1].shape._mdf = !0;\n            } else {\n                var d1, m1, y1 = [];\n                for(s1 = 0; s1 < f1; s1 += 1)if ((d1 = this.shapes[s1]).shape._mdf || this._mdf || t1 || 2 === this.m) {\n                    if (h1 = (i1 = d1.shape.paths)._length, c1 = 0, !d1.shape._mdf && d1.pathsData.length) c1 = d1.totalShapeLength;\n                    else {\n                        for(l1 = this.releasePathsData(d1.pathsData), o1 = 0; o1 < h1; o1 += 1)p1 = bez.getSegmentsLength(i1.shapes[o1]), l1.push(p1), c1 += p1.totalLength;\n                        d1.totalShapeLength = c1, d1.pathsData = l1;\n                    }\n                    u1 += c1, d1.shape._mdf = !0;\n                } else d1.shape.paths = d1.localShapeCollection;\n                var g1, v1 = e1, b1 = r1, _1 = 0;\n                for(s1 = f1 - 1; s1 >= 0; s1 -= 1)if ((d1 = this.shapes[s1]).shape._mdf) {\n                    for((m1 = d1.localShapeCollection).releaseShapes(), 2 === this.m && f1 > 1 ? (g1 = this.calculateShapeEdges(e1, r1, d1.totalShapeLength, _1, u1), _1 += d1.totalShapeLength) : g1 = [\n                        [\n                            v1,\n                            b1\n                        ]\n                    ], h1 = g1.length, o1 = 0; o1 < h1; o1 += 1){\n                        v1 = g1[o1][0], b1 = g1[o1][1], y1.length = 0, b1 <= 1 ? y1.push({\n                            s: d1.totalShapeLength * v1,\n                            e: d1.totalShapeLength * b1\n                        }) : v1 >= 1 ? y1.push({\n                            s: d1.totalShapeLength * (v1 - 1),\n                            e: d1.totalShapeLength * (b1 - 1)\n                        }) : (y1.push({\n                            s: d1.totalShapeLength * v1,\n                            e: d1.totalShapeLength\n                        }), y1.push({\n                            s: 0,\n                            e: d1.totalShapeLength * (b1 - 1)\n                        }));\n                        var P1 = this.addShapes(d1, y1[0]);\n                        if (y1[0].s !== y1[0].e) {\n                            if (y1.length > 1) if (d1.shape.paths.shapes[d1.shape.paths._length - 1].c) {\n                                var S1 = P1.pop();\n                                this.addPaths(P1, m1), P1 = this.addShapes(d1, y1[1], S1);\n                            } else this.addPaths(P1, m1), P1 = this.addShapes(d1, y1[1]);\n                            this.addPaths(P1, m1);\n                        }\n                    }\n                    d1.shape.paths = m1;\n                }\n            }\n        }, TrimModifier.prototype.addPaths = function(t1, e1) {\n            var r1, i1 = t1.length;\n            for(r1 = 0; r1 < i1; r1 += 1)e1.addShape(t1[r1]);\n        }, TrimModifier.prototype.addSegment = function(t1, e1, r1, i1, s1, a1, n1) {\n            s1.setXYAt(e1[0], e1[1], \"o\", a1), s1.setXYAt(r1[0], r1[1], \"i\", a1 + 1), n1 && s1.setXYAt(t1[0], t1[1], \"v\", a1), s1.setXYAt(i1[0], i1[1], \"v\", a1 + 1);\n        }, TrimModifier.prototype.addSegmentFromArray = function(t1, e1, r1, i1) {\n            e1.setXYAt(t1[1], t1[5], \"o\", r1), e1.setXYAt(t1[2], t1[6], \"i\", r1 + 1), i1 && e1.setXYAt(t1[0], t1[4], \"v\", r1), e1.setXYAt(t1[3], t1[7], \"v\", r1 + 1);\n        }, TrimModifier.prototype.addShapes = function(t1, e1, r1) {\n            var i1, s1, a1, n1, o1, h1, l1, p1, c1 = t1.pathsData, f1 = t1.shape.paths.shapes, u1 = t1.shape.paths._length, d1 = 0, m1 = [], y1 = !0;\n            for(r1 ? (o1 = r1._length, p1 = r1._length) : (r1 = shapePool.newElement(), o1 = 0, p1 = 0), m1.push(r1), i1 = 0; i1 < u1; i1 += 1){\n                for(h1 = c1[i1].lengths, r1.c = f1[i1].c, a1 = f1[i1].c ? h1.length : h1.length + 1, s1 = 1; s1 < a1; s1 += 1)if (d1 + (n1 = h1[s1 - 1]).addedLength < e1.s) d1 += n1.addedLength, r1.c = !1;\n                else {\n                    if (d1 > e1.e) {\n                        r1.c = !1;\n                        break;\n                    }\n                    e1.s <= d1 && e1.e >= d1 + n1.addedLength ? (this.addSegment(f1[i1].v[s1 - 1], f1[i1].o[s1 - 1], f1[i1].i[s1], f1[i1].v[s1], r1, o1, y1), y1 = !1) : (l1 = bez.getNewSegment(f1[i1].v[s1 - 1], f1[i1].v[s1], f1[i1].o[s1 - 1], f1[i1].i[s1], (e1.s - d1) / n1.addedLength, (e1.e - d1) / n1.addedLength, h1[s1 - 1]), this.addSegmentFromArray(l1, r1, o1, y1), y1 = !1, r1.c = !1), d1 += n1.addedLength, o1 += 1;\n                }\n                if (f1[i1].c && h1.length) {\n                    if (n1 = h1[s1 - 1], d1 <= e1.e) {\n                        var g1 = h1[s1 - 1].addedLength;\n                        e1.s <= d1 && e1.e >= d1 + g1 ? (this.addSegment(f1[i1].v[s1 - 1], f1[i1].o[s1 - 1], f1[i1].i[0], f1[i1].v[0], r1, o1, y1), y1 = !1) : (l1 = bez.getNewSegment(f1[i1].v[s1 - 1], f1[i1].v[0], f1[i1].o[s1 - 1], f1[i1].i[0], (e1.s - d1) / g1, (e1.e - d1) / g1, h1[s1 - 1]), this.addSegmentFromArray(l1, r1, o1, y1), y1 = !1, r1.c = !1);\n                    } else r1.c = !1;\n                    d1 += n1.addedLength, o1 += 1;\n                }\n                if (r1._length && (r1.setXYAt(r1.v[p1][0], r1.v[p1][1], \"i\", p1), r1.setXYAt(r1.v[r1._length - 1][0], r1.v[r1._length - 1][1], \"o\", r1._length - 1)), d1 > e1.e) break;\n                i1 < u1 - 1 && (r1 = shapePool.newElement(), y1 = !0, m1.push(r1), o1 = 0);\n            }\n            return m1;\n        }, extendPrototype([\n            ShapeModifier\n        ], PuckerAndBloatModifier), PuckerAndBloatModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.getValue = this.processKeys, this.amount = PropertyFactory.getProp(t1, e1.a, 0, null, this), this._isAnimated = !!this.amount.effectsSequence.length;\n        }, PuckerAndBloatModifier.prototype.processPath = function(t1, e1) {\n            var r1 = e1 / 100, i1 = [\n                0,\n                0\n            ], s1 = t1._length, a1 = 0;\n            for(a1 = 0; a1 < s1; a1 += 1)i1[0] += t1.v[a1][0], i1[1] += t1.v[a1][1];\n            i1[0] /= s1, i1[1] /= s1;\n            var n1, o1, h1, l1, p1, c1, f1 = shapePool.newElement();\n            for(f1.c = t1.c, a1 = 0; a1 < s1; a1 += 1)n1 = t1.v[a1][0] + (i1[0] - t1.v[a1][0]) * r1, o1 = t1.v[a1][1] + (i1[1] - t1.v[a1][1]) * r1, h1 = t1.o[a1][0] + (i1[0] - t1.o[a1][0]) * -r1, l1 = t1.o[a1][1] + (i1[1] - t1.o[a1][1]) * -r1, p1 = t1.i[a1][0] + (i1[0] - t1.i[a1][0]) * -r1, c1 = t1.i[a1][1] + (i1[1] - t1.i[a1][1]) * -r1, f1.setTripleAt(n1, o1, h1, l1, p1, c1, a1);\n            return f1;\n        }, PuckerAndBloatModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1, a1, n1, o1 = this.shapes.length, h1 = this.amount.v;\n            if (0 !== h1) for(r1 = 0; r1 < o1; r1 += 1){\n                if (n1 = (a1 = this.shapes[r1]).localShapeCollection, a1.shape._mdf || this._mdf || t1) for(n1.releaseShapes(), a1.shape._mdf = !0, e1 = a1.shape.paths.shapes, s1 = a1.shape.paths._length, i1 = 0; i1 < s1; i1 += 1)n1.addShape(this.processPath(e1[i1], h1));\n                a1.shape.paths = a1.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        };\n        var TransformPropertyFactory = function() {\n            var t1 = [\n                0,\n                0\n            ];\n            function e1(t1, e1, r1) {\n                if (this.elem = t1, this.frameId = -1, this.propType = \"transform\", this.data = e1, this.v = new Matrix, this.pre = new Matrix, this.appliedTransformations = 0, this.initDynamicPropertyContainer(r1 || t1), e1.p && e1.p.s ? (this.px = PropertyFactory.getProp(t1, e1.p.x, 0, 0, this), this.py = PropertyFactory.getProp(t1, e1.p.y, 0, 0, this), e1.p.z && (this.pz = PropertyFactory.getProp(t1, e1.p.z, 0, 0, this))) : this.p = PropertyFactory.getProp(t1, e1.p || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this), e1.rx) {\n                    if (this.rx = PropertyFactory.getProp(t1, e1.rx, 0, degToRads, this), this.ry = PropertyFactory.getProp(t1, e1.ry, 0, degToRads, this), this.rz = PropertyFactory.getProp(t1, e1.rz, 0, degToRads, this), e1.or.k[0].ti) {\n                        var i1, s1 = e1.or.k.length;\n                        for(i1 = 0; i1 < s1; i1 += 1)e1.or.k[i1].to = null, e1.or.k[i1].ti = null;\n                    }\n                    this.or = PropertyFactory.getProp(t1, e1.or, 1, degToRads, this), this.or.sh = !0;\n                } else this.r = PropertyFactory.getProp(t1, e1.r || {\n                    k: 0\n                }, 0, degToRads, this);\n                e1.sk && (this.sk = PropertyFactory.getProp(t1, e1.sk, 0, degToRads, this), this.sa = PropertyFactory.getProp(t1, e1.sa, 0, degToRads, this)), this.a = PropertyFactory.getProp(t1, e1.a || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this), this.s = PropertyFactory.getProp(t1, e1.s || {\n                    k: [\n                        100,\n                        100,\n                        100\n                    ]\n                }, 1, .01, this), e1.o ? this.o = PropertyFactory.getProp(t1, e1.o, 0, .01, t1) : this.o = {\n                    _mdf: !1,\n                    v: 1\n                }, this._isDirty = !0, this.dynamicProperties.length || this.getValue(!0);\n            }\n            return e1.prototype = {\n                applyToMatrix: function(t1) {\n                    var e1 = this._mdf;\n                    this.iterateDynamicProperties(), this._mdf = this._mdf || e1, this.a && t1.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.s && t1.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && t1.skewFromAxis(-this.sk.v, this.sa.v), this.r ? t1.rotate(-this.r.v) : t1.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.data.p.s ? this.data.p.z ? t1.translate(this.px.v, this.py.v, -this.pz.v) : t1.translate(this.px.v, this.py.v, 0) : t1.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                },\n                getValue: function(e1) {\n                    if (this.elem.globalData.frameId !== this.frameId) {\n                        if (this._isDirty && (this.precalculateMatrix(), this._isDirty = !1), this.iterateDynamicProperties(), this._mdf || e1) {\n                            var r1;\n                            if (this.v.cloneFromProps(this.pre.props), this.appliedTransformations < 1 && this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations < 2 && this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && this.appliedTransformations < 3 && this.v.skewFromAxis(-this.sk.v, this.sa.v), this.r && this.appliedTransformations < 4 ? this.v.rotate(-this.r.v) : !this.r && this.appliedTransformations < 4 && this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.autoOriented) {\n                                var i1, s1;\n                                if (r1 = this.elem.globalData.frameRate, this.p && this.p.keyframes && this.p.getValueAtTime) this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t ? (i1 = this.p.getValueAtTime((this.p.keyframes[0].t + .01) / r1, 0), s1 = this.p.getValueAtTime(this.p.keyframes[0].t / r1, 0)) : this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t ? (i1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / r1, 0), s1 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - .05) / r1, 0)) : (i1 = this.p.pv, s1 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - .01) / r1, this.p.offsetTime));\n                                else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {\n                                    i1 = [], s1 = [];\n                                    var a1 = this.px, n1 = this.py;\n                                    a1._caching.lastFrame + a1.offsetTime <= a1.keyframes[0].t ? (i1[0] = a1.getValueAtTime((a1.keyframes[0].t + .01) / r1, 0), i1[1] = n1.getValueAtTime((n1.keyframes[0].t + .01) / r1, 0), s1[0] = a1.getValueAtTime(a1.keyframes[0].t / r1, 0), s1[1] = n1.getValueAtTime(n1.keyframes[0].t / r1, 0)) : a1._caching.lastFrame + a1.offsetTime >= a1.keyframes[a1.keyframes.length - 1].t ? (i1[0] = a1.getValueAtTime(a1.keyframes[a1.keyframes.length - 1].t / r1, 0), i1[1] = n1.getValueAtTime(n1.keyframes[n1.keyframes.length - 1].t / r1, 0), s1[0] = a1.getValueAtTime((a1.keyframes[a1.keyframes.length - 1].t - .01) / r1, 0), s1[1] = n1.getValueAtTime((n1.keyframes[n1.keyframes.length - 1].t - .01) / r1, 0)) : (i1 = [\n                                        a1.pv,\n                                        n1.pv\n                                    ], s1[0] = a1.getValueAtTime((a1._caching.lastFrame + a1.offsetTime - .01) / r1, a1.offsetTime), s1[1] = n1.getValueAtTime((n1._caching.lastFrame + n1.offsetTime - .01) / r1, n1.offsetTime));\n                                } else i1 = s1 = t1;\n                                this.v.rotate(-Math.atan2(i1[1] - s1[1], i1[0] - s1[0]));\n                            }\n                            this.data.p && this.data.p.s ? this.data.p.z ? this.v.translate(this.px.v, this.py.v, -this.pz.v) : this.v.translate(this.px.v, this.py.v, 0) : this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                        }\n                        this.frameId = this.elem.globalData.frameId;\n                    }\n                },\n                precalculateMatrix: function() {\n                    if (this.appliedTransformations = 0, this.pre.reset(), !this.a.effectsSequence.length && (this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations = 1, !this.s.effectsSequence.length)) {\n                        if (this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.appliedTransformations = 2, this.sk) {\n                            if (this.sk.effectsSequence.length || this.sa.effectsSequence.length) return;\n                            this.pre.skewFromAxis(-this.sk.v, this.sa.v), this.appliedTransformations = 3;\n                        }\n                        this.r ? this.r.effectsSequence.length || (this.pre.rotate(-this.r.v), this.appliedTransformations = 4) : this.rz.effectsSequence.length || this.ry.effectsSequence.length || this.rx.effectsSequence.length || this.or.effectsSequence.length || (this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.appliedTransformations = 4);\n                    }\n                },\n                autoOrient: function() {}\n            }, extendPrototype([\n                DynamicPropertyContainer\n            ], e1), e1.prototype.addDynamicProperty = function(t1) {\n                this._addDynamicProperty(t1), this.elem.addDynamicProperty(t1), this._isDirty = !0;\n            }, e1.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty, {\n                getTransformProperty: function(t1, r1, i1) {\n                    return new e1(t1, r1, i1);\n                }\n            };\n        }();\n        function RepeaterModifier() {}\n        function RoundCornersModifier() {}\n        function floatEqual(t1, e1) {\n            return 1e5 * Math.abs(t1 - e1) <= Math.min(Math.abs(t1), Math.abs(e1));\n        }\n        function floatZero(t1) {\n            return Math.abs(t1) <= 1e-5;\n        }\n        function lerp(t1, e1, r1) {\n            return t1 * (1 - r1) + e1 * r1;\n        }\n        function lerpPoint(t1, e1, r1) {\n            return [\n                lerp(t1[0], e1[0], r1),\n                lerp(t1[1], e1[1], r1)\n            ];\n        }\n        function quadRoots(t1, e1, r1) {\n            if (0 === t1) return [];\n            var i1 = e1 * e1 - 4 * t1 * r1;\n            if (i1 < 0) return [];\n            var s1 = -e1 / (2 * t1);\n            if (0 === i1) return [\n                s1\n            ];\n            var a1 = Math.sqrt(i1) / (2 * t1);\n            return [\n                s1 - a1,\n                s1 + a1\n            ];\n        }\n        function polynomialCoefficients(t1, e1, r1, i1) {\n            return [\n                3 * e1 - t1 - 3 * r1 + i1,\n                3 * t1 - 6 * e1 + 3 * r1,\n                -3 * t1 + 3 * e1,\n                t1\n            ];\n        }\n        function singlePoint(t1) {\n            return new PolynomialBezier(t1, t1, t1, t1, !1);\n        }\n        function PolynomialBezier(t1, e1, r1, i1, s1) {\n            s1 && pointEqual(t1, e1) && (e1 = lerpPoint(t1, i1, 1 / 3)), s1 && pointEqual(r1, i1) && (r1 = lerpPoint(t1, i1, 2 / 3));\n            var a1 = polynomialCoefficients(t1[0], e1[0], r1[0], i1[0]), n1 = polynomialCoefficients(t1[1], e1[1], r1[1], i1[1]);\n            this.a = [\n                a1[0],\n                n1[0]\n            ], this.b = [\n                a1[1],\n                n1[1]\n            ], this.c = [\n                a1[2],\n                n1[2]\n            ], this.d = [\n                a1[3],\n                n1[3]\n            ], this.points = [\n                t1,\n                e1,\n                r1,\n                i1\n            ];\n        }\n        function extrema(t1, e1) {\n            var r1 = t1.points[0][e1], i1 = t1.points[t1.points.length - 1][e1];\n            if (r1 > i1) {\n                var s1 = i1;\n                i1 = r1, r1 = s1;\n            }\n            for(var a1 = quadRoots(3 * t1.a[e1], 2 * t1.b[e1], t1.c[e1]), n1 = 0; n1 < a1.length; n1 += 1)if (a1[n1] > 0 && a1[n1] < 1) {\n                var o1 = t1.point(a1[n1])[e1];\n                o1 < r1 ? r1 = o1 : o1 > i1 && (i1 = o1);\n            }\n            return {\n                min: r1,\n                max: i1\n            };\n        }\n        function intersectData(t1, e1, r1) {\n            var i1 = t1.boundingBox();\n            return {\n                cx: i1.cx,\n                cy: i1.cy,\n                width: i1.width,\n                height: i1.height,\n                bez: t1,\n                t: (e1 + r1) / 2,\n                t1: e1,\n                t2: r1\n            };\n        }\n        function splitData(t1) {\n            var e1 = t1.bez.split(.5);\n            return [\n                intersectData(e1[0], t1.t1, t1.t),\n                intersectData(e1[1], t1.t, t1.t2)\n            ];\n        }\n        function boxIntersect(t1, e1) {\n            return 2 * Math.abs(t1.cx - e1.cx) < t1.width + e1.width && 2 * Math.abs(t1.cy - e1.cy) < t1.height + e1.height;\n        }\n        function intersectsImpl(t1, e1, r1, i1, s1, a1) {\n            if (boxIntersect(t1, e1)) if (r1 >= a1 || t1.width <= i1 && t1.height <= i1 && e1.width <= i1 && e1.height <= i1) s1.push([\n                t1.t,\n                e1.t\n            ]);\n            else {\n                var n1 = splitData(t1), o1 = splitData(e1);\n                intersectsImpl(n1[0], o1[0], r1 + 1, i1, s1, a1), intersectsImpl(n1[0], o1[1], r1 + 1, i1, s1, a1), intersectsImpl(n1[1], o1[0], r1 + 1, i1, s1, a1), intersectsImpl(n1[1], o1[1], r1 + 1, i1, s1, a1);\n            }\n        }\n        function crossProduct(t1, e1) {\n            return [\n                t1[1] * e1[2] - t1[2] * e1[1],\n                t1[2] * e1[0] - t1[0] * e1[2],\n                t1[0] * e1[1] - t1[1] * e1[0]\n            ];\n        }\n        function lineIntersection(t1, e1, r1, i1) {\n            var s1 = [\n                t1[0],\n                t1[1],\n                1\n            ], a1 = [\n                e1[0],\n                e1[1],\n                1\n            ], n1 = [\n                r1[0],\n                r1[1],\n                1\n            ], o1 = [\n                i1[0],\n                i1[1],\n                1\n            ], h1 = crossProduct(crossProduct(s1, a1), crossProduct(n1, o1));\n            return floatZero(h1[2]) ? null : [\n                h1[0] / h1[2],\n                h1[1] / h1[2]\n            ];\n        }\n        function polarOffset(t1, e1, r1) {\n            return [\n                t1[0] + Math.cos(e1) * r1,\n                t1[1] - Math.sin(e1) * r1\n            ];\n        }\n        function pointDistance(t1, e1) {\n            return Math.hypot(t1[0] - e1[0], t1[1] - e1[1]);\n        }\n        function pointEqual(t1, e1) {\n            return floatEqual(t1[0], e1[0]) && floatEqual(t1[1], e1[1]);\n        }\n        function ZigZagModifier() {}\n        function setPoint(t1, e1, r1, i1, s1, a1, n1) {\n            var o1 = r1 - Math.PI / 2, h1 = r1 + Math.PI / 2, l1 = e1[0] + Math.cos(r1) * i1 * s1, p1 = e1[1] - Math.sin(r1) * i1 * s1;\n            t1.setTripleAt(l1, p1, l1 + Math.cos(o1) * a1, p1 - Math.sin(o1) * a1, l1 + Math.cos(h1) * n1, p1 - Math.sin(h1) * n1, t1.length());\n        }\n        function getPerpendicularVector(t1, e1) {\n            var r1 = [\n                e1[0] - t1[0],\n                e1[1] - t1[1]\n            ], i1 = .5 * -Math.PI;\n            return [\n                Math.cos(i1) * r1[0] - Math.sin(i1) * r1[1],\n                Math.sin(i1) * r1[0] + Math.cos(i1) * r1[1]\n            ];\n        }\n        function getProjectingAngle(t1, e1) {\n            var r1 = 0 === e1 ? t1.length() - 1 : e1 - 1, i1 = (e1 + 1) % t1.length(), s1 = getPerpendicularVector(t1.v[r1], t1.v[i1]);\n            return Math.atan2(0, 1) - Math.atan2(s1[1], s1[0]);\n        }\n        function zigZagCorner(t1, e1, r1, i1, s1, a1, n1) {\n            var o1 = getProjectingAngle(e1, r1), h1 = e1.v[r1 % e1._length], l1 = e1.v[0 === r1 ? e1._length - 1 : r1 - 1], p1 = e1.v[(r1 + 1) % e1._length], c1 = 2 === a1 ? Math.sqrt(Math.pow(h1[0] - l1[0], 2) + Math.pow(h1[1] - l1[1], 2)) : 0, f1 = 2 === a1 ? Math.sqrt(Math.pow(h1[0] - p1[0], 2) + Math.pow(h1[1] - p1[1], 2)) : 0;\n            setPoint(t1, e1.v[r1 % e1._length], o1, n1, i1, f1 / (2 * (s1 + 1)), c1 / (2 * (s1 + 1)), a1);\n        }\n        function zigZagSegment(t1, e1, r1, i1, s1, a1) {\n            for(var n1 = 0; n1 < i1; n1 += 1){\n                var o1 = (n1 + 1) / (i1 + 1), h1 = 2 === s1 ? Math.sqrt(Math.pow(e1.points[3][0] - e1.points[0][0], 2) + Math.pow(e1.points[3][1] - e1.points[0][1], 2)) : 0, l1 = e1.normalAngle(o1);\n                setPoint(t1, e1.point(o1), l1, a1, r1, h1 / (2 * (i1 + 1)), h1 / (2 * (i1 + 1)), s1), a1 = -a1;\n            }\n            return a1;\n        }\n        function linearOffset(t1, e1, r1) {\n            var i1 = Math.atan2(e1[0] - t1[0], e1[1] - t1[1]);\n            return [\n                polarOffset(t1, i1, r1),\n                polarOffset(e1, i1, r1)\n            ];\n        }\n        function offsetSegment(t1, e1) {\n            var r1, i1, s1, a1, n1, o1, h1;\n            r1 = (h1 = linearOffset(t1.points[0], t1.points[1], e1))[0], i1 = h1[1], s1 = (h1 = linearOffset(t1.points[1], t1.points[2], e1))[0], a1 = h1[1], n1 = (h1 = linearOffset(t1.points[2], t1.points[3], e1))[0], o1 = h1[1];\n            var l1 = lineIntersection(r1, i1, s1, a1);\n            null === l1 && (l1 = i1);\n            var p1 = lineIntersection(n1, o1, s1, a1);\n            return null === p1 && (p1 = n1), new PolynomialBezier(r1, l1, p1, o1);\n        }\n        function joinLines(t1, e1, r1, i1, s1) {\n            var a1 = e1.points[3], n1 = r1.points[0];\n            if (3 === i1) return a1;\n            if (pointEqual(a1, n1)) return a1;\n            if (2 === i1) {\n                var o1 = -e1.tangentAngle(1), h1 = -r1.tangentAngle(0) + Math.PI, l1 = lineIntersection(a1, polarOffset(a1, o1 + Math.PI / 2, 100), n1, polarOffset(n1, o1 + Math.PI / 2, 100)), p1 = l1 ? pointDistance(l1, a1) : pointDistance(a1, n1) / 2, c1 = polarOffset(a1, o1, 2 * p1 * roundCorner);\n                return t1.setXYAt(c1[0], c1[1], \"o\", t1.length() - 1), c1 = polarOffset(n1, h1, 2 * p1 * roundCorner), t1.setTripleAt(n1[0], n1[1], n1[0], n1[1], c1[0], c1[1], t1.length()), n1;\n            }\n            var f1 = lineIntersection(pointEqual(a1, e1.points[2]) ? e1.points[0] : e1.points[2], a1, n1, pointEqual(n1, r1.points[1]) ? r1.points[3] : r1.points[1]);\n            return f1 && pointDistance(f1, a1) < s1 ? (t1.setTripleAt(f1[0], f1[1], f1[0], f1[1], f1[0], f1[1], t1.length()), f1) : a1;\n        }\n        function getIntersection(t1, e1) {\n            var r1 = t1.intersections(e1);\n            return r1.length && floatEqual(r1[0][0], 1) && r1.shift(), r1.length ? r1[0] : null;\n        }\n        function pruneSegmentIntersection(t1, e1) {\n            var r1 = t1.slice(), i1 = e1.slice(), s1 = getIntersection(t1[t1.length - 1], e1[0]);\n            return s1 && (r1[t1.length - 1] = t1[t1.length - 1].split(s1[0])[0], i1[0] = e1[0].split(s1[1])[1]), t1.length > 1 && e1.length > 1 && (s1 = getIntersection(t1[0], e1[e1.length - 1])) ? [\n                [\n                    t1[0].split(s1[0])[0]\n                ],\n                [\n                    e1[e1.length - 1].split(s1[1])[1]\n                ]\n            ] : [\n                r1,\n                i1\n            ];\n        }\n        function pruneIntersections(t1) {\n            for(var e1, r1 = 1; r1 < t1.length; r1 += 1)e1 = pruneSegmentIntersection(t1[r1 - 1], t1[r1]), t1[r1 - 1] = e1[0], t1[r1] = e1[1];\n            return t1.length > 1 && (e1 = pruneSegmentIntersection(t1[t1.length - 1], t1[0]), t1[t1.length - 1] = e1[0], t1[0] = e1[1]), t1;\n        }\n        function offsetSegmentSplit(t1, e1) {\n            var r1, i1, s1, a1, n1 = t1.inflectionPoints();\n            if (0 === n1.length) return [\n                offsetSegment(t1, e1)\n            ];\n            if (1 === n1.length || floatEqual(n1[1], 1)) return r1 = (s1 = t1.split(n1[0]))[0], i1 = s1[1], [\n                offsetSegment(r1, e1),\n                offsetSegment(i1, e1)\n            ];\n            r1 = (s1 = t1.split(n1[0]))[0];\n            var o1 = (n1[1] - n1[0]) / (1 - n1[0]);\n            return a1 = (s1 = s1[1].split(o1))[0], i1 = s1[1], [\n                offsetSegment(r1, e1),\n                offsetSegment(a1, e1),\n                offsetSegment(i1, e1)\n            ];\n        }\n        function OffsetPathModifier() {}\n        function getFontProperties(t1) {\n            for(var e1 = t1.fStyle ? t1.fStyle.split(\" \") : [], r1 = \"normal\", i1 = \"normal\", s1 = e1.length, a1 = 0; a1 < s1; a1 += 1)switch(e1[a1].toLowerCase()){\n                case \"italic\":\n                    i1 = \"italic\";\n                    break;\n                case \"bold\":\n                    r1 = \"700\";\n                    break;\n                case \"black\":\n                    r1 = \"900\";\n                    break;\n                case \"medium\":\n                    r1 = \"500\";\n                    break;\n                case \"regular\":\n                case \"normal\":\n                    r1 = \"400\";\n                    break;\n                case \"light\":\n                case \"thin\":\n                    r1 = \"200\";\n            }\n            return {\n                style: i1,\n                weight: t1.fWeight || r1\n            };\n        }\n        extendPrototype([\n            ShapeModifier\n        ], RepeaterModifier), RepeaterModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.getValue = this.processKeys, this.c = PropertyFactory.getProp(t1, e1.c, 0, null, this), this.o = PropertyFactory.getProp(t1, e1.o, 0, null, this), this.tr = TransformPropertyFactory.getTransformProperty(t1, e1.tr, this), this.so = PropertyFactory.getProp(t1, e1.tr.so, 0, .01, this), this.eo = PropertyFactory.getProp(t1, e1.tr.eo, 0, .01, this), this.data = e1, this.dynamicProperties.length || this.getValue(!0), this._isAnimated = !!this.dynamicProperties.length, this.pMatrix = new Matrix, this.rMatrix = new Matrix, this.sMatrix = new Matrix, this.tMatrix = new Matrix, this.matrix = new Matrix;\n        }, RepeaterModifier.prototype.applyTransforms = function(t1, e1, r1, i1, s1, a1) {\n            var n1 = a1 ? -1 : 1, o1 = i1.s.v[0] + (1 - i1.s.v[0]) * (1 - s1), h1 = i1.s.v[1] + (1 - i1.s.v[1]) * (1 - s1);\n            t1.translate(i1.p.v[0] * n1 * s1, i1.p.v[1] * n1 * s1, i1.p.v[2]), e1.translate(-i1.a.v[0], -i1.a.v[1], i1.a.v[2]), e1.rotate(-i1.r.v * n1 * s1), e1.translate(i1.a.v[0], i1.a.v[1], i1.a.v[2]), r1.translate(-i1.a.v[0], -i1.a.v[1], i1.a.v[2]), r1.scale(a1 ? 1 / o1 : o1, a1 ? 1 / h1 : h1), r1.translate(i1.a.v[0], i1.a.v[1], i1.a.v[2]);\n        }, RepeaterModifier.prototype.init = function(t1, e1, r1, i1) {\n            for(this.elem = t1, this.arr = e1, this.pos = r1, this.elemsData = i1, this._currentCopies = 0, this._elements = [], this._groups = [], this.frameId = -1, this.initDynamicPropertyContainer(t1), this.initModifierProperties(t1, e1[r1]); r1 > 0;)r1 -= 1, this._elements.unshift(e1[r1]);\n            this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);\n        }, RepeaterModifier.prototype.resetElements = function(t1) {\n            var e1, r1 = t1.length;\n            for(e1 = 0; e1 < r1; e1 += 1)t1[e1]._processed = !1, \"gr\" === t1[e1].ty && this.resetElements(t1[e1].it);\n        }, RepeaterModifier.prototype.cloneElements = function(t1) {\n            var e1 = JSON.parse(JSON.stringify(t1));\n            return this.resetElements(e1), e1;\n        }, RepeaterModifier.prototype.changeGroupRender = function(t1, e1) {\n            var r1, i1 = t1.length;\n            for(r1 = 0; r1 < i1; r1 += 1)t1[r1]._render = e1, \"gr\" === t1[r1].ty && this.changeGroupRender(t1[r1].it, e1);\n        }, RepeaterModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1, a1, n1 = !1;\n            if (this._mdf || t1) {\n                var o1, h1 = Math.ceil(this.c.v);\n                if (this._groups.length < h1) {\n                    for(; this._groups.length < h1;){\n                        var l1 = {\n                            it: this.cloneElements(this._elements),\n                            ty: \"gr\"\n                        };\n                        l1.it.push({\n                            a: {\n                                a: 0,\n                                ix: 1,\n                                k: [\n                                    0,\n                                    0\n                                ]\n                            },\n                            nm: \"Transform\",\n                            o: {\n                                a: 0,\n                                ix: 7,\n                                k: 100\n                            },\n                            p: {\n                                a: 0,\n                                ix: 2,\n                                k: [\n                                    0,\n                                    0\n                                ]\n                            },\n                            r: {\n                                a: 1,\n                                ix: 6,\n                                k: [\n                                    {\n                                        s: 0,\n                                        e: 0,\n                                        t: 0\n                                    },\n                                    {\n                                        s: 0,\n                                        e: 0,\n                                        t: 1\n                                    }\n                                ]\n                            },\n                            s: {\n                                a: 0,\n                                ix: 3,\n                                k: [\n                                    100,\n                                    100\n                                ]\n                            },\n                            sa: {\n                                a: 0,\n                                ix: 5,\n                                k: 0\n                            },\n                            sk: {\n                                a: 0,\n                                ix: 4,\n                                k: 0\n                            },\n                            ty: \"tr\"\n                        }), this.arr.splice(0, 0, l1), this._groups.splice(0, 0, l1), this._currentCopies += 1;\n                    }\n                    this.elem.reloadShapes(), n1 = !0;\n                }\n                for(a1 = 0, i1 = 0; i1 <= this._groups.length - 1; i1 += 1){\n                    if (o1 = a1 < h1, this._groups[i1]._render = o1, this.changeGroupRender(this._groups[i1].it, o1), !o1) {\n                        var p1 = this.elemsData[i1].it, c1 = p1[p1.length - 1];\n                        0 !== c1.transform.op.v ? (c1.transform.op._mdf = !0, c1.transform.op.v = 0) : c1.transform.op._mdf = !1;\n                    }\n                    a1 += 1;\n                }\n                this._currentCopies = h1;\n                var f1 = this.o.v, u1 = f1 % 1, d1 = f1 > 0 ? Math.floor(f1) : Math.ceil(f1), m1 = this.pMatrix.props, y1 = this.rMatrix.props, g1 = this.sMatrix.props;\n                this.pMatrix.reset(), this.rMatrix.reset(), this.sMatrix.reset(), this.tMatrix.reset(), this.matrix.reset();\n                var v1, b1, _1 = 0;\n                if (f1 > 0) {\n                    for(; _1 < d1;)this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), _1 += 1;\n                    u1 && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, u1, !1), _1 += u1);\n                } else if (f1 < 0) {\n                    for(; _1 > d1;)this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !0), _1 -= 1;\n                    u1 && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -u1, !0), _1 -= u1);\n                }\n                for(i1 = 1 === this.data.m ? 0 : this._currentCopies - 1, s1 = 1 === this.data.m ? 1 : -1, a1 = this._currentCopies; a1;){\n                    if (b1 = (r1 = (e1 = this.elemsData[i1].it)[e1.length - 1].transform.mProps.v.props).length, e1[e1.length - 1].transform.mProps._mdf = !0, e1[e1.length - 1].transform.op._mdf = !0, e1[e1.length - 1].transform.op.v = 1 === this._currentCopies ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i1 / (this._currentCopies - 1)), 0 !== _1) {\n                        for((0 !== i1 && 1 === s1 || i1 !== this._currentCopies - 1 && -1 === s1) && this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), this.matrix.transform(y1[0], y1[1], y1[2], y1[3], y1[4], y1[5], y1[6], y1[7], y1[8], y1[9], y1[10], y1[11], y1[12], y1[13], y1[14], y1[15]), this.matrix.transform(g1[0], g1[1], g1[2], g1[3], g1[4], g1[5], g1[6], g1[7], g1[8], g1[9], g1[10], g1[11], g1[12], g1[13], g1[14], g1[15]), this.matrix.transform(m1[0], m1[1], m1[2], m1[3], m1[4], m1[5], m1[6], m1[7], m1[8], m1[9], m1[10], m1[11], m1[12], m1[13], m1[14], m1[15]), v1 = 0; v1 < b1; v1 += 1)r1[v1] = this.matrix.props[v1];\n                        this.matrix.reset();\n                    } else for(this.matrix.reset(), v1 = 0; v1 < b1; v1 += 1)r1[v1] = this.matrix.props[v1];\n                    _1 += 1, a1 -= 1, i1 += s1;\n                }\n            } else for(a1 = this._currentCopies, i1 = 0, s1 = 1; a1;)r1 = (e1 = this.elemsData[i1].it)[e1.length - 1].transform.mProps.v.props, e1[e1.length - 1].transform.mProps._mdf = !1, e1[e1.length - 1].transform.op._mdf = !1, a1 -= 1, i1 += s1;\n            return n1;\n        }, RepeaterModifier.prototype.addShape = function() {}, extendPrototype([\n            ShapeModifier\n        ], RoundCornersModifier), RoundCornersModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.getValue = this.processKeys, this.rd = PropertyFactory.getProp(t1, e1.r, 0, null, this), this._isAnimated = !!this.rd.effectsSequence.length;\n        }, RoundCornersModifier.prototype.processPath = function(t1, e1) {\n            var r1, i1 = shapePool.newElement();\n            i1.c = t1.c;\n            var s1, a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1, y1 = t1._length, g1 = 0;\n            for(r1 = 0; r1 < y1; r1 += 1)s1 = t1.v[r1], n1 = t1.o[r1], a1 = t1.i[r1], s1[0] === n1[0] && s1[1] === n1[1] && s1[0] === a1[0] && s1[1] === a1[1] ? 0 !== r1 && r1 !== y1 - 1 || t1.c ? (o1 = 0 === r1 ? t1.v[y1 - 1] : t1.v[r1 - 1], l1 = (h1 = Math.sqrt(Math.pow(s1[0] - o1[0], 2) + Math.pow(s1[1] - o1[1], 2))) ? Math.min(h1 / 2, e1) / h1 : 0, p1 = d1 = s1[0] + (o1[0] - s1[0]) * l1, c1 = m1 = s1[1] - (s1[1] - o1[1]) * l1, f1 = p1 - (p1 - s1[0]) * roundCorner, u1 = c1 - (c1 - s1[1]) * roundCorner, i1.setTripleAt(p1, c1, f1, u1, d1, m1, g1), g1 += 1, o1 = r1 === y1 - 1 ? t1.v[0] : t1.v[r1 + 1], l1 = (h1 = Math.sqrt(Math.pow(s1[0] - o1[0], 2) + Math.pow(s1[1] - o1[1], 2))) ? Math.min(h1 / 2, e1) / h1 : 0, p1 = f1 = s1[0] + (o1[0] - s1[0]) * l1, c1 = u1 = s1[1] + (o1[1] - s1[1]) * l1, d1 = p1 - (p1 - s1[0]) * roundCorner, m1 = c1 - (c1 - s1[1]) * roundCorner, i1.setTripleAt(p1, c1, f1, u1, d1, m1, g1), g1 += 1) : (i1.setTripleAt(s1[0], s1[1], n1[0], n1[1], a1[0], a1[1], g1), g1 += 1) : (i1.setTripleAt(t1.v[r1][0], t1.v[r1][1], t1.o[r1][0], t1.o[r1][1], t1.i[r1][0], t1.i[r1][1], g1), g1 += 1);\n            return i1;\n        }, RoundCornersModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1, a1, n1, o1 = this.shapes.length, h1 = this.rd.v;\n            if (0 !== h1) for(r1 = 0; r1 < o1; r1 += 1){\n                if (n1 = (a1 = this.shapes[r1]).localShapeCollection, a1.shape._mdf || this._mdf || t1) for(n1.releaseShapes(), a1.shape._mdf = !0, e1 = a1.shape.paths.shapes, s1 = a1.shape.paths._length, i1 = 0; i1 < s1; i1 += 1)n1.addShape(this.processPath(e1[i1], h1));\n                a1.shape.paths = a1.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        }, PolynomialBezier.prototype.point = function(t1) {\n            return [\n                ((this.a[0] * t1 + this.b[0]) * t1 + this.c[0]) * t1 + this.d[0],\n                ((this.a[1] * t1 + this.b[1]) * t1 + this.c[1]) * t1 + this.d[1]\n            ];\n        }, PolynomialBezier.prototype.derivative = function(t1) {\n            return [\n                (3 * t1 * this.a[0] + 2 * this.b[0]) * t1 + this.c[0],\n                (3 * t1 * this.a[1] + 2 * this.b[1]) * t1 + this.c[1]\n            ];\n        }, PolynomialBezier.prototype.tangentAngle = function(t1) {\n            var e1 = this.derivative(t1);\n            return Math.atan2(e1[1], e1[0]);\n        }, PolynomialBezier.prototype.normalAngle = function(t1) {\n            var e1 = this.derivative(t1);\n            return Math.atan2(e1[0], e1[1]);\n        }, PolynomialBezier.prototype.inflectionPoints = function() {\n            var t1 = this.a[1] * this.b[0] - this.a[0] * this.b[1];\n            if (floatZero(t1)) return [];\n            var e1 = -.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / t1, r1 = e1 * e1 - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / t1;\n            if (r1 < 0) return [];\n            var i1 = Math.sqrt(r1);\n            return floatZero(i1) ? i1 > 0 && i1 < 1 ? [\n                e1\n            ] : [] : [\n                e1 - i1,\n                e1 + i1\n            ].filter(function(t1) {\n                return t1 > 0 && t1 < 1;\n            });\n        }, PolynomialBezier.prototype.split = function(t1) {\n            if (t1 <= 0) return [\n                singlePoint(this.points[0]),\n                this\n            ];\n            if (t1 >= 1) return [\n                this,\n                singlePoint(this.points[this.points.length - 1])\n            ];\n            var e1 = lerpPoint(this.points[0], this.points[1], t1), r1 = lerpPoint(this.points[1], this.points[2], t1), i1 = lerpPoint(this.points[2], this.points[3], t1), s1 = lerpPoint(e1, r1, t1), a1 = lerpPoint(r1, i1, t1), n1 = lerpPoint(s1, a1, t1);\n            return [\n                new PolynomialBezier(this.points[0], e1, s1, n1, !0),\n                new PolynomialBezier(n1, a1, i1, this.points[3], !0)\n            ];\n        }, PolynomialBezier.prototype.bounds = function() {\n            return {\n                x: extrema(this, 0),\n                y: extrema(this, 1)\n            };\n        }, PolynomialBezier.prototype.boundingBox = function() {\n            var t1 = this.bounds();\n            return {\n                left: t1.x.min,\n                right: t1.x.max,\n                top: t1.y.min,\n                bottom: t1.y.max,\n                width: t1.x.max - t1.x.min,\n                height: t1.y.max - t1.y.min,\n                cx: (t1.x.max + t1.x.min) / 2,\n                cy: (t1.y.max + t1.y.min) / 2\n            };\n        }, PolynomialBezier.prototype.intersections = function(t1, e1, r1) {\n            void 0 === e1 && (e1 = 2), void 0 === r1 && (r1 = 7);\n            var i1 = [];\n            return intersectsImpl(intersectData(this, 0, 1), intersectData(t1, 0, 1), 0, e1, i1, r1), i1;\n        }, PolynomialBezier.shapeSegment = function(t1, e1) {\n            var r1 = (e1 + 1) % t1.length();\n            return new PolynomialBezier(t1.v[e1], t1.o[e1], t1.i[r1], t1.v[r1], !0);\n        }, PolynomialBezier.shapeSegmentInverted = function(t1, e1) {\n            var r1 = (e1 + 1) % t1.length();\n            return new PolynomialBezier(t1.v[r1], t1.i[r1], t1.o[e1], t1.v[e1], !0);\n        }, extendPrototype([\n            ShapeModifier\n        ], ZigZagModifier), ZigZagModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.getValue = this.processKeys, this.amplitude = PropertyFactory.getProp(t1, e1.s, 0, null, this), this.frequency = PropertyFactory.getProp(t1, e1.r, 0, null, this), this.pointsType = PropertyFactory.getProp(t1, e1.pt, 0, null, this), this._isAnimated = 0 !== this.amplitude.effectsSequence.length || 0 !== this.frequency.effectsSequence.length || 0 !== this.pointsType.effectsSequence.length;\n        }, ZigZagModifier.prototype.processPath = function(t1, e1, r1, i1) {\n            var s1 = t1._length, a1 = shapePool.newElement();\n            if (a1.c = t1.c, t1.c || (s1 -= 1), 0 === s1) return a1;\n            var n1 = -1, o1 = PolynomialBezier.shapeSegment(t1, 0);\n            zigZagCorner(a1, t1, 0, e1, r1, i1, n1);\n            for(var h1 = 0; h1 < s1; h1 += 1)n1 = zigZagSegment(a1, o1, e1, r1, i1, -n1), o1 = h1 !== s1 - 1 || t1.c ? PolynomialBezier.shapeSegment(t1, (h1 + 1) % s1) : null, zigZagCorner(a1, t1, h1 + 1, e1, r1, i1, n1);\n            return a1;\n        }, ZigZagModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1, a1, n1, o1 = this.shapes.length, h1 = this.amplitude.v, l1 = Math.max(0, Math.round(this.frequency.v)), p1 = this.pointsType.v;\n            if (0 !== h1) for(r1 = 0; r1 < o1; r1 += 1){\n                if (n1 = (a1 = this.shapes[r1]).localShapeCollection, a1.shape._mdf || this._mdf || t1) for(n1.releaseShapes(), a1.shape._mdf = !0, e1 = a1.shape.paths.shapes, s1 = a1.shape.paths._length, i1 = 0; i1 < s1; i1 += 1)n1.addShape(this.processPath(e1[i1], h1, l1, p1));\n                a1.shape.paths = a1.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        }, extendPrototype([\n            ShapeModifier\n        ], OffsetPathModifier), OffsetPathModifier.prototype.initModifierProperties = function(t1, e1) {\n            this.getValue = this.processKeys, this.amount = PropertyFactory.getProp(t1, e1.a, 0, null, this), this.miterLimit = PropertyFactory.getProp(t1, e1.ml, 0, null, this), this.lineJoin = e1.lj, this._isAnimated = 0 !== this.amount.effectsSequence.length;\n        }, OffsetPathModifier.prototype.processPath = function(t1, e1, r1, i1) {\n            var s1 = shapePool.newElement();\n            s1.c = t1.c;\n            var a1, n1, o1, h1 = t1.length();\n            t1.c || (h1 -= 1);\n            var l1 = [];\n            for(a1 = 0; a1 < h1; a1 += 1)o1 = PolynomialBezier.shapeSegment(t1, a1), l1.push(offsetSegmentSplit(o1, e1));\n            if (!t1.c) for(a1 = h1 - 1; a1 >= 0; a1 -= 1)o1 = PolynomialBezier.shapeSegmentInverted(t1, a1), l1.push(offsetSegmentSplit(o1, e1));\n            l1 = pruneIntersections(l1);\n            var p1 = null, c1 = null;\n            for(a1 = 0; a1 < l1.length; a1 += 1){\n                var f1 = l1[a1];\n                for(c1 && (p1 = joinLines(s1, c1, f1[0], r1, i1)), c1 = f1[f1.length - 1], n1 = 0; n1 < f1.length; n1 += 1)o1 = f1[n1], p1 && pointEqual(o1.points[0], p1) ? s1.setXYAt(o1.points[1][0], o1.points[1][1], \"o\", s1.length() - 1) : s1.setTripleAt(o1.points[0][0], o1.points[0][1], o1.points[1][0], o1.points[1][1], o1.points[0][0], o1.points[0][1], s1.length()), s1.setTripleAt(o1.points[3][0], o1.points[3][1], o1.points[3][0], o1.points[3][1], o1.points[2][0], o1.points[2][1], s1.length()), p1 = o1.points[3];\n            }\n            return l1.length && joinLines(s1, c1, l1[0][0], r1, i1), s1;\n        }, OffsetPathModifier.prototype.processShapes = function(t1) {\n            var e1, r1, i1, s1, a1, n1, o1 = this.shapes.length, h1 = this.amount.v, l1 = this.miterLimit.v, p1 = this.lineJoin;\n            if (0 !== h1) for(r1 = 0; r1 < o1; r1 += 1){\n                if (n1 = (a1 = this.shapes[r1]).localShapeCollection, a1.shape._mdf || this._mdf || t1) for(n1.releaseShapes(), a1.shape._mdf = !0, e1 = a1.shape.paths.shapes, s1 = a1.shape.paths._length, i1 = 0; i1 < s1; i1 += 1)n1.addShape(this.processPath(e1[i1], h1, p1, l1));\n                a1.shape.paths = a1.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        };\n        var FontManager = function() {\n            var t1 = {\n                w: 0,\n                size: 0,\n                shapes: [],\n                data: {\n                    shapes: []\n                }\n            }, e1 = [];\n            e1 = e1.concat([\n                2304,\n                2305,\n                2306,\n                2307,\n                2362,\n                2363,\n                2364,\n                2364,\n                2366,\n                2367,\n                2368,\n                2369,\n                2370,\n                2371,\n                2372,\n                2373,\n                2374,\n                2375,\n                2376,\n                2377,\n                2378,\n                2379,\n                2380,\n                2381,\n                2382,\n                2383,\n                2387,\n                2388,\n                2389,\n                2390,\n                2391,\n                2402,\n                2403\n            ]);\n            var r1 = 127988, i1 = [\n                \"d83cdffb\",\n                \"d83cdffc\",\n                \"d83cdffd\",\n                \"d83cdffe\",\n                \"d83cdfff\"\n            ];\n            function s1(t1, e1) {\n                var r1 = createTag(\"span\");\n                r1.setAttribute(\"aria-hidden\", !0), r1.style.fontFamily = e1;\n                var i1 = createTag(\"span\");\n                i1.innerText = \"giItT1WQy@!-/#\", r1.style.position = \"absolute\", r1.style.left = \"-10000px\", r1.style.top = \"-10000px\", r1.style.fontSize = \"300px\", r1.style.fontVariant = \"normal\", r1.style.fontStyle = \"normal\", r1.style.fontWeight = \"normal\", r1.style.letterSpacing = \"0\", r1.appendChild(i1), document.body.appendChild(r1);\n                var s1 = i1.offsetWidth;\n                return i1.style.fontFamily = function(t1) {\n                    var e1, r1 = t1.split(\",\"), i1 = r1.length, s1 = [];\n                    for(e1 = 0; e1 < i1; e1 += 1)\"sans-serif\" !== r1[e1] && \"monospace\" !== r1[e1] && s1.push(r1[e1]);\n                    return s1.join(\",\");\n                }(t1) + \", \" + e1, {\n                    node: i1,\n                    w: s1,\n                    parent: r1\n                };\n            }\n            function a1(t1, e1) {\n                var r1, i1 = document.body && e1 ? \"svg\" : \"canvas\", s1 = getFontProperties(t1);\n                if (\"svg\" === i1) {\n                    var a1 = createNS(\"text\");\n                    a1.style.fontSize = \"100px\", a1.setAttribute(\"font-family\", t1.fFamily), a1.setAttribute(\"font-style\", s1.style), a1.setAttribute(\"font-weight\", s1.weight), a1.textContent = \"1\", t1.fClass ? (a1.style.fontFamily = \"inherit\", a1.setAttribute(\"class\", t1.fClass)) : a1.style.fontFamily = t1.fFamily, e1.appendChild(a1), r1 = a1;\n                } else {\n                    var n1 = new OffscreenCanvas(500, 500).getContext(\"2d\");\n                    n1.font = s1.style + \" \" + s1.weight + \" 100px \" + t1.fFamily, r1 = n1;\n                }\n                return {\n                    measureText: function(t1) {\n                        return \"svg\" === i1 ? (r1.textContent = t1, r1.getComputedTextLength()) : r1.measureText(t1).width;\n                    }\n                };\n            }\n            function n1(t1) {\n                var e1 = 0, r1 = t1.charCodeAt(0);\n                if (r1 >= 55296 && r1 <= 56319) {\n                    var i1 = t1.charCodeAt(1);\n                    i1 >= 56320 && i1 <= 57343 && (e1 = 1024 * (r1 - 55296) + i1 - 56320 + 65536);\n                }\n                return e1;\n            }\n            function o1(t1) {\n                var e1 = n1(t1);\n                return e1 >= 127462 && e1 <= 127487;\n            }\n            var h1 = function() {\n                this.fonts = [], this.chars = null, this.typekitLoaded = 0, this.isLoaded = !1, this._warned = !1, this.initTime = Date.now(), this.setIsLoadedBinded = this.setIsLoaded.bind(this), this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);\n            };\n            h1.isModifier = function(t1, e1) {\n                var r1 = t1.toString(16) + e1.toString(16);\n                return -1 !== i1.indexOf(r1);\n            }, h1.isZeroWidthJoiner = function(t1) {\n                return 8205 === t1;\n            }, h1.isFlagEmoji = function(t1) {\n                return o1(t1.substr(0, 2)) && o1(t1.substr(2, 2));\n            }, h1.isRegionalCode = o1, h1.isCombinedCharacter = function(t1) {\n                return -1 !== e1.indexOf(t1);\n            }, h1.isRegionalFlag = function(t1, e1) {\n                var i1 = n1(t1.substr(e1, 2));\n                if (i1 !== r1) return !1;\n                var s1 = 0;\n                for(e1 += 2; s1 < 5;){\n                    if ((i1 = n1(t1.substr(e1, 2))) < 917601 || i1 > 917626) return !1;\n                    s1 += 1, e1 += 2;\n                }\n                return 917631 === n1(t1.substr(e1, 2));\n            }, h1.isVariationSelector = function(t1) {\n                return 65039 === t1;\n            }, h1.BLACK_FLAG_CODE_POINT = r1;\n            var l1 = {\n                addChars: function(t1) {\n                    if (t1) {\n                        var e1;\n                        this.chars || (this.chars = []);\n                        var r1, i1, s1 = t1.length, a1 = this.chars.length;\n                        for(e1 = 0; e1 < s1; e1 += 1){\n                            for(r1 = 0, i1 = !1; r1 < a1;)this.chars[r1].style === t1[e1].style && this.chars[r1].fFamily === t1[e1].fFamily && this.chars[r1].ch === t1[e1].ch && (i1 = !0), r1 += 1;\n                            i1 || (this.chars.push(t1[e1]), a1 += 1);\n                        }\n                    }\n                },\n                addFonts: function(t1, e1) {\n                    if (t1) {\n                        if (this.chars) return this.isLoaded = !0, void (this.fonts = t1.list);\n                        if (!document.body) return this.isLoaded = !0, t1.list.forEach(function(t1) {\n                            t1.helper = a1(t1), t1.cache = {};\n                        }), void (this.fonts = t1.list);\n                        var r1, i1 = t1.list, n1 = i1.length, o1 = n1;\n                        for(r1 = 0; r1 < n1; r1 += 1){\n                            var h1, l1, p1 = !0;\n                            if (i1[r1].loaded = !1, i1[r1].monoCase = s1(i1[r1].fFamily, \"monospace\"), i1[r1].sansCase = s1(i1[r1].fFamily, \"sans-serif\"), i1[r1].fPath) {\n                                if (\"p\" === i1[r1].fOrigin || 3 === i1[r1].origin) {\n                                    if ((h1 = document.querySelectorAll('style[f-forigin=\"p\"][f-family=\"' + i1[r1].fFamily + '\"], style[f-origin=\"3\"][f-family=\"' + i1[r1].fFamily + '\"]')).length > 0 && (p1 = !1), p1) {\n                                        var c1 = createTag(\"style\");\n                                        c1.setAttribute(\"f-forigin\", i1[r1].fOrigin), c1.setAttribute(\"f-origin\", i1[r1].origin), c1.setAttribute(\"f-family\", i1[r1].fFamily), c1.type = \"text/css\", c1.innerText = \"@font-face {font-family: \" + i1[r1].fFamily + \"; font-style: normal; src: url('\" + i1[r1].fPath + \"');}\", e1.appendChild(c1);\n                                    }\n                                } else if (\"g\" === i1[r1].fOrigin || 1 === i1[r1].origin) {\n                                    for(h1 = document.querySelectorAll('link[f-forigin=\"g\"], link[f-origin=\"1\"]'), l1 = 0; l1 < h1.length; l1 += 1)-1 !== h1[l1].href.indexOf(i1[r1].fPath) && (p1 = !1);\n                                    if (p1) {\n                                        var f1 = createTag(\"link\");\n                                        f1.setAttribute(\"f-forigin\", i1[r1].fOrigin), f1.setAttribute(\"f-origin\", i1[r1].origin), f1.type = \"text/css\", f1.rel = \"stylesheet\", f1.href = i1[r1].fPath, document.body.appendChild(f1);\n                                    }\n                                } else if (\"t\" === i1[r1].fOrigin || 2 === i1[r1].origin) {\n                                    for(h1 = document.querySelectorAll('script[f-forigin=\"t\"], script[f-origin=\"2\"]'), l1 = 0; l1 < h1.length; l1 += 1)i1[r1].fPath === h1[l1].src && (p1 = !1);\n                                    if (p1) {\n                                        var u1 = createTag(\"link\");\n                                        u1.setAttribute(\"f-forigin\", i1[r1].fOrigin), u1.setAttribute(\"f-origin\", i1[r1].origin), u1.setAttribute(\"rel\", \"stylesheet\"), u1.setAttribute(\"href\", i1[r1].fPath), e1.appendChild(u1);\n                                    }\n                                }\n                            } else i1[r1].loaded = !0, o1 -= 1;\n                            i1[r1].helper = a1(i1[r1], e1), i1[r1].cache = {}, this.fonts.push(i1[r1]);\n                        }\n                        0 === o1 ? this.isLoaded = !0 : setTimeout(this.checkLoadedFonts.bind(this), 100);\n                    } else this.isLoaded = !0;\n                },\n                getCharData: function(e1, r1, i1) {\n                    for(var s1 = 0, a1 = this.chars.length; s1 < a1;){\n                        if (this.chars[s1].ch === e1 && this.chars[s1].style === r1 && this.chars[s1].fFamily === i1) return this.chars[s1];\n                        s1 += 1;\n                    }\n                    return (\"string\" == typeof e1 && 13 !== e1.charCodeAt(0) || !e1) && console && console.warn && !this._warned && (this._warned = !0, console.warn(\"Missing character from exported characters list: \", e1, r1, i1)), t1;\n                },\n                getFontByName: function(t1) {\n                    for(var e1 = 0, r1 = this.fonts.length; e1 < r1;){\n                        if (this.fonts[e1].fName === t1) return this.fonts[e1];\n                        e1 += 1;\n                    }\n                    return this.fonts[0];\n                },\n                measureText: function(t1, e1, r1) {\n                    var i1 = this.getFontByName(e1), s1 = t1;\n                    if (!i1.cache[s1]) {\n                        var a1 = i1.helper;\n                        if (\" \" === t1) {\n                            var n1 = a1.measureText(\"|\" + t1 + \"|\"), o1 = a1.measureText(\"||\");\n                            i1.cache[s1] = (n1 - o1) / 100;\n                        } else i1.cache[s1] = a1.measureText(t1) / 100;\n                    }\n                    return i1.cache[s1] * r1;\n                },\n                checkLoadedFonts: function() {\n                    var t1, e1, r1, i1 = this.fonts.length, s1 = i1;\n                    for(t1 = 0; t1 < i1; t1 += 1)this.fonts[t1].loaded ? s1 -= 1 : \"n\" === this.fonts[t1].fOrigin || 0 === this.fonts[t1].origin ? this.fonts[t1].loaded = !0 : (e1 = this.fonts[t1].monoCase.node, r1 = this.fonts[t1].monoCase.w, e1.offsetWidth !== r1 ? (s1 -= 1, this.fonts[t1].loaded = !0) : (e1 = this.fonts[t1].sansCase.node, r1 = this.fonts[t1].sansCase.w, e1.offsetWidth !== r1 && (s1 -= 1, this.fonts[t1].loaded = !0)), this.fonts[t1].loaded && (this.fonts[t1].sansCase.parent.parentNode.removeChild(this.fonts[t1].sansCase.parent), this.fonts[t1].monoCase.parent.parentNode.removeChild(this.fonts[t1].monoCase.parent)));\n                    0 !== s1 && Date.now() - this.initTime < 5e3 ? setTimeout(this.checkLoadedFontsBinded, 20) : setTimeout(this.setIsLoadedBinded, 10);\n                },\n                setIsLoaded: function() {\n                    this.isLoaded = !0;\n                }\n            };\n            return h1.prototype = l1, h1;\n        }();\n        function SlotManager(t1) {\n            this.animationData = t1;\n        }\n        function slotFactory(t1) {\n            return new SlotManager(t1);\n        }\n        function RenderableElement() {}\n        SlotManager.prototype.getProp = function(t1) {\n            return this.animationData.slots && this.animationData.slots[t1.sid] ? Object.assign(t1, this.animationData.slots[t1.sid].p) : t1;\n        }, RenderableElement.prototype = {\n            initRenderable: function() {\n                this.isInRange = !1, this.hidden = !1, this.isTransparent = !1, this.renderableComponents = [];\n            },\n            addRenderableComponent: function(t1) {\n                -1 === this.renderableComponents.indexOf(t1) && this.renderableComponents.push(t1);\n            },\n            removeRenderableComponent: function(t1) {\n                -1 !== this.renderableComponents.indexOf(t1) && this.renderableComponents.splice(this.renderableComponents.indexOf(t1), 1);\n            },\n            prepareRenderableFrame: function(t1) {\n                this.checkLayerLimits(t1);\n            },\n            checkTransparency: function() {\n                this.finalTransform.mProp.o.v <= 0 ? !this.isTransparent && this.globalData.renderConfig.hideOnTransparent && (this.isTransparent = !0, this.hide()) : this.isTransparent && (this.isTransparent = !1, this.show());\n            },\n            checkLayerLimits: function(t1) {\n                this.data.ip - this.data.st <= t1 && this.data.op - this.data.st > t1 ? !0 !== this.isInRange && (this.globalData._mdf = !0, this._mdf = !0, this.isInRange = !0, this.show()) : !1 !== this.isInRange && (this.globalData._mdf = !0, this.isInRange = !1, this.hide());\n            },\n            renderRenderable: function() {\n                var t1, e1 = this.renderableComponents.length;\n                for(t1 = 0; t1 < e1; t1 += 1)this.renderableComponents[t1].renderFrame(this._isFirstFrame);\n            },\n            sourceRectAtTime: function() {\n                return {\n                    top: 0,\n                    left: 0,\n                    width: 100,\n                    height: 100\n                };\n            },\n            getLayerSize: function() {\n                return 5 === this.data.ty ? {\n                    w: this.data.textData.width,\n                    h: this.data.textData.height\n                } : {\n                    w: this.data.width,\n                    h: this.data.height\n                };\n            }\n        };\n        var getBlendMode = (blendModeEnums = {\n            0: \"source-over\",\n            1: \"multiply\",\n            2: \"screen\",\n            3: \"overlay\",\n            4: \"darken\",\n            5: \"lighten\",\n            6: \"color-dodge\",\n            7: \"color-burn\",\n            8: \"hard-light\",\n            9: \"soft-light\",\n            10: \"difference\",\n            11: \"exclusion\",\n            12: \"hue\",\n            13: \"saturation\",\n            14: \"color\",\n            15: \"luminosity\"\n        }, function(t1) {\n            return blendModeEnums[t1] || \"\";\n        }), blendModeEnums;\n        function SliderEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 0, 0, r1);\n        }\n        function AngleEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 0, 0, r1);\n        }\n        function ColorEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 1, 0, r1);\n        }\n        function PointEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 1, 0, r1);\n        }\n        function LayerIndexEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 0, 0, r1);\n        }\n        function MaskIndexEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 0, 0, r1);\n        }\n        function CheckboxEffect(t1, e1, r1) {\n            this.p = PropertyFactory.getProp(e1, t1.v, 0, 0, r1);\n        }\n        function NoValueEffect() {\n            this.p = {};\n        }\n        function EffectsManager(t1, e1) {\n            var r1, i1 = t1.ef || [];\n            this.effectElements = [];\n            var s1, a1 = i1.length;\n            for(r1 = 0; r1 < a1; r1 += 1)s1 = new GroupEffect(i1[r1], e1), this.effectElements.push(s1);\n        }\n        function GroupEffect(t1, e1) {\n            this.init(t1, e1);\n        }\n        function BaseElement() {}\n        function FrameElement() {}\n        function FootageElement(t1, e1, r1) {\n            this.initFrame(), this.initRenderable(), this.assetData = e1.getAssetData(t1.refId), this.footageData = e1.imageLoader.getAsset(this.assetData), this.initBaseData(t1, e1, r1);\n        }\n        function AudioElement(t1, e1, r1) {\n            this.initFrame(), this.initRenderable(), this.assetData = e1.getAssetData(t1.refId), this.initBaseData(t1, e1, r1), this._isPlaying = !1, this._canPlay = !1;\n            var i1 = this.globalData.getAssetsPath(this.assetData);\n            this.audio = this.globalData.audioController.createAudio(i1), this._currentTime = 0, this.globalData.audioController.addAudio(this), this._volumeMultiplier = 1, this._volume = 1, this._previousVolume = null, this.tm = t1.tm ? PropertyFactory.getProp(this, t1.tm, 0, e1.frameRate, this) : {\n                _placeholder: !0\n            }, this.lv = PropertyFactory.getProp(this, t1.au && t1.au.lv ? t1.au.lv : {\n                k: [\n                    100\n                ]\n            }, 1, .01, this);\n        }\n        function BaseRenderer() {}\n        extendPrototype([\n            DynamicPropertyContainer\n        ], GroupEffect), GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties, GroupEffect.prototype.init = function(t1, e1) {\n            var r1;\n            this.data = t1, this.effectElements = [], this.initDynamicPropertyContainer(e1);\n            var i1, s1 = this.data.ef.length, a1 = this.data.ef;\n            for(r1 = 0; r1 < s1; r1 += 1){\n                switch(i1 = null, a1[r1].ty){\n                    case 0:\n                        i1 = new SliderEffect(a1[r1], e1, this);\n                        break;\n                    case 1:\n                        i1 = new AngleEffect(a1[r1], e1, this);\n                        break;\n                    case 2:\n                        i1 = new ColorEffect(a1[r1], e1, this);\n                        break;\n                    case 3:\n                        i1 = new PointEffect(a1[r1], e1, this);\n                        break;\n                    case 4:\n                    case 7:\n                        i1 = new CheckboxEffect(a1[r1], e1, this);\n                        break;\n                    case 10:\n                        i1 = new LayerIndexEffect(a1[r1], e1, this);\n                        break;\n                    case 11:\n                        i1 = new MaskIndexEffect(a1[r1], e1, this);\n                        break;\n                    case 5:\n                        i1 = new EffectsManager(a1[r1], e1, this);\n                        break;\n                    default:\n                        i1 = new NoValueEffect(a1[r1], e1, this);\n                }\n                i1 && this.effectElements.push(i1);\n            }\n        }, BaseElement.prototype = {\n            checkMasks: function() {\n                if (!this.data.hasMask) return !1;\n                for(var t1 = 0, e1 = this.data.masksProperties.length; t1 < e1;){\n                    if (\"n\" !== this.data.masksProperties[t1].mode && !1 !== this.data.masksProperties[t1].cl) return !0;\n                    t1 += 1;\n                }\n                return !1;\n            },\n            initExpressions: function() {\n                var t1 = getExpressionInterfaces();\n                if (t1) {\n                    var e1 = t1(\"layer\"), r1 = t1(\"effects\"), i1 = t1(\"shape\"), s1 = t1(\"text\"), a1 = t1(\"comp\");\n                    this.layerInterface = e1(this), this.data.hasMask && this.maskManager && this.layerInterface.registerMaskInterface(this.maskManager);\n                    var n1 = r1.createEffectsInterface(this, this.layerInterface);\n                    this.layerInterface.registerEffectsInterface(n1), 0 === this.data.ty || this.data.xt ? this.compInterface = a1(this) : 4 === this.data.ty ? (this.layerInterface.shapeInterface = i1(this.shapesData, this.itemsData, this.layerInterface), this.layerInterface.content = this.layerInterface.shapeInterface) : 5 === this.data.ty && (this.layerInterface.textInterface = s1(this), this.layerInterface.text = this.layerInterface.textInterface);\n                }\n            },\n            setBlendMode: function() {\n                var t1 = getBlendMode(this.data.bm);\n                (this.baseElement || this.layerElement).style[\"mix-blend-mode\"] = t1;\n            },\n            initBaseData: function(t1, e1, r1) {\n                this.globalData = e1, this.comp = r1, this.data = t1, this.layerId = createElementID(), this.data.sr || (this.data.sr = 1), this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);\n            },\n            getType: function() {\n                return this.type;\n            },\n            sourceRectAtTime: function() {}\n        }, FrameElement.prototype = {\n            initFrame: function() {\n                this._isFirstFrame = !1, this.dynamicProperties = [], this._mdf = !1;\n            },\n            prepareProperties: function(t1, e1) {\n                var r1, i1 = this.dynamicProperties.length;\n                for(r1 = 0; r1 < i1; r1 += 1)(e1 || this._isParent && \"transform\" === this.dynamicProperties[r1].propType) && (this.dynamicProperties[r1].getValue(), this.dynamicProperties[r1]._mdf && (this.globalData._mdf = !0, this._mdf = !0));\n            },\n            addDynamicProperty: function(t1) {\n                -1 === this.dynamicProperties.indexOf(t1) && this.dynamicProperties.push(t1);\n            }\n        }, FootageElement.prototype.prepareFrame = function() {}, extendPrototype([\n            RenderableElement,\n            BaseElement,\n            FrameElement\n        ], FootageElement), FootageElement.prototype.getBaseElement = function() {\n            return null;\n        }, FootageElement.prototype.renderFrame = function() {}, FootageElement.prototype.destroy = function() {}, FootageElement.prototype.initExpressions = function() {\n            var t1 = getExpressionInterfaces();\n            if (t1) {\n                var e1 = t1(\"footage\");\n                this.layerInterface = e1(this);\n            }\n        }, FootageElement.prototype.getFootageData = function() {\n            return this.footageData;\n        }, AudioElement.prototype.prepareFrame = function(t1) {\n            if (this.prepareRenderableFrame(t1, !0), this.prepareProperties(t1, !0), this.tm._placeholder) this._currentTime = t1 / this.data.sr;\n            else {\n                var e1 = this.tm.v;\n                this._currentTime = e1;\n            }\n            this._volume = this.lv.v[0];\n            var r1 = this._volume * this._volumeMultiplier;\n            this._previousVolume !== r1 && (this._previousVolume = r1, this.audio.volume(r1));\n        }, extendPrototype([\n            RenderableElement,\n            BaseElement,\n            FrameElement\n        ], AudioElement), AudioElement.prototype.renderFrame = function() {\n            this.isInRange && this._canPlay && (this._isPlaying ? (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > .1) && this.audio.seek(this._currentTime / this.globalData.frameRate) : (this.audio.play(), this.audio.seek(this._currentTime / this.globalData.frameRate), this._isPlaying = !0));\n        }, AudioElement.prototype.show = function() {}, AudioElement.prototype.hide = function() {\n            this.audio.pause(), this._isPlaying = !1;\n        }, AudioElement.prototype.pause = function() {\n            this.audio.pause(), this._isPlaying = !1, this._canPlay = !1;\n        }, AudioElement.prototype.resume = function() {\n            this._canPlay = !0;\n        }, AudioElement.prototype.setRate = function(t1) {\n            this.audio.rate(t1);\n        }, AudioElement.prototype.volume = function(t1) {\n            this._volumeMultiplier = t1, this._previousVolume = t1 * this._volume, this.audio.volume(this._previousVolume);\n        }, AudioElement.prototype.getBaseElement = function() {\n            return null;\n        }, AudioElement.prototype.destroy = function() {}, AudioElement.prototype.sourceRectAtTime = function() {}, AudioElement.prototype.initExpressions = function() {}, BaseRenderer.prototype.checkLayers = function(t1) {\n            var e1, r1, i1 = this.layers.length;\n            for(this.completeLayers = !0, e1 = i1 - 1; e1 >= 0; e1 -= 1)this.elements[e1] || (r1 = this.layers[e1]).ip - r1.st <= t1 - this.layers[e1].st && r1.op - r1.st > t1 - this.layers[e1].st && this.buildItem(e1), this.completeLayers = !!this.elements[e1] && this.completeLayers;\n            this.checkPendingElements();\n        }, BaseRenderer.prototype.createItem = function(t1) {\n            switch(t1.ty){\n                case 2:\n                    return this.createImage(t1);\n                case 0:\n                    return this.createComp(t1);\n                case 1:\n                    return this.createSolid(t1);\n                case 3:\n                default:\n                    return this.createNull(t1);\n                case 4:\n                    return this.createShape(t1);\n                case 5:\n                    return this.createText(t1);\n                case 6:\n                    return this.createAudio(t1);\n                case 13:\n                    return this.createCamera(t1);\n                case 15:\n                    return this.createFootage(t1);\n            }\n        }, BaseRenderer.prototype.createCamera = function() {\n            throw new Error(\"You're using a 3d camera. Try the html renderer.\");\n        }, BaseRenderer.prototype.createAudio = function(t1) {\n            return new AudioElement(t1, this.globalData, this);\n        }, BaseRenderer.prototype.createFootage = function(t1) {\n            return new FootageElement(t1, this.globalData, this);\n        }, BaseRenderer.prototype.buildAllItems = function() {\n            var t1, e1 = this.layers.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.buildItem(t1);\n            this.checkPendingElements();\n        }, BaseRenderer.prototype.includeLayers = function(t1) {\n            var e1;\n            this.completeLayers = !1;\n            var r1, i1 = t1.length, s1 = this.layers.length;\n            for(e1 = 0; e1 < i1; e1 += 1)for(r1 = 0; r1 < s1;){\n                if (this.layers[r1].id === t1[e1].id) {\n                    this.layers[r1] = t1[e1];\n                    break;\n                }\n                r1 += 1;\n            }\n        }, BaseRenderer.prototype.setProjectInterface = function(t1) {\n            this.globalData.projectInterface = t1;\n        }, BaseRenderer.prototype.initItems = function() {\n            this.globalData.progressiveLoad || this.buildAllItems();\n        }, BaseRenderer.prototype.buildElementParenting = function(t1, e1, r1) {\n            for(var i1 = this.elements, s1 = this.layers, a1 = 0, n1 = s1.length; a1 < n1;)s1[a1].ind == e1 && (i1[a1] && !0 !== i1[a1] ? (r1.push(i1[a1]), i1[a1].setAsParent(), void 0 !== s1[a1].parent ? this.buildElementParenting(t1, s1[a1].parent, r1) : t1.setHierarchy(r1)) : (this.buildItem(a1), this.addPendingElement(t1))), a1 += 1;\n        }, BaseRenderer.prototype.addPendingElement = function(t1) {\n            this.pendingElements.push(t1);\n        }, BaseRenderer.prototype.searchExtraCompositions = function(t1) {\n            var e1, r1 = t1.length;\n            for(e1 = 0; e1 < r1; e1 += 1)if (t1[e1].xt) {\n                var i1 = this.createComp(t1[e1]);\n                i1.initExpressions(), this.globalData.projectInterface.registerComposition(i1);\n            }\n        }, BaseRenderer.prototype.getElementById = function(t1) {\n            var e1, r1 = this.elements.length;\n            for(e1 = 0; e1 < r1; e1 += 1)if (this.elements[e1].data.ind === t1) return this.elements[e1];\n            return null;\n        }, BaseRenderer.prototype.getElementByPath = function(t1) {\n            var e1, r1 = t1.shift();\n            if (\"number\" == typeof r1) e1 = this.elements[r1];\n            else {\n                var i1, s1 = this.elements.length;\n                for(i1 = 0; i1 < s1; i1 += 1)if (this.elements[i1].data.nm === r1) {\n                    e1 = this.elements[i1];\n                    break;\n                }\n            }\n            return 0 === t1.length ? e1 : e1.getElementByPath(t1);\n        }, BaseRenderer.prototype.setupGlobalData = function(t1, e1) {\n            this.globalData.fontManager = new FontManager, this.globalData.slotManager = slotFactory(t1), this.globalData.fontManager.addChars(t1.chars), this.globalData.fontManager.addFonts(t1.fonts, e1), this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem), this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem), this.globalData.imageLoader = this.animationItem.imagePreloader, this.globalData.audioController = this.animationItem.audioController, this.globalData.frameId = 0, this.globalData.frameRate = t1.fr, this.globalData.nm = t1.nm, this.globalData.compSize = {\n                w: t1.w,\n                h: t1.h\n            };\n        };\n        var effectTypes = {\n            TRANSFORM_EFFECT: \"transformEFfect\"\n        };\n        function TransformElement() {}\n        function MaskElement(t1, e1, r1) {\n            this.data = t1, this.element = e1, this.globalData = r1, this.storedData = [], this.masksProperties = this.data.masksProperties || [], this.maskElement = null;\n            var i1, s1, a1 = this.globalData.defs, n1 = this.masksProperties ? this.masksProperties.length : 0;\n            this.viewData = createSizedArray(n1), this.solidPath = \"\";\n            var o1, h1, l1, p1, c1, f1, u1 = this.masksProperties, d1 = 0, m1 = [], y1 = createElementID(), g1 = \"clipPath\", v1 = \"clip-path\";\n            for(i1 = 0; i1 < n1; i1 += 1)if ((\"a\" !== u1[i1].mode && \"n\" !== u1[i1].mode || u1[i1].inv || 100 !== u1[i1].o.k || u1[i1].o.x) && (g1 = \"mask\", v1 = \"mask\"), \"s\" !== u1[i1].mode && \"i\" !== u1[i1].mode || 0 !== d1 ? l1 = null : ((l1 = createNS(\"rect\")).setAttribute(\"fill\", \"#ffffff\"), l1.setAttribute(\"width\", this.element.comp.data.w || 0), l1.setAttribute(\"height\", this.element.comp.data.h || 0), m1.push(l1)), s1 = createNS(\"path\"), \"n\" === u1[i1].mode) this.viewData[i1] = {\n                op: PropertyFactory.getProp(this.element, u1[i1].o, 0, .01, this.element),\n                prop: ShapePropertyFactory.getShapeProp(this.element, u1[i1], 3),\n                elem: s1,\n                lastPath: \"\"\n            }, a1.appendChild(s1);\n            else {\n                var b1;\n                if (d1 += 1, s1.setAttribute(\"fill\", \"s\" === u1[i1].mode ? \"#000000\" : \"#ffffff\"), s1.setAttribute(\"clip-rule\", \"nonzero\"), 0 !== u1[i1].x.k ? (g1 = \"mask\", v1 = \"mask\", f1 = PropertyFactory.getProp(this.element, u1[i1].x, 0, null, this.element), b1 = createElementID(), (p1 = createNS(\"filter\")).setAttribute(\"id\", b1), (c1 = createNS(\"feMorphology\")).setAttribute(\"operator\", \"erode\"), c1.setAttribute(\"in\", \"SourceGraphic\"), c1.setAttribute(\"radius\", \"0\"), p1.appendChild(c1), a1.appendChild(p1), s1.setAttribute(\"stroke\", \"s\" === u1[i1].mode ? \"#000000\" : \"#ffffff\")) : (c1 = null, f1 = null), this.storedData[i1] = {\n                    elem: s1,\n                    x: f1,\n                    expan: c1,\n                    lastPath: \"\",\n                    lastOperator: \"\",\n                    filterId: b1,\n                    lastRadius: 0\n                }, \"i\" === u1[i1].mode) {\n                    h1 = m1.length;\n                    var _1 = createNS(\"g\");\n                    for(o1 = 0; o1 < h1; o1 += 1)_1.appendChild(m1[o1]);\n                    var P1 = createNS(\"mask\");\n                    P1.setAttribute(\"mask-type\", \"alpha\"), P1.setAttribute(\"id\", y1 + \"_\" + d1), P1.appendChild(s1), a1.appendChild(P1), _1.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + y1 + \"_\" + d1 + \")\"), m1.length = 0, m1.push(_1);\n                } else m1.push(s1);\n                u1[i1].inv && !this.solidPath && (this.solidPath = this.createLayerSolidPath()), this.viewData[i1] = {\n                    elem: s1,\n                    lastPath: \"\",\n                    op: PropertyFactory.getProp(this.element, u1[i1].o, 0, .01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, u1[i1], 3),\n                    invRect: l1\n                }, this.viewData[i1].prop.k || this.drawPath(u1[i1], this.viewData[i1].prop.v, this.viewData[i1]);\n            }\n            for(this.maskElement = createNS(g1), n1 = m1.length, i1 = 0; i1 < n1; i1 += 1)this.maskElement.appendChild(m1[i1]);\n            d1 > 0 && (this.maskElement.setAttribute(\"id\", y1), this.element.maskedElement.setAttribute(v1, \"url(\" + getLocationHref() + \"#\" + y1 + \")\"), a1.appendChild(this.maskElement)), this.viewData.length && this.element.addRenderableComponent(this);\n        }\n        TransformElement.prototype = {\n            initTransform: function() {\n                var t1 = new Matrix;\n                this.finalTransform = {\n                    mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {\n                        o: 0\n                    },\n                    _matMdf: !1,\n                    _localMatMdf: !1,\n                    _opMdf: !1,\n                    mat: t1,\n                    localMat: t1,\n                    localOpacity: 1\n                }, this.data.ao && (this.finalTransform.mProp.autoOriented = !0), this.data.ty;\n            },\n            renderTransform: function() {\n                if (this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame, this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame, this.hierarchy) {\n                    var t1, e1 = this.finalTransform.mat, r1 = 0, i1 = this.hierarchy.length;\n                    if (!this.finalTransform._matMdf) for(; r1 < i1;){\n                        if (this.hierarchy[r1].finalTransform.mProp._mdf) {\n                            this.finalTransform._matMdf = !0;\n                            break;\n                        }\n                        r1 += 1;\n                    }\n                    if (this.finalTransform._matMdf) for(t1 = this.finalTransform.mProp.v.props, e1.cloneFromProps(t1), r1 = 0; r1 < i1; r1 += 1)e1.multiply(this.hierarchy[r1].finalTransform.mProp.v);\n                }\n                this.finalTransform._matMdf && (this.finalTransform._localMatMdf = this.finalTransform._matMdf), this.finalTransform._opMdf && (this.finalTransform.localOpacity = this.finalTransform.mProp.o.v);\n            },\n            renderLocalTransform: function() {\n                if (this.localTransforms) {\n                    var t1 = 0, e1 = this.localTransforms.length;\n                    if (this.finalTransform._localMatMdf = this.finalTransform._matMdf, !this.finalTransform._localMatMdf || !this.finalTransform._opMdf) for(; t1 < e1;)this.localTransforms[t1]._mdf && (this.finalTransform._localMatMdf = !0), this.localTransforms[t1]._opMdf && !this.finalTransform._opMdf && (this.finalTransform.localOpacity = this.finalTransform.mProp.o.v, this.finalTransform._opMdf = !0), t1 += 1;\n                    if (this.finalTransform._localMatMdf) {\n                        var r1 = this.finalTransform.localMat;\n                        for(this.localTransforms[0].matrix.clone(r1), t1 = 1; t1 < e1; t1 += 1){\n                            var i1 = this.localTransforms[t1].matrix;\n                            r1.multiply(i1);\n                        }\n                        r1.multiply(this.finalTransform.mat);\n                    }\n                    if (this.finalTransform._opMdf) {\n                        var s1 = this.finalTransform.localOpacity;\n                        for(t1 = 0; t1 < e1; t1 += 1)s1 *= .01 * this.localTransforms[t1].opacity;\n                        this.finalTransform.localOpacity = s1;\n                    }\n                }\n            },\n            searchEffectTransforms: function() {\n                if (this.renderableEffectsManager) {\n                    var t1 = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n                    if (t1.length) {\n                        this.localTransforms = [], this.finalTransform.localMat = new Matrix;\n                        var e1 = 0, r1 = t1.length;\n                        for(e1 = 0; e1 < r1; e1 += 1)this.localTransforms.push(t1[e1]);\n                    }\n                }\n            },\n            globalToLocal: function(t1) {\n                var e1 = [];\n                e1.push(this.finalTransform);\n                for(var r1, i1 = !0, s1 = this.comp; i1;)s1.finalTransform ? (s1.data.hasMask && e1.splice(0, 0, s1.finalTransform), s1 = s1.comp) : i1 = !1;\n                var a1, n1 = e1.length;\n                for(r1 = 0; r1 < n1; r1 += 1)a1 = e1[r1].mat.applyToPointArray(0, 0, 0), t1 = [\n                    t1[0] - a1[0],\n                    t1[1] - a1[1],\n                    0\n                ];\n                return t1;\n            },\n            mHelper: new Matrix\n        }, MaskElement.prototype.getMaskProperty = function(t1) {\n            return this.viewData[t1].prop;\n        }, MaskElement.prototype.renderFrame = function(t1) {\n            var e1, r1 = this.element.finalTransform.mat, i1 = this.masksProperties.length;\n            for(e1 = 0; e1 < i1; e1 += 1)if ((this.viewData[e1].prop._mdf || t1) && this.drawPath(this.masksProperties[e1], this.viewData[e1].prop.v, this.viewData[e1]), (this.viewData[e1].op._mdf || t1) && this.viewData[e1].elem.setAttribute(\"fill-opacity\", this.viewData[e1].op.v), \"n\" !== this.masksProperties[e1].mode && (this.viewData[e1].invRect && (this.element.finalTransform.mProp._mdf || t1) && this.viewData[e1].invRect.setAttribute(\"transform\", r1.getInverseMatrix().to2dCSS()), this.storedData[e1].x && (this.storedData[e1].x._mdf || t1))) {\n                var s1 = this.storedData[e1].expan;\n                this.storedData[e1].x.v < 0 ? (\"erode\" !== this.storedData[e1].lastOperator && (this.storedData[e1].lastOperator = \"erode\", this.storedData[e1].elem.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + this.storedData[e1].filterId + \")\")), s1.setAttribute(\"radius\", -this.storedData[e1].x.v)) : (\"dilate\" !== this.storedData[e1].lastOperator && (this.storedData[e1].lastOperator = \"dilate\", this.storedData[e1].elem.setAttribute(\"filter\", null)), this.storedData[e1].elem.setAttribute(\"stroke-width\", 2 * this.storedData[e1].x.v));\n            }\n        }, MaskElement.prototype.getMaskelement = function() {\n            return this.maskElement;\n        }, MaskElement.prototype.createLayerSolidPath = function() {\n            var t1 = \"M0,0 \";\n            return t1 += \" h\" + this.globalData.compSize.w, t1 += \" v\" + this.globalData.compSize.h, t1 += \" h-\" + this.globalData.compSize.w, t1 += \" v-\" + this.globalData.compSize.h + \" \";\n        }, MaskElement.prototype.drawPath = function(t1, e1, r1) {\n            var i1, s1, a1 = \" M\" + e1.v[0][0] + \",\" + e1.v[0][1];\n            for(s1 = e1._length, i1 = 1; i1 < s1; i1 += 1)a1 += \" C\" + e1.o[i1 - 1][0] + \",\" + e1.o[i1 - 1][1] + \" \" + e1.i[i1][0] + \",\" + e1.i[i1][1] + \" \" + e1.v[i1][0] + \",\" + e1.v[i1][1];\n            if (e1.c && s1 > 1 && (a1 += \" C\" + e1.o[i1 - 1][0] + \",\" + e1.o[i1 - 1][1] + \" \" + e1.i[0][0] + \",\" + e1.i[0][1] + \" \" + e1.v[0][0] + \",\" + e1.v[0][1]), r1.lastPath !== a1) {\n                var n1 = \"\";\n                r1.elem && (e1.c && (n1 = t1.inv ? this.solidPath + a1 : a1), r1.elem.setAttribute(\"d\", n1)), r1.lastPath = a1;\n            }\n        }, MaskElement.prototype.destroy = function() {\n            this.element = null, this.globalData = null, this.maskElement = null, this.data = null, this.masksProperties = null;\n        };\n        var filtersFactory = function() {\n            var t1 = {\n                createFilter: function(t1, e1) {\n                    var r1 = createNS(\"filter\");\n                    return r1.setAttribute(\"id\", t1), !0 !== e1 && (r1.setAttribute(\"filterUnits\", \"objectBoundingBox\"), r1.setAttribute(\"x\", \"0%\"), r1.setAttribute(\"y\", \"0%\"), r1.setAttribute(\"width\", \"100%\"), r1.setAttribute(\"height\", \"100%\")), r1;\n                },\n                createAlphaToLuminanceFilter: function() {\n                    var t1 = createNS(\"feColorMatrix\");\n                    return t1.setAttribute(\"type\", \"matrix\"), t1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), t1.setAttribute(\"values\", \"0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1\"), t1;\n                }\n            };\n            return t1;\n        }(), featureSupport = function() {\n            var t1 = {\n                maskType: !0,\n                svgLumaHidden: !0,\n                offscreenCanvas: \"undefined\" != typeof OffscreenCanvas\n            };\n            return (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\\/\\d./i.test(navigator.userAgent)) && (t1.maskType = !1), /firefox/i.test(navigator.userAgent) && (t1.svgLumaHidden = !1), t1;\n        }(), registeredEffects$1 = {}, idPrefix = \"filter_result_\";\n        function SVGEffects(t1) {\n            var e1, r1, i1 = \"SourceGraphic\", s1 = t1.data.ef ? t1.data.ef.length : 0, a1 = createElementID(), n1 = filtersFactory.createFilter(a1, !0), o1 = 0;\n            for(this.filters = [], e1 = 0; e1 < s1; e1 += 1){\n                r1 = null;\n                var h1 = t1.data.ef[e1].ty;\n                registeredEffects$1[h1] && (r1 = new (0, registeredEffects$1[h1].effect)(n1, t1.effectsManager.effectElements[e1], t1, idPrefix + o1, i1), i1 = idPrefix + o1, registeredEffects$1[h1].countsAsEffect && (o1 += 1)), r1 && this.filters.push(r1);\n            }\n            o1 && (t1.globalData.defs.appendChild(n1), t1.layerElement.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + a1 + \")\")), this.filters.length && t1.addRenderableComponent(this);\n        }\n        function registerEffect$1(t1, e1, r1) {\n            registeredEffects$1[t1] = {\n                effect: e1,\n                countsAsEffect: r1\n            };\n        }\n        function SVGBaseElement() {}\n        function HierarchyElement() {}\n        function RenderableDOMElement() {}\n        function IImageElement(t1, e1, r1) {\n            this.assetData = e1.getAssetData(t1.refId), this.assetData && this.assetData.sid && (this.assetData = e1.slotManager.getProp(this.assetData)), this.initElement(t1, e1, r1), this.sourceRect = {\n                top: 0,\n                left: 0,\n                width: this.assetData.w,\n                height: this.assetData.h\n            };\n        }\n        function ProcessedElement(t1, e1) {\n            this.elem = t1, this.pos = e1;\n        }\n        function IShapeElement() {}\n        SVGEffects.prototype.renderFrame = function(t1) {\n            var e1, r1 = this.filters.length;\n            for(e1 = 0; e1 < r1; e1 += 1)this.filters[e1].renderFrame(t1);\n        }, SVGEffects.prototype.getEffects = function(t1) {\n            var e1, r1 = this.filters.length, i1 = [];\n            for(e1 = 0; e1 < r1; e1 += 1)this.filters[e1].type === t1 && i1.push(this.filters[e1]);\n            return i1;\n        }, SVGBaseElement.prototype = {\n            initRendererElement: function() {\n                this.layerElement = createNS(\"g\");\n            },\n            createContainerElements: function() {\n                this.matteElement = createNS(\"g\"), this.transformedElement = this.layerElement, this.maskedElement = this.layerElement, this._sizeChanged = !1;\n                var t1 = null;\n                if (this.data.td) {\n                    this.matteMasks = {};\n                    var e1 = createNS(\"g\");\n                    e1.setAttribute(\"id\", this.layerId), e1.appendChild(this.layerElement), t1 = e1, this.globalData.defs.appendChild(e1);\n                } else this.data.tt ? (this.matteElement.appendChild(this.layerElement), t1 = this.matteElement, this.baseElement = this.matteElement) : this.baseElement = this.layerElement;\n                if (this.data.ln && this.layerElement.setAttribute(\"id\", this.data.ln), this.data.cl && this.layerElement.setAttribute(\"class\", this.data.cl), 0 === this.data.ty && !this.data.hd) {\n                    var r1 = createNS(\"clipPath\"), i1 = createNS(\"path\");\n                    i1.setAttribute(\"d\", \"M0,0 L\" + this.data.w + \",0 L\" + this.data.w + \",\" + this.data.h + \" L0,\" + this.data.h + \"z\");\n                    var s1 = createElementID();\n                    if (r1.setAttribute(\"id\", s1), r1.appendChild(i1), this.globalData.defs.appendChild(r1), this.checkMasks()) {\n                        var a1 = createNS(\"g\");\n                        a1.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + s1 + \")\"), a1.appendChild(this.layerElement), this.transformedElement = a1, t1 ? t1.appendChild(this.transformedElement) : this.baseElement = this.transformedElement;\n                    } else this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + s1 + \")\");\n                }\n                0 !== this.data.bm && this.setBlendMode();\n            },\n            renderElement: function() {\n                this.finalTransform._localMatMdf && this.transformedElement.setAttribute(\"transform\", this.finalTransform.localMat.to2dCSS()), this.finalTransform._opMdf && this.transformedElement.setAttribute(\"opacity\", this.finalTransform.localOpacity);\n            },\n            destroyBaseElement: function() {\n                this.layerElement = null, this.matteElement = null, this.maskManager.destroy();\n            },\n            getBaseElement: function() {\n                return this.data.hd ? null : this.baseElement;\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new MaskElement(this.data, this, this.globalData), this.renderableEffectsManager = new SVGEffects(this), this.searchEffectTransforms();\n            },\n            getMatte: function(t1) {\n                if (this.matteMasks || (this.matteMasks = {}), !this.matteMasks[t1]) {\n                    var e1, r1, i1, s1, a1 = this.layerId + \"_\" + t1;\n                    if (1 === t1 || 3 === t1) {\n                        var n1 = createNS(\"mask\");\n                        n1.setAttribute(\"id\", a1), n1.setAttribute(\"mask-type\", 3 === t1 ? \"luminance\" : \"alpha\"), (i1 = createNS(\"use\")).setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId), n1.appendChild(i1), this.globalData.defs.appendChild(n1), featureSupport.maskType || 1 !== t1 || (n1.setAttribute(\"mask-type\", \"luminance\"), e1 = createElementID(), r1 = filtersFactory.createFilter(e1), this.globalData.defs.appendChild(r1), r1.appendChild(filtersFactory.createAlphaToLuminanceFilter()), (s1 = createNS(\"g\")).appendChild(i1), n1.appendChild(s1), s1.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + e1 + \")\"));\n                    } else if (2 === t1) {\n                        var o1 = createNS(\"mask\");\n                        o1.setAttribute(\"id\", a1), o1.setAttribute(\"mask-type\", \"alpha\");\n                        var h1 = createNS(\"g\");\n                        o1.appendChild(h1), e1 = createElementID(), r1 = filtersFactory.createFilter(e1);\n                        var l1 = createNS(\"feComponentTransfer\");\n                        l1.setAttribute(\"in\", \"SourceGraphic\"), r1.appendChild(l1);\n                        var p1 = createNS(\"feFuncA\");\n                        p1.setAttribute(\"type\", \"table\"), p1.setAttribute(\"tableValues\", \"1.0 0.0\"), l1.appendChild(p1), this.globalData.defs.appendChild(r1);\n                        var c1 = createNS(\"rect\");\n                        c1.setAttribute(\"width\", this.comp.data.w), c1.setAttribute(\"height\", this.comp.data.h), c1.setAttribute(\"x\", \"0\"), c1.setAttribute(\"y\", \"0\"), c1.setAttribute(\"fill\", \"#ffffff\"), c1.setAttribute(\"opacity\", \"0\"), h1.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + e1 + \")\"), h1.appendChild(c1), (i1 = createNS(\"use\")).setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId), h1.appendChild(i1), featureSupport.maskType || (o1.setAttribute(\"mask-type\", \"luminance\"), r1.appendChild(filtersFactory.createAlphaToLuminanceFilter()), s1 = createNS(\"g\"), h1.appendChild(c1), s1.appendChild(this.layerElement), h1.appendChild(s1)), this.globalData.defs.appendChild(o1);\n                    }\n                    this.matteMasks[t1] = a1;\n                }\n                return this.matteMasks[t1];\n            },\n            setMatte: function(t1) {\n                this.matteElement && this.matteElement.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + t1 + \")\");\n            }\n        }, HierarchyElement.prototype = {\n            initHierarchy: function() {\n                this.hierarchy = [], this._isParent = !1, this.checkParenting();\n            },\n            setHierarchy: function(t1) {\n                this.hierarchy = t1;\n            },\n            setAsParent: function() {\n                this._isParent = !0;\n            },\n            checkParenting: function() {\n                void 0 !== this.data.parent && this.comp.buildElementParenting(this, this.data.parent, []);\n            }\n        }, extendPrototype([\n            RenderableElement,\n            createProxyFunction({\n                initElement: function(t1, e1, r1) {\n                    this.initFrame(), this.initBaseData(t1, e1, r1), this.initTransform(t1, e1, r1), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide();\n                },\n                hide: function() {\n                    this.hidden || this.isInRange && !this.isTransparent || ((this.baseElement || this.layerElement).style.display = \"none\", this.hidden = !0);\n                },\n                show: function() {\n                    this.isInRange && !this.isTransparent && (this.data.hd || ((this.baseElement || this.layerElement).style.display = \"block\"), this.hidden = !1, this._isFirstFrame = !0);\n                },\n                renderFrame: function() {\n                    this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderLocalTransform(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));\n                },\n                renderInnerContent: function() {},\n                prepareFrame: function(t1) {\n                    this._mdf = !1, this.prepareRenderableFrame(t1), this.prepareProperties(t1, this.isInRange), this.checkTransparency();\n                },\n                destroy: function() {\n                    this.innerElem = null, this.destroyBaseElement();\n                }\n            })\n        ], RenderableDOMElement), extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], IImageElement), IImageElement.prototype.createContent = function() {\n            var t1 = this.globalData.getAssetsPath(this.assetData);\n            this.innerElem = createNS(\"image\"), this.innerElem.setAttribute(\"width\", this.assetData.w + \"px\"), this.innerElem.setAttribute(\"height\", this.assetData.h + \"px\"), this.innerElem.setAttribute(\"preserveAspectRatio\", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio), this.innerElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", t1), this.layerElement.appendChild(this.innerElem);\n        }, IImageElement.prototype.sourceRectAtTime = function() {\n            return this.sourceRect;\n        }, IShapeElement.prototype = {\n            addShapeToModifiers: function(t1) {\n                var e1, r1 = this.shapeModifiers.length;\n                for(e1 = 0; e1 < r1; e1 += 1)this.shapeModifiers[e1].addShape(t1);\n            },\n            isShapeInAnimatedModifiers: function(t1) {\n                for(var e1 = this.shapeModifiers.length; 0 < e1;)if (this.shapeModifiers[0].isAnimatedWithShape(t1)) return !0;\n                return !1;\n            },\n            renderModifiers: function() {\n                if (this.shapeModifiers.length) {\n                    var t1, e1 = this.shapes.length;\n                    for(t1 = 0; t1 < e1; t1 += 1)this.shapes[t1].sh.reset();\n                    for(t1 = (e1 = this.shapeModifiers.length) - 1; t1 >= 0 && !this.shapeModifiers[t1].processShapes(this._isFirstFrame); t1 -= 1);\n                }\n            },\n            searchProcessedElement: function(t1) {\n                for(var e1 = this.processedElements, r1 = 0, i1 = e1.length; r1 < i1;){\n                    if (e1[r1].elem === t1) return e1[r1].pos;\n                    r1 += 1;\n                }\n                return 0;\n            },\n            addProcessedElement: function(t1, e1) {\n                for(var r1 = this.processedElements, i1 = r1.length; i1;)if (r1[i1 -= 1].elem === t1) return void (r1[i1].pos = e1);\n                r1.push(new ProcessedElement(t1, e1));\n            },\n            prepareFrame: function(t1) {\n                this.prepareRenderableFrame(t1), this.prepareProperties(t1, this.isInRange);\n            }\n        };\n        var lineCapEnum = {\n            1: \"butt\",\n            2: \"round\",\n            3: \"square\"\n        }, lineJoinEnum = {\n            1: \"miter\",\n            2: \"round\",\n            3: \"bevel\"\n        };\n        function SVGShapeData(t1, e1, r1) {\n            this.caches = [], this.styles = [], this.transformers = t1, this.lStr = \"\", this.sh = r1, this.lvl = e1, this._isAnimated = !!r1.k;\n            for(var i1 = 0, s1 = t1.length; i1 < s1;){\n                if (t1[i1].mProps.dynamicProperties.length) {\n                    this._isAnimated = !0;\n                    break;\n                }\n                i1 += 1;\n            }\n        }\n        function SVGStyleData(t1, e1) {\n            this.data = t1, this.type = t1.ty, this.d = \"\", this.lvl = e1, this._mdf = !1, this.closed = !0 === t1.hd, this.pElem = createNS(\"path\"), this.msElem = null;\n        }\n        function DashProperty(t1, e1, r1, i1) {\n            var s1;\n            this.elem = t1, this.frameId = -1, this.dataProps = createSizedArray(e1.length), this.renderer = r1, this.k = !1, this.dashStr = \"\", this.dashArray = createTypedArray(\"float32\", e1.length ? e1.length - 1 : 0), this.dashoffset = createTypedArray(\"float32\", 1), this.initDynamicPropertyContainer(i1);\n            var a1, n1 = e1.length || 0;\n            for(s1 = 0; s1 < n1; s1 += 1)a1 = PropertyFactory.getProp(t1, e1[s1].v, 0, 0, this), this.k = a1.k || this.k, this.dataProps[s1] = {\n                n: e1[s1].n,\n                p: a1\n            };\n            this.k || this.getValue(!0), this._isAnimated = this.k;\n        }\n        function SVGStrokeStyleData(t1, e1, r1) {\n            this.initDynamicPropertyContainer(t1), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t1, e1.o, 0, .01, this), this.w = PropertyFactory.getProp(t1, e1.w, 0, null, this), this.d = new DashProperty(t1, e1.d || {}, \"svg\", this), this.c = PropertyFactory.getProp(t1, e1.c, 1, 255, this), this.style = r1, this._isAnimated = !!this._isAnimated;\n        }\n        function SVGFillStyleData(t1, e1, r1) {\n            this.initDynamicPropertyContainer(t1), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t1, e1.o, 0, .01, this), this.c = PropertyFactory.getProp(t1, e1.c, 1, 255, this), this.style = r1;\n        }\n        function SVGNoStyleData(t1, e1, r1) {\n            this.initDynamicPropertyContainer(t1), this.getValue = this.iterateDynamicProperties, this.style = r1;\n        }\n        function GradientProperty(t1, e1, r1) {\n            this.data = e1, this.c = createTypedArray(\"uint8c\", 4 * e1.p);\n            var i1 = e1.k.k[0].s ? e1.k.k[0].s.length - 4 * e1.p : e1.k.k.length - 4 * e1.p;\n            this.o = createTypedArray(\"float32\", i1), this._cmdf = !1, this._omdf = !1, this._collapsable = this.checkCollapsable(), this._hasOpacity = i1, this.initDynamicPropertyContainer(r1), this.prop = PropertyFactory.getProp(t1, e1.k, 1, null, this), this.k = this.prop.k, this.getValue(!0);\n        }\n        function SVGGradientFillStyleData(t1, e1, r1) {\n            this.initDynamicPropertyContainer(t1), this.getValue = this.iterateDynamicProperties, this.initGradientData(t1, e1, r1);\n        }\n        function SVGGradientStrokeStyleData(t1, e1, r1) {\n            this.initDynamicPropertyContainer(t1), this.getValue = this.iterateDynamicProperties, this.w = PropertyFactory.getProp(t1, e1.w, 0, null, this), this.d = new DashProperty(t1, e1.d || {}, \"svg\", this), this.initGradientData(t1, e1, r1), this._isAnimated = !!this._isAnimated;\n        }\n        function ShapeGroupData() {\n            this.it = [], this.prevViewData = [], this.gr = createNS(\"g\");\n        }\n        function SVGTransformData(t1, e1, r1) {\n            this.transform = {\n                mProps: t1,\n                op: e1,\n                container: r1\n            }, this.elements = [], this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;\n        }\n        SVGShapeData.prototype.setAsAnimated = function() {\n            this._isAnimated = !0;\n        }, SVGStyleData.prototype.reset = function() {\n            this.d = \"\", this._mdf = !1;\n        }, DashProperty.prototype.getValue = function(t1) {\n            if ((this.elem.globalData.frameId !== this.frameId || t1) && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf = this._mdf || t1, this._mdf)) {\n                var e1 = 0, r1 = this.dataProps.length;\n                for(\"svg\" === this.renderer && (this.dashStr = \"\"), e1 = 0; e1 < r1; e1 += 1)\"o\" !== this.dataProps[e1].n ? \"svg\" === this.renderer ? this.dashStr += \" \" + this.dataProps[e1].p.v : this.dashArray[e1] = this.dataProps[e1].p.v : this.dashoffset[0] = this.dataProps[e1].p.v;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], DashProperty), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGStrokeStyleData), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGFillStyleData), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGNoStyleData), GradientProperty.prototype.comparePoints = function(t1, e1) {\n            for(var r1 = 0, i1 = this.o.length / 2; r1 < i1;){\n                if (Math.abs(t1[4 * r1] - t1[4 * e1 + 2 * r1]) > .01) return !1;\n                r1 += 1;\n            }\n            return !0;\n        }, GradientProperty.prototype.checkCollapsable = function() {\n            if (this.o.length / 2 != this.c.length / 4) return !1;\n            if (this.data.k.k[0].s) for(var t1 = 0, e1 = this.data.k.k.length; t1 < e1;){\n                if (!this.comparePoints(this.data.k.k[t1].s, this.data.p)) return !1;\n                t1 += 1;\n            }\n            else if (!this.comparePoints(this.data.k.k, this.data.p)) return !1;\n            return !0;\n        }, GradientProperty.prototype.getValue = function(t1) {\n            if (this.prop.getValue(), this._mdf = !1, this._cmdf = !1, this._omdf = !1, this.prop._mdf || t1) {\n                var e1, r1, i1, s1 = 4 * this.data.p;\n                for(e1 = 0; e1 < s1; e1 += 1)r1 = e1 % 4 == 0 ? 100 : 255, i1 = Math.round(this.prop.v[e1] * r1), this.c[e1] !== i1 && (this.c[e1] = i1, this._cmdf = !t1);\n                if (this.o.length) for(s1 = this.prop.v.length, e1 = 4 * this.data.p; e1 < s1; e1 += 1)r1 = e1 % 2 == 0 ? 100 : 1, i1 = e1 % 2 == 0 ? Math.round(100 * this.prop.v[e1]) : this.prop.v[e1], this.o[e1 - 4 * this.data.p] !== i1 && (this.o[e1 - 4 * this.data.p] = i1, this._omdf = !t1);\n                this._mdf = !t1;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], GradientProperty), SVGGradientFillStyleData.prototype.initGradientData = function(t1, e1, r1) {\n            this.o = PropertyFactory.getProp(t1, e1.o, 0, .01, this), this.s = PropertyFactory.getProp(t1, e1.s, 1, null, this), this.e = PropertyFactory.getProp(t1, e1.e, 1, null, this), this.h = PropertyFactory.getProp(t1, e1.h || {\n                k: 0\n            }, 0, .01, this), this.a = PropertyFactory.getProp(t1, e1.a || {\n                k: 0\n            }, 0, degToRads, this), this.g = new GradientProperty(t1, e1.g, this), this.style = r1, this.stops = [], this.setGradientData(r1.pElem, e1), this.setGradientOpacity(e1, r1), this._isAnimated = !!this._isAnimated;\n        }, SVGGradientFillStyleData.prototype.setGradientData = function(t1, e1) {\n            var r1 = createElementID(), i1 = createNS(1 === e1.t ? \"linearGradient\" : \"radialGradient\");\n            i1.setAttribute(\"id\", r1), i1.setAttribute(\"spreadMethod\", \"pad\"), i1.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n            var s1, a1, n1, o1 = [];\n            for(n1 = 4 * e1.g.p, a1 = 0; a1 < n1; a1 += 4)s1 = createNS(\"stop\"), i1.appendChild(s1), o1.push(s1);\n            t1.setAttribute(\"gf\" === e1.ty ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + r1 + \")\"), this.gf = i1, this.cst = o1;\n        }, SVGGradientFillStyleData.prototype.setGradientOpacity = function(t1, e1) {\n            if (this.g._hasOpacity && !this.g._collapsable) {\n                var r1, i1, s1, a1 = createNS(\"mask\"), n1 = createNS(\"path\");\n                a1.appendChild(n1);\n                var o1 = createElementID(), h1 = createElementID();\n                a1.setAttribute(\"id\", h1);\n                var l1 = createNS(1 === t1.t ? \"linearGradient\" : \"radialGradient\");\n                l1.setAttribute(\"id\", o1), l1.setAttribute(\"spreadMethod\", \"pad\"), l1.setAttribute(\"gradientUnits\", \"userSpaceOnUse\"), s1 = t1.g.k.k[0].s ? t1.g.k.k[0].s.length : t1.g.k.k.length;\n                var p1 = this.stops;\n                for(i1 = 4 * t1.g.p; i1 < s1; i1 += 2)(r1 = createNS(\"stop\")).setAttribute(\"stop-color\", \"rgb(255,255,255)\"), l1.appendChild(r1), p1.push(r1);\n                n1.setAttribute(\"gf\" === t1.ty ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + o1 + \")\"), \"gs\" === t1.ty && (n1.setAttribute(\"stroke-linecap\", lineCapEnum[t1.lc || 2]), n1.setAttribute(\"stroke-linejoin\", lineJoinEnum[t1.lj || 2]), 1 === t1.lj && n1.setAttribute(\"stroke-miterlimit\", t1.ml)), this.of = l1, this.ms = a1, this.ost = p1, this.maskId = h1, e1.msElem = n1;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], SVGGradientFillStyleData), extendPrototype([\n            SVGGradientFillStyleData,\n            DynamicPropertyContainer\n        ], SVGGradientStrokeStyleData);\n        var buildShapeString = function(t1, e1, r1, i1) {\n            if (0 === e1) return \"\";\n            var s1, a1 = t1.o, n1 = t1.i, o1 = t1.v, h1 = \" M\" + i1.applyToPointStringified(o1[0][0], o1[0][1]);\n            for(s1 = 1; s1 < e1; s1 += 1)h1 += \" C\" + i1.applyToPointStringified(a1[s1 - 1][0], a1[s1 - 1][1]) + \" \" + i1.applyToPointStringified(n1[s1][0], n1[s1][1]) + \" \" + i1.applyToPointStringified(o1[s1][0], o1[s1][1]);\n            return r1 && e1 && (h1 += \" C\" + i1.applyToPointStringified(a1[s1 - 1][0], a1[s1 - 1][1]) + \" \" + i1.applyToPointStringified(n1[0][0], n1[0][1]) + \" \" + i1.applyToPointStringified(o1[0][0], o1[0][1]), h1 += \"z\"), h1;\n        }, SVGElementsRenderer = function() {\n            var t1 = new Matrix, e1 = new Matrix;\n            function r1(t1, e1, r1) {\n                (r1 || e1.transform.op._mdf) && e1.transform.container.setAttribute(\"opacity\", e1.transform.op.v), (r1 || e1.transform.mProps._mdf) && e1.transform.container.setAttribute(\"transform\", e1.transform.mProps.v.to2dCSS());\n            }\n            function i1() {}\n            function s1(r1, i1, s1) {\n                var a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1 = i1.styles.length, y1 = i1.lvl;\n                for(p1 = 0; p1 < m1; p1 += 1){\n                    if (h1 = i1.sh._mdf || s1, i1.styles[p1].lvl < y1) {\n                        for(f1 = e1.reset(), u1 = y1 - i1.styles[p1].lvl, d1 = i1.transformers.length - 1; !h1 && u1 > 0;)h1 = i1.transformers[d1].mProps._mdf || h1, u1 -= 1, d1 -= 1;\n                        if (h1) for(u1 = y1 - i1.styles[p1].lvl, d1 = i1.transformers.length - 1; u1 > 0;)f1.multiply(i1.transformers[d1].mProps.v), u1 -= 1, d1 -= 1;\n                    } else f1 = t1;\n                    if (n1 = (c1 = i1.sh.paths)._length, h1) {\n                        for(o1 = \"\", a1 = 0; a1 < n1; a1 += 1)(l1 = c1.shapes[a1]) && l1._length && (o1 += buildShapeString(l1, l1._length, l1.c, f1));\n                        i1.caches[p1] = o1;\n                    } else o1 = i1.caches[p1];\n                    i1.styles[p1].d += !0 === r1.hd ? \"\" : o1, i1.styles[p1]._mdf = h1 || i1.styles[p1]._mdf;\n                }\n            }\n            function a1(t1, e1, r1) {\n                var i1 = e1.style;\n                (e1.c._mdf || r1) && i1.pElem.setAttribute(\"fill\", \"rgb(\" + bmFloor(e1.c.v[0]) + \",\" + bmFloor(e1.c.v[1]) + \",\" + bmFloor(e1.c.v[2]) + \")\"), (e1.o._mdf || r1) && i1.pElem.setAttribute(\"fill-opacity\", e1.o.v);\n            }\n            function n1(t1, e1, r1) {\n                o1(t1, e1, r1), h1(0, e1, r1);\n            }\n            function o1(t1, e1, r1) {\n                var i1, s1, a1, n1, o1, h1 = e1.gf, l1 = e1.g._hasOpacity, p1 = e1.s.v, c1 = e1.e.v;\n                if (e1.o._mdf || r1) {\n                    var f1 = \"gf\" === t1.ty ? \"fill-opacity\" : \"stroke-opacity\";\n                    e1.style.pElem.setAttribute(f1, e1.o.v);\n                }\n                if (e1.s._mdf || r1) {\n                    var u1 = 1 === t1.t ? \"x1\" : \"cx\", d1 = \"x1\" === u1 ? \"y1\" : \"cy\";\n                    h1.setAttribute(u1, p1[0]), h1.setAttribute(d1, p1[1]), l1 && !e1.g._collapsable && (e1.of.setAttribute(u1, p1[0]), e1.of.setAttribute(d1, p1[1]));\n                }\n                if (e1.g._cmdf || r1) {\n                    i1 = e1.cst;\n                    var m1 = e1.g.c;\n                    for(a1 = i1.length, s1 = 0; s1 < a1; s1 += 1)(n1 = i1[s1]).setAttribute(\"offset\", m1[4 * s1] + \"%\"), n1.setAttribute(\"stop-color\", \"rgb(\" + m1[4 * s1 + 1] + \",\" + m1[4 * s1 + 2] + \",\" + m1[4 * s1 + 3] + \")\");\n                }\n                if (l1 && (e1.g._omdf || r1)) {\n                    var y1 = e1.g.o;\n                    for(a1 = (i1 = e1.g._collapsable ? e1.cst : e1.ost).length, s1 = 0; s1 < a1; s1 += 1)n1 = i1[s1], e1.g._collapsable || n1.setAttribute(\"offset\", y1[2 * s1] + \"%\"), n1.setAttribute(\"stop-opacity\", y1[2 * s1 + 1]);\n                }\n                if (1 === t1.t) (e1.e._mdf || r1) && (h1.setAttribute(\"x2\", c1[0]), h1.setAttribute(\"y2\", c1[1]), l1 && !e1.g._collapsable && (e1.of.setAttribute(\"x2\", c1[0]), e1.of.setAttribute(\"y2\", c1[1])));\n                else if ((e1.s._mdf || e1.e._mdf || r1) && (o1 = Math.sqrt(Math.pow(p1[0] - c1[0], 2) + Math.pow(p1[1] - c1[1], 2)), h1.setAttribute(\"r\", o1), l1 && !e1.g._collapsable && e1.of.setAttribute(\"r\", o1)), e1.e._mdf || e1.h._mdf || e1.a._mdf || r1) {\n                    o1 || (o1 = Math.sqrt(Math.pow(p1[0] - c1[0], 2) + Math.pow(p1[1] - c1[1], 2)));\n                    var g1 = Math.atan2(c1[1] - p1[1], c1[0] - p1[0]), v1 = e1.h.v;\n                    v1 >= 1 ? v1 = .99 : v1 <= -1 && (v1 = -.99);\n                    var b1 = o1 * v1, _1 = Math.cos(g1 + e1.a.v) * b1 + p1[0], P1 = Math.sin(g1 + e1.a.v) * b1 + p1[1];\n                    h1.setAttribute(\"fx\", _1), h1.setAttribute(\"fy\", P1), l1 && !e1.g._collapsable && (e1.of.setAttribute(\"fx\", _1), e1.of.setAttribute(\"fy\", P1));\n                }\n            }\n            function h1(t1, e1, r1) {\n                var i1 = e1.style, s1 = e1.d;\n                s1 && (s1._mdf || r1) && s1.dashStr && (i1.pElem.setAttribute(\"stroke-dasharray\", s1.dashStr), i1.pElem.setAttribute(\"stroke-dashoffset\", s1.dashoffset[0])), e1.c && (e1.c._mdf || r1) && i1.pElem.setAttribute(\"stroke\", \"rgb(\" + bmFloor(e1.c.v[0]) + \",\" + bmFloor(e1.c.v[1]) + \",\" + bmFloor(e1.c.v[2]) + \")\"), (e1.o._mdf || r1) && i1.pElem.setAttribute(\"stroke-opacity\", e1.o.v), (e1.w._mdf || r1) && (i1.pElem.setAttribute(\"stroke-width\", e1.w.v), i1.msElem && i1.msElem.setAttribute(\"stroke-width\", e1.w.v));\n            }\n            return {\n                createRenderFunction: function(t1) {\n                    switch(t1.ty){\n                        case \"fl\":\n                            return a1;\n                        case \"gf\":\n                            return o1;\n                        case \"gs\":\n                            return n1;\n                        case \"st\":\n                            return h1;\n                        case \"sh\":\n                        case \"el\":\n                        case \"rc\":\n                        case \"sr\":\n                            return s1;\n                        case \"tr\":\n                            return r1;\n                        case \"no\":\n                            return i1;\n                        default:\n                            return null;\n                    }\n                }\n            };\n        }();\n        function SVGShapeElement(t1, e1, r1) {\n            this.shapes = [], this.shapesData = t1.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.initElement(t1, e1, r1), this.prevViewData = [];\n        }\n        function LetterProps(t1, e1, r1, i1, s1, a1) {\n            this.o = t1, this.sw = e1, this.sc = r1, this.fc = i1, this.m = s1, this.p = a1, this._mdf = {\n                o: !0,\n                sw: !!e1,\n                sc: !!r1,\n                fc: !!i1,\n                m: !0,\n                p: !0\n            };\n        }\n        function TextProperty(t1, e1) {\n            this._frameId = initialDefaultFrame, this.pv = \"\", this.v = \"\", this.kf = !1, this._isFirstFrame = !0, this._mdf = !1, e1.d && e1.d.sid && (e1.d = t1.globalData.slotManager.getProp(e1.d)), this.data = e1, this.elem = t1, this.comp = this.elem.comp, this.keysIndex = 0, this.canResize = !1, this.minimumFontSize = 1, this.effectsSequence = [], this.currentData = {\n                ascent: 0,\n                boxWidth: this.defaultBoxWidth,\n                f: \"\",\n                fStyle: \"\",\n                fWeight: \"\",\n                fc: \"\",\n                j: \"\",\n                justifyOffset: \"\",\n                l: [],\n                lh: 0,\n                lineWidths: [],\n                ls: \"\",\n                of: \"\",\n                s: \"\",\n                sc: \"\",\n                sw: 0,\n                t: 0,\n                tr: 0,\n                sz: 0,\n                ps: null,\n                fillColorAnim: !1,\n                strokeColorAnim: !1,\n                strokeWidthAnim: !1,\n                yOffset: 0,\n                finalSize: 0,\n                finalText: [],\n                finalLineHeight: 0,\n                __complete: !1\n            }, this.copyData(this.currentData, this.data.d.k[0].s), this.searchProperty() || this.completeTextData(this.currentData);\n        }\n        extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            IShapeElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], SVGShapeElement), SVGShapeElement.prototype.initSecondaryElement = function() {}, SVGShapeElement.prototype.identityMatrix = new Matrix, SVGShapeElement.prototype.buildExpressionInterface = function() {}, SVGShapeElement.prototype.createContent = function() {\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes();\n        }, SVGShapeElement.prototype.filterUniqueShapes = function() {\n            var t1, e1, r1, i1, s1 = this.shapes.length, a1 = this.stylesList.length, n1 = [], o1 = !1;\n            for(r1 = 0; r1 < a1; r1 += 1){\n                for(i1 = this.stylesList[r1], o1 = !1, n1.length = 0, t1 = 0; t1 < s1; t1 += 1)-1 !== (e1 = this.shapes[t1]).styles.indexOf(i1) && (n1.push(e1), o1 = e1._isAnimated || o1);\n                n1.length > 1 && o1 && this.setShapesAsAnimated(n1);\n            }\n        }, SVGShapeElement.prototype.setShapesAsAnimated = function(t1) {\n            var e1, r1 = t1.length;\n            for(e1 = 0; e1 < r1; e1 += 1)t1[e1].setAsAnimated();\n        }, SVGShapeElement.prototype.createStyleElement = function(t1, e1) {\n            var r1, i1 = new SVGStyleData(t1, e1), s1 = i1.pElem;\n            return \"st\" === t1.ty ? r1 = new SVGStrokeStyleData(this, t1, i1) : \"fl\" === t1.ty ? r1 = new SVGFillStyleData(this, t1, i1) : \"gf\" === t1.ty || \"gs\" === t1.ty ? (r1 = new (\"gf\" === t1.ty ? SVGGradientFillStyleData : SVGGradientStrokeStyleData)(this, t1, i1), this.globalData.defs.appendChild(r1.gf), r1.maskId && (this.globalData.defs.appendChild(r1.ms), this.globalData.defs.appendChild(r1.of), s1.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + r1.maskId + \")\"))) : \"no\" === t1.ty && (r1 = new SVGNoStyleData(this, t1, i1)), \"st\" !== t1.ty && \"gs\" !== t1.ty || (s1.setAttribute(\"stroke-linecap\", lineCapEnum[t1.lc || 2]), s1.setAttribute(\"stroke-linejoin\", lineJoinEnum[t1.lj || 2]), s1.setAttribute(\"fill-opacity\", \"0\"), 1 === t1.lj && s1.setAttribute(\"stroke-miterlimit\", t1.ml)), 2 === t1.r && s1.setAttribute(\"fill-rule\", \"evenodd\"), t1.ln && s1.setAttribute(\"id\", t1.ln), t1.cl && s1.setAttribute(\"class\", t1.cl), t1.bm && (s1.style[\"mix-blend-mode\"] = getBlendMode(t1.bm)), this.stylesList.push(i1), this.addToAnimatedContents(t1, r1), r1;\n        }, SVGShapeElement.prototype.createGroupElement = function(t1) {\n            var e1 = new ShapeGroupData;\n            return t1.ln && e1.gr.setAttribute(\"id\", t1.ln), t1.cl && e1.gr.setAttribute(\"class\", t1.cl), t1.bm && (e1.gr.style[\"mix-blend-mode\"] = getBlendMode(t1.bm)), e1;\n        }, SVGShapeElement.prototype.createTransformElement = function(t1, e1) {\n            var r1 = TransformPropertyFactory.getTransformProperty(this, t1, this), i1 = new SVGTransformData(r1, r1.o, e1);\n            return this.addToAnimatedContents(t1, i1), i1;\n        }, SVGShapeElement.prototype.createShapeElement = function(t1, e1, r1) {\n            var i1 = 4;\n            \"rc\" === t1.ty ? i1 = 5 : \"el\" === t1.ty ? i1 = 6 : \"sr\" === t1.ty && (i1 = 7);\n            var s1 = new SVGShapeData(e1, r1, ShapePropertyFactory.getShapeProp(this, t1, i1, this));\n            return this.shapes.push(s1), this.addShapeToModifiers(s1), this.addToAnimatedContents(t1, s1), s1;\n        }, SVGShapeElement.prototype.addToAnimatedContents = function(t1, e1) {\n            for(var r1 = 0, i1 = this.animatedContents.length; r1 < i1;){\n                if (this.animatedContents[r1].element === e1) return;\n                r1 += 1;\n            }\n            this.animatedContents.push({\n                fn: SVGElementsRenderer.createRenderFunction(t1),\n                element: e1,\n                data: t1\n            });\n        }, SVGShapeElement.prototype.setElementStyles = function(t1) {\n            var e1, r1 = t1.styles, i1 = this.stylesList.length;\n            for(e1 = 0; e1 < i1; e1 += 1)this.stylesList[e1].closed || r1.push(this.stylesList[e1]);\n        }, SVGShapeElement.prototype.reloadShapes = function() {\n            var t1;\n            this._isFirstFrame = !0;\n            var e1 = this.itemsData.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.prevViewData[t1] = this.itemsData[t1];\n            for(this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes(), e1 = this.dynamicProperties.length, t1 = 0; t1 < e1; t1 += 1)this.dynamicProperties[t1].getValue();\n            this.renderModifiers();\n        }, SVGShapeElement.prototype.searchShapes = function(t1, e1, r1, i1, s1, a1, n1) {\n            var o1, h1, l1, p1, c1, f1, u1 = [].concat(a1), d1 = t1.length - 1, m1 = [], y1 = [];\n            for(o1 = d1; o1 >= 0; o1 -= 1){\n                if ((f1 = this.searchProcessedElement(t1[o1])) ? e1[o1] = r1[f1 - 1] : t1[o1]._render = n1, \"fl\" === t1[o1].ty || \"st\" === t1[o1].ty || \"gf\" === t1[o1].ty || \"gs\" === t1[o1].ty || \"no\" === t1[o1].ty) f1 ? e1[o1].style.closed = !1 : e1[o1] = this.createStyleElement(t1[o1], s1), t1[o1]._render && e1[o1].style.pElem.parentNode !== i1 && i1.appendChild(e1[o1].style.pElem), m1.push(e1[o1].style);\n                else if (\"gr\" === t1[o1].ty) {\n                    if (f1) for(l1 = e1[o1].it.length, h1 = 0; h1 < l1; h1 += 1)e1[o1].prevViewData[h1] = e1[o1].it[h1];\n                    else e1[o1] = this.createGroupElement(t1[o1]);\n                    this.searchShapes(t1[o1].it, e1[o1].it, e1[o1].prevViewData, e1[o1].gr, s1 + 1, u1, n1), t1[o1]._render && e1[o1].gr.parentNode !== i1 && i1.appendChild(e1[o1].gr);\n                } else \"tr\" === t1[o1].ty ? (f1 || (e1[o1] = this.createTransformElement(t1[o1], i1)), p1 = e1[o1].transform, u1.push(p1)) : \"sh\" === t1[o1].ty || \"rc\" === t1[o1].ty || \"el\" === t1[o1].ty || \"sr\" === t1[o1].ty ? (f1 || (e1[o1] = this.createShapeElement(t1[o1], u1, s1)), this.setElementStyles(e1[o1])) : \"tm\" === t1[o1].ty || \"rd\" === t1[o1].ty || \"ms\" === t1[o1].ty || \"pb\" === t1[o1].ty || \"zz\" === t1[o1].ty || \"op\" === t1[o1].ty ? (f1 ? (c1 = e1[o1]).closed = !1 : ((c1 = ShapeModifiers.getModifier(t1[o1].ty)).init(this, t1[o1]), e1[o1] = c1, this.shapeModifiers.push(c1)), y1.push(c1)) : \"rp\" === t1[o1].ty && (f1 ? (c1 = e1[o1]).closed = !0 : (c1 = ShapeModifiers.getModifier(t1[o1].ty), e1[o1] = c1, c1.init(this, t1, o1, e1), this.shapeModifiers.push(c1), n1 = !1), y1.push(c1));\n                this.addProcessedElement(t1[o1], o1 + 1);\n            }\n            for(d1 = m1.length, o1 = 0; o1 < d1; o1 += 1)m1[o1].closed = !0;\n            for(d1 = y1.length, o1 = 0; o1 < d1; o1 += 1)y1[o1].closed = !0;\n        }, SVGShapeElement.prototype.renderInnerContent = function() {\n            var t1;\n            this.renderModifiers();\n            var e1 = this.stylesList.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.stylesList[t1].reset();\n            for(this.renderShape(), t1 = 0; t1 < e1; t1 += 1)(this.stylesList[t1]._mdf || this._isFirstFrame) && (this.stylesList[t1].msElem && (this.stylesList[t1].msElem.setAttribute(\"d\", this.stylesList[t1].d), this.stylesList[t1].d = \"M0 0\" + this.stylesList[t1].d), this.stylesList[t1].pElem.setAttribute(\"d\", this.stylesList[t1].d || \"M0 0\"));\n        }, SVGShapeElement.prototype.renderShape = function() {\n            var t1, e1, r1 = this.animatedContents.length;\n            for(t1 = 0; t1 < r1; t1 += 1)e1 = this.animatedContents[t1], (this._isFirstFrame || e1.element._isAnimated) && !0 !== e1.data && e1.fn(e1.data, e1.element, this._isFirstFrame);\n        }, SVGShapeElement.prototype.destroy = function() {\n            this.destroyBaseElement(), this.shapesData = null, this.itemsData = null;\n        }, LetterProps.prototype.update = function(t1, e1, r1, i1, s1, a1) {\n            this._mdf.o = !1, this._mdf.sw = !1, this._mdf.sc = !1, this._mdf.fc = !1, this._mdf.m = !1, this._mdf.p = !1;\n            var n1 = !1;\n            return this.o !== t1 && (this.o = t1, this._mdf.o = !0, n1 = !0), this.sw !== e1 && (this.sw = e1, this._mdf.sw = !0, n1 = !0), this.sc !== r1 && (this.sc = r1, this._mdf.sc = !0, n1 = !0), this.fc !== i1 && (this.fc = i1, this._mdf.fc = !0, n1 = !0), this.m !== s1 && (this.m = s1, this._mdf.m = !0, n1 = !0), !a1.length || this.p[0] === a1[0] && this.p[1] === a1[1] && this.p[4] === a1[4] && this.p[5] === a1[5] && this.p[12] === a1[12] && this.p[13] === a1[13] || (this.p = a1, this._mdf.p = !0, n1 = !0), n1;\n        }, TextProperty.prototype.defaultBoxWidth = [\n            0,\n            0\n        ], TextProperty.prototype.copyData = function(t1, e1) {\n            for(var r1 in e1)Object.prototype.hasOwnProperty.call(e1, r1) && (t1[r1] = e1[r1]);\n            return t1;\n        }, TextProperty.prototype.setCurrentData = function(t1) {\n            t1.__complete || this.completeTextData(t1), this.currentData = t1, this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth, this._mdf = !0;\n        }, TextProperty.prototype.searchProperty = function() {\n            return this.searchKeyframes();\n        }, TextProperty.prototype.searchKeyframes = function() {\n            return this.kf = this.data.d.k.length > 1, this.kf && this.addEffect(this.getKeyframeValue.bind(this)), this.kf;\n        }, TextProperty.prototype.addEffect = function(t1) {\n            this.effectsSequence.push(t1), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.getValue = function(t1) {\n            if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length || t1) {\n                this.currentData.t = this.data.d.k[this.keysIndex].s.t;\n                var e1 = this.currentData, r1 = this.keysIndex;\n                if (this.lock) this.setCurrentData(this.currentData);\n                else {\n                    var i1;\n                    this.lock = !0, this._mdf = !1;\n                    var s1 = this.effectsSequence.length, a1 = t1 || this.data.d.k[this.keysIndex].s;\n                    for(i1 = 0; i1 < s1; i1 += 1)a1 = r1 !== this.keysIndex ? this.effectsSequence[i1](a1, a1.t) : this.effectsSequence[i1](this.currentData, a1.t);\n                    e1 !== a1 && this.setCurrentData(a1), this.v = this.currentData, this.pv = this.v, this.lock = !1, this.frameId = this.elem.globalData.frameId;\n                }\n            }\n        }, TextProperty.prototype.getKeyframeValue = function() {\n            for(var t1 = this.data.d.k, e1 = this.elem.comp.renderedFrame, r1 = 0, i1 = t1.length; r1 <= i1 - 1 && !(r1 === i1 - 1 || t1[r1 + 1].t > e1);)r1 += 1;\n            return this.keysIndex !== r1 && (this.keysIndex = r1), this.data.d.k[this.keysIndex].s;\n        }, TextProperty.prototype.buildFinalText = function(t1) {\n            for(var e1, r1, i1 = [], s1 = 0, a1 = t1.length, n1 = !1, o1 = !1, h1 = \"\"; s1 < a1;)n1 = o1, o1 = !1, e1 = t1.charCodeAt(s1), h1 = t1.charAt(s1), FontManager.isCombinedCharacter(e1) ? n1 = !0 : e1 >= 55296 && e1 <= 56319 ? FontManager.isRegionalFlag(t1, s1) ? h1 = t1.substr(s1, 14) : (r1 = t1.charCodeAt(s1 + 1)) >= 56320 && r1 <= 57343 && (FontManager.isModifier(e1, r1) ? (h1 = t1.substr(s1, 2), n1 = !0) : h1 = FontManager.isFlagEmoji(t1.substr(s1, 4)) ? t1.substr(s1, 4) : t1.substr(s1, 2)) : e1 > 56319 ? (r1 = t1.charCodeAt(s1 + 1), FontManager.isVariationSelector(e1) && (n1 = !0)) : FontManager.isZeroWidthJoiner(e1) && (n1 = !0, o1 = !0), n1 ? (i1[i1.length - 1] += h1, n1 = !1) : i1.push(h1), s1 += h1.length;\n            return i1;\n        }, TextProperty.prototype.completeTextData = function(t1) {\n            t1.__complete = !0;\n            var e1, r1, i1, s1, a1, n1, o1, h1 = this.elem.globalData.fontManager, l1 = this.data, p1 = [], c1 = 0, f1 = l1.m.g, u1 = 0, d1 = 0, m1 = 0, y1 = [], g1 = 0, v1 = 0, b1 = h1.getFontByName(t1.f), _1 = 0, P1 = getFontProperties(b1);\n            t1.fWeight = P1.weight, t1.fStyle = P1.style, t1.finalSize = t1.s, t1.finalText = this.buildFinalText(t1.t), r1 = t1.finalText.length, t1.finalLineHeight = t1.lh;\n            var S1, E1 = t1.tr / 1e3 * t1.finalSize;\n            if (t1.sz) for(var x1, C1, A1 = !0, w1 = t1.sz[0], k1 = t1.sz[1]; A1;){\n                x1 = 0, g1 = 0, r1 = (C1 = this.buildFinalText(t1.t)).length, E1 = t1.tr / 1e3 * t1.finalSize;\n                var T1 = -1;\n                for(e1 = 0; e1 < r1; e1 += 1)S1 = C1[e1].charCodeAt(0), i1 = !1, \" \" === C1[e1] ? T1 = e1 : 13 !== S1 && 3 !== S1 || (g1 = 0, i1 = !0, x1 += t1.finalLineHeight || 1.2 * t1.finalSize), h1.chars ? (o1 = h1.getCharData(C1[e1], b1.fStyle, b1.fFamily), _1 = i1 ? 0 : o1.w * t1.finalSize / 100) : _1 = h1.measureText(C1[e1], t1.f, t1.finalSize), g1 + _1 > w1 && \" \" !== C1[e1] ? (-1 === T1 ? r1 += 1 : e1 = T1, x1 += t1.finalLineHeight || 1.2 * t1.finalSize, C1.splice(e1, T1 === e1 ? 1 : 0, \"\\r\"), T1 = -1, g1 = 0) : (g1 += _1, g1 += E1);\n                x1 += b1.ascent * t1.finalSize / 100, this.canResize && t1.finalSize > this.minimumFontSize && k1 < x1 ? (t1.finalSize -= 1, t1.finalLineHeight = t1.finalSize * t1.lh / t1.s) : (t1.finalText = C1, r1 = t1.finalText.length, A1 = !1);\n            }\n            g1 = -E1, _1 = 0;\n            var M1, D1 = 0;\n            for(e1 = 0; e1 < r1; e1 += 1)if (i1 = !1, 13 === (S1 = (M1 = t1.finalText[e1]).charCodeAt(0)) || 3 === S1 ? (D1 = 0, y1.push(g1), v1 = g1 > v1 ? g1 : v1, g1 = -2 * E1, s1 = \"\", i1 = !0, m1 += 1) : s1 = M1, h1.chars ? (o1 = h1.getCharData(M1, b1.fStyle, h1.getFontByName(t1.f).fFamily), _1 = i1 ? 0 : o1.w * t1.finalSize / 100) : _1 = h1.measureText(s1, t1.f, t1.finalSize), \" \" === M1 ? D1 += _1 + E1 : (g1 += _1 + E1 + D1, D1 = 0), p1.push({\n                l: _1,\n                an: _1,\n                add: u1,\n                n: i1,\n                anIndexes: [],\n                val: s1,\n                line: m1,\n                animatorJustifyOffset: 0\n            }), 2 == f1) {\n                if (u1 += _1, \"\" === s1 || \" \" === s1 || e1 === r1 - 1) {\n                    for(\"\" !== s1 && \" \" !== s1 || (u1 -= _1); d1 <= e1;)p1[d1].an = u1, p1[d1].ind = c1, p1[d1].extra = _1, d1 += 1;\n                    c1 += 1, u1 = 0;\n                }\n            } else if (3 == f1) {\n                if (u1 += _1, \"\" === s1 || e1 === r1 - 1) {\n                    for(\"\" === s1 && (u1 -= _1); d1 <= e1;)p1[d1].an = u1, p1[d1].ind = c1, p1[d1].extra = _1, d1 += 1;\n                    u1 = 0, c1 += 1;\n                }\n            } else p1[c1].ind = c1, p1[c1].extra = 0, c1 += 1;\n            if (t1.l = p1, v1 = g1 > v1 ? g1 : v1, y1.push(g1), t1.sz) t1.boxWidth = t1.sz[0], t1.justifyOffset = 0;\n            else switch(t1.boxWidth = v1, t1.j){\n                case 1:\n                    t1.justifyOffset = -t1.boxWidth;\n                    break;\n                case 2:\n                    t1.justifyOffset = -t1.boxWidth / 2;\n                    break;\n                default:\n                    t1.justifyOffset = 0;\n            }\n            t1.lineWidths = y1;\n            var F1, I1, R1, L1, V1 = l1.a;\n            n1 = V1.length;\n            var B1 = [];\n            for(a1 = 0; a1 < n1; a1 += 1){\n                for((F1 = V1[a1]).a.sc && (t1.strokeColorAnim = !0), F1.a.sw && (t1.strokeWidthAnim = !0), (F1.a.fc || F1.a.fh || F1.a.fs || F1.a.fb) && (t1.fillColorAnim = !0), L1 = 0, R1 = F1.s.b, e1 = 0; e1 < r1; e1 += 1)(I1 = p1[e1]).anIndexes[a1] = L1, (1 == R1 && \"\" !== I1.val || 2 == R1 && \"\" !== I1.val && \" \" !== I1.val || 3 == R1 && (I1.n || \" \" == I1.val || e1 == r1 - 1) || 4 == R1 && (I1.n || e1 == r1 - 1)) && (1 === F1.s.rn && B1.push(L1), L1 += 1);\n                l1.a[a1].s.totalChars = L1;\n                var O1, $1 = -1;\n                if (1 === F1.s.rn) for(e1 = 0; e1 < r1; e1 += 1)$1 != (I1 = p1[e1]).anIndexes[a1] && ($1 = I1.anIndexes[a1], O1 = B1.splice(Math.floor(Math.random() * B1.length), 1)[0]), I1.anIndexes[a1] = O1;\n            }\n            t1.yOffset = t1.finalLineHeight || 1.2 * t1.finalSize, t1.ls = t1.ls || 0, t1.ascent = b1.ascent * t1.finalSize / 100;\n        }, TextProperty.prototype.updateDocumentData = function(t1, e1) {\n            e1 = void 0 === e1 ? this.keysIndex : e1;\n            var r1 = this.copyData({}, this.data.d.k[e1].s);\n            r1 = this.copyData(r1, t1), this.data.d.k[e1].s = r1, this.recalculate(e1), this.setCurrentData(r1), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.recalculate = function(t1) {\n            var e1 = this.data.d.k[t1].s;\n            e1.__complete = !1, this.keysIndex = 0, this._isFirstFrame = !0, this.getValue(e1);\n        }, TextProperty.prototype.canResizeFont = function(t1) {\n            this.canResize = t1, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.setMinimumFontSize = function(t1) {\n            this.minimumFontSize = Math.floor(t1) || 1, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);\n        };\n        var TextSelectorProp = function() {\n            var t1 = Math.max, e1 = Math.min, r1 = Math.floor;\n            function i1(t1, e1) {\n                this._currentTextLength = -1, this.k = !1, this.data = e1, this.elem = t1, this.comp = t1.comp, this.finalS = 0, this.finalE = 0, this.initDynamicPropertyContainer(t1), this.s = PropertyFactory.getProp(t1, e1.s || {\n                    k: 0\n                }, 0, 0, this), this.e = \"e\" in e1 ? PropertyFactory.getProp(t1, e1.e, 0, 0, this) : {\n                    v: 100\n                }, this.o = PropertyFactory.getProp(t1, e1.o || {\n                    k: 0\n                }, 0, 0, this), this.xe = PropertyFactory.getProp(t1, e1.xe || {\n                    k: 0\n                }, 0, 0, this), this.ne = PropertyFactory.getProp(t1, e1.ne || {\n                    k: 0\n                }, 0, 0, this), this.sm = PropertyFactory.getProp(t1, e1.sm || {\n                    k: 100\n                }, 0, 0, this), this.a = PropertyFactory.getProp(t1, e1.a, 0, .01, this), this.dynamicProperties.length || this.getValue();\n            }\n            return i1.prototype = {\n                getMult: function(i1) {\n                    this._currentTextLength !== this.elem.textProperty.currentData.l.length && this.getValue();\n                    var s1 = 0, a1 = 0, n1 = 1, o1 = 1;\n                    this.ne.v > 0 ? s1 = this.ne.v / 100 : a1 = -this.ne.v / 100, this.xe.v > 0 ? n1 = 1 - this.xe.v / 100 : o1 = 1 + this.xe.v / 100;\n                    var h1 = BezierFactory.getBezierEasing(s1, a1, n1, o1).get, l1 = 0, p1 = this.finalS, c1 = this.finalE, f1 = this.data.sh;\n                    if (2 === f1) l1 = h1(l1 = c1 === p1 ? i1 >= c1 ? 1 : 0 : t1(0, e1(.5 / (c1 - p1) + (i1 - p1) / (c1 - p1), 1)));\n                    else if (3 === f1) l1 = h1(l1 = c1 === p1 ? i1 >= c1 ? 0 : 1 : 1 - t1(0, e1(.5 / (c1 - p1) + (i1 - p1) / (c1 - p1), 1)));\n                    else if (4 === f1) c1 === p1 ? l1 = 0 : (l1 = t1(0, e1(.5 / (c1 - p1) + (i1 - p1) / (c1 - p1), 1))) < .5 ? l1 *= 2 : l1 = 1 - 2 * (l1 - .5), l1 = h1(l1);\n                    else if (5 === f1) {\n                        if (c1 === p1) l1 = 0;\n                        else {\n                            var u1 = c1 - p1, d1 = -u1 / 2 + (i1 = e1(t1(0, i1 + .5 - p1), c1 - p1)), m1 = u1 / 2;\n                            l1 = Math.sqrt(1 - d1 * d1 / (m1 * m1));\n                        }\n                        l1 = h1(l1);\n                    } else 6 === f1 ? (c1 === p1 ? l1 = 0 : (i1 = e1(t1(0, i1 + .5 - p1), c1 - p1), l1 = (1 + Math.cos(Math.PI + 2 * Math.PI * i1 / (c1 - p1))) / 2), l1 = h1(l1)) : (i1 >= r1(p1) && (l1 = t1(0, e1(i1 - p1 < 0 ? e1(c1, 1) - (p1 - i1) : c1 - i1, 1))), l1 = h1(l1));\n                    if (100 !== this.sm.v) {\n                        var y1 = .01 * this.sm.v;\n                        0 === y1 && (y1 = 1e-8);\n                        var g1 = .5 - .5 * y1;\n                        l1 < g1 ? l1 = 0 : (l1 = (l1 - g1) / y1) > 1 && (l1 = 1);\n                    }\n                    return l1 * this.a.v;\n                },\n                getValue: function(t1) {\n                    this.iterateDynamicProperties(), this._mdf = t1 || this._mdf, this._currentTextLength = this.elem.textProperty.currentData.l.length || 0, t1 && 2 === this.data.r && (this.e.v = this._currentTextLength);\n                    var e1 = 2 === this.data.r ? 1 : 100 / this.data.totalChars, r1 = this.o.v / e1, i1 = this.s.v / e1 + r1, s1 = this.e.v / e1 + r1;\n                    if (i1 > s1) {\n                        var a1 = i1;\n                        i1 = s1, s1 = a1;\n                    }\n                    this.finalS = i1, this.finalE = s1;\n                }\n            }, extendPrototype([\n                DynamicPropertyContainer\n            ], i1), {\n                getTextSelectorProp: function(t1, e1, r1) {\n                    return new i1(t1, e1, r1);\n                }\n            };\n        }();\n        function TextAnimatorDataProperty(t1, e1, r1) {\n            var i1 = {\n                propType: !1\n            }, s1 = PropertyFactory.getProp, a1 = e1.a;\n            this.a = {\n                r: a1.r ? s1(t1, a1.r, 0, degToRads, r1) : i1,\n                rx: a1.rx ? s1(t1, a1.rx, 0, degToRads, r1) : i1,\n                ry: a1.ry ? s1(t1, a1.ry, 0, degToRads, r1) : i1,\n                sk: a1.sk ? s1(t1, a1.sk, 0, degToRads, r1) : i1,\n                sa: a1.sa ? s1(t1, a1.sa, 0, degToRads, r1) : i1,\n                s: a1.s ? s1(t1, a1.s, 1, .01, r1) : i1,\n                a: a1.a ? s1(t1, a1.a, 1, 0, r1) : i1,\n                o: a1.o ? s1(t1, a1.o, 0, .01, r1) : i1,\n                p: a1.p ? s1(t1, a1.p, 1, 0, r1) : i1,\n                sw: a1.sw ? s1(t1, a1.sw, 0, 0, r1) : i1,\n                sc: a1.sc ? s1(t1, a1.sc, 1, 0, r1) : i1,\n                fc: a1.fc ? s1(t1, a1.fc, 1, 0, r1) : i1,\n                fh: a1.fh ? s1(t1, a1.fh, 0, 0, r1) : i1,\n                fs: a1.fs ? s1(t1, a1.fs, 0, .01, r1) : i1,\n                fb: a1.fb ? s1(t1, a1.fb, 0, .01, r1) : i1,\n                t: a1.t ? s1(t1, a1.t, 0, 0, r1) : i1\n            }, this.s = TextSelectorProp.getTextSelectorProp(t1, e1.s, r1), this.s.t = e1.s.t;\n        }\n        function TextAnimatorProperty(t1, e1, r1) {\n            this._isFirstFrame = !0, this._hasMaskedPath = !1, this._frameId = -1, this._textData = t1, this._renderType = e1, this._elem = r1, this._animatorsData = createSizedArray(this._textData.a.length), this._pathData = {}, this._moreOptions = {\n                alignment: {}\n            }, this.renderedLetters = [], this.lettersChangedFlag = !1, this.initDynamicPropertyContainer(r1);\n        }\n        function ITextElement() {}\n        TextAnimatorProperty.prototype.searchProperties = function() {\n            var t1, e1, r1 = this._textData.a.length, i1 = PropertyFactory.getProp;\n            for(t1 = 0; t1 < r1; t1 += 1)e1 = this._textData.a[t1], this._animatorsData[t1] = new TextAnimatorDataProperty(this._elem, e1, this);\n            this._textData.p && \"m\" in this._textData.p ? (this._pathData = {\n                a: i1(this._elem, this._textData.p.a, 0, 0, this),\n                f: i1(this._elem, this._textData.p.f, 0, 0, this),\n                l: i1(this._elem, this._textData.p.l, 0, 0, this),\n                r: i1(this._elem, this._textData.p.r, 0, 0, this),\n                p: i1(this._elem, this._textData.p.p, 0, 0, this),\n                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)\n            }, this._hasMaskedPath = !0) : this._hasMaskedPath = !1, this._moreOptions.alignment = i1(this._elem, this._textData.m.a, 1, 0, this);\n        }, TextAnimatorProperty.prototype.getMeasures = function(t1, e1) {\n            if (this.lettersChangedFlag = e1, this._mdf || this._isFirstFrame || e1 || this._hasMaskedPath && this._pathData.m._mdf) {\n                this._isFirstFrame = !1;\n                var r1, i1, s1, a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1, y1, g1, v1, b1, _1, P1 = this._moreOptions.alignment.v, S1 = this._animatorsData, E1 = this._textData, x1 = this.mHelper, C1 = this._renderType, A1 = this.renderedLetters.length, w1 = t1.l;\n                if (this._hasMaskedPath) {\n                    if (_1 = this._pathData.m, !this._pathData.n || this._pathData._mdf) {\n                        var k1, T1 = _1.v;\n                        for(this._pathData.r.v && (T1 = T1.reverse()), n1 = {\n                            tLength: 0,\n                            segments: []\n                        }, a1 = T1._length - 1, g1 = 0, s1 = 0; s1 < a1; s1 += 1)k1 = bez.buildBezierData(T1.v[s1], T1.v[s1 + 1], [\n                            T1.o[s1][0] - T1.v[s1][0],\n                            T1.o[s1][1] - T1.v[s1][1]\n                        ], [\n                            T1.i[s1 + 1][0] - T1.v[s1 + 1][0],\n                            T1.i[s1 + 1][1] - T1.v[s1 + 1][1]\n                        ]), n1.tLength += k1.segmentLength, n1.segments.push(k1), g1 += k1.segmentLength;\n                        s1 = a1, _1.v.c && (k1 = bez.buildBezierData(T1.v[s1], T1.v[0], [\n                            T1.o[s1][0] - T1.v[s1][0],\n                            T1.o[s1][1] - T1.v[s1][1]\n                        ], [\n                            T1.i[0][0] - T1.v[0][0],\n                            T1.i[0][1] - T1.v[0][1]\n                        ]), n1.tLength += k1.segmentLength, n1.segments.push(k1), g1 += k1.segmentLength), this._pathData.pi = n1;\n                    }\n                    if (n1 = this._pathData.pi, o1 = this._pathData.f.v, f1 = 0, c1 = 1, l1 = 0, p1 = !0, m1 = n1.segments, o1 < 0 && _1.v.c) for(n1.tLength < Math.abs(o1) && (o1 = -Math.abs(o1) % n1.tLength), c1 = (d1 = m1[f1 = m1.length - 1].points).length - 1; o1 < 0;)o1 += d1[c1].partialLength, (c1 -= 1) < 0 && (c1 = (d1 = m1[f1 -= 1].points).length - 1);\n                    u1 = (d1 = m1[f1].points)[c1 - 1], y1 = (h1 = d1[c1]).partialLength;\n                }\n                a1 = w1.length, r1 = 0, i1 = 0;\n                var M1, D1, F1, I1, R1, L1 = 1.2 * t1.finalSize * .714, V1 = !0;\n                F1 = S1.length;\n                var B1, O1, $1, z1, G1, N1, j1, H1, q1, W1, U1, Y1, J1 = -1, X1 = o1, K1 = f1, Z1 = c1, Q1 = -1, tt1 = \"\", et1 = this.defaultPropsArray;\n                if (2 === t1.j || 1 === t1.j) {\n                    var rt1 = 0, it1 = 0, st1 = 2 === t1.j ? -.5 : -1, at1 = 0, nt1 = !0;\n                    for(s1 = 0; s1 < a1; s1 += 1)if (w1[s1].n) {\n                        for(rt1 && (rt1 += it1); at1 < s1;)w1[at1].animatorJustifyOffset = rt1, at1 += 1;\n                        rt1 = 0, nt1 = !0;\n                    } else {\n                        for(D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).t.propType && (nt1 && 2 === t1.j && (it1 += M1.t.v * st1), (R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars)).length ? rt1 += M1.t.v * R1[0] * st1 : rt1 += M1.t.v * R1 * st1);\n                        nt1 = !1;\n                    }\n                    for(rt1 && (rt1 += it1); at1 < s1;)w1[at1].animatorJustifyOffset = rt1, at1 += 1;\n                }\n                for(s1 = 0; s1 < a1; s1 += 1){\n                    if (x1.reset(), z1 = 1, w1[s1].n) r1 = 0, i1 += t1.yOffset, i1 += V1 ? 1 : 0, o1 = X1, V1 = !1, this._hasMaskedPath && (c1 = Z1, u1 = (d1 = m1[f1 = K1].points)[c1 - 1], y1 = (h1 = d1[c1]).partialLength, l1 = 0), tt1 = \"\", U1 = \"\", q1 = \"\", Y1 = \"\", et1 = this.defaultPropsArray;\n                    else {\n                        if (this._hasMaskedPath) {\n                            if (Q1 !== w1[s1].line) {\n                                switch(t1.j){\n                                    case 1:\n                                        o1 += g1 - t1.lineWidths[w1[s1].line];\n                                        break;\n                                    case 2:\n                                        o1 += (g1 - t1.lineWidths[w1[s1].line]) / 2;\n                                }\n                                Q1 = w1[s1].line;\n                            }\n                            J1 !== w1[s1].ind && (w1[J1] && (o1 += w1[J1].extra), o1 += w1[s1].an / 2, J1 = w1[s1].ind), o1 += P1[0] * w1[s1].an * .005;\n                            var ot1 = 0;\n                            for(D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).p.propType && ((R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars)).length ? ot1 += M1.p.v[0] * R1[0] : ot1 += M1.p.v[0] * R1), M1.a.propType && ((R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars)).length ? ot1 += M1.a.v[0] * R1[0] : ot1 += M1.a.v[0] * R1);\n                            for(p1 = !0, this._pathData.a.v && (o1 = .5 * w1[0].an + (g1 - this._pathData.f.v - .5 * w1[0].an - .5 * w1[w1.length - 1].an) * J1 / (a1 - 1), o1 += this._pathData.f.v); p1;)l1 + y1 >= o1 + ot1 || !d1 ? (v1 = (o1 + ot1 - l1) / h1.partialLength, O1 = u1.point[0] + (h1.point[0] - u1.point[0]) * v1, $1 = u1.point[1] + (h1.point[1] - u1.point[1]) * v1, x1.translate(-P1[0] * w1[s1].an * .005, -P1[1] * L1 * .01), p1 = !1) : d1 && (l1 += h1.partialLength, (c1 += 1) >= d1.length && (c1 = 0, m1[f1 += 1] ? d1 = m1[f1].points : _1.v.c ? (c1 = 0, d1 = m1[f1 = 0].points) : (l1 -= h1.partialLength, d1 = null)), d1 && (u1 = h1, y1 = (h1 = d1[c1]).partialLength));\n                            B1 = w1[s1].an / 2 - w1[s1].add, x1.translate(-B1, 0, 0);\n                        } else B1 = w1[s1].an / 2 - w1[s1].add, x1.translate(-B1, 0, 0), x1.translate(-P1[0] * w1[s1].an * .005, -P1[1] * L1 * .01, 0);\n                        for(D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).t.propType && (R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars), 0 === r1 && 0 === t1.j || (this._hasMaskedPath ? R1.length ? o1 += M1.t.v * R1[0] : o1 += M1.t.v * R1 : R1.length ? r1 += M1.t.v * R1[0] : r1 += M1.t.v * R1));\n                        for(t1.strokeWidthAnim && (N1 = t1.sw || 0), t1.strokeColorAnim && (G1 = t1.sc ? [\n                            t1.sc[0],\n                            t1.sc[1],\n                            t1.sc[2]\n                        ] : [\n                            0,\n                            0,\n                            0\n                        ]), t1.fillColorAnim && t1.fc && (j1 = [\n                            t1.fc[0],\n                            t1.fc[1],\n                            t1.fc[2]\n                        ]), D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).a.propType && ((R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars)).length ? x1.translate(-M1.a.v[0] * R1[0], -M1.a.v[1] * R1[1], M1.a.v[2] * R1[2]) : x1.translate(-M1.a.v[0] * R1, -M1.a.v[1] * R1, M1.a.v[2] * R1));\n                        for(D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).s.propType && ((R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars)).length ? x1.scale(1 + (M1.s.v[0] - 1) * R1[0], 1 + (M1.s.v[1] - 1) * R1[1], 1) : x1.scale(1 + (M1.s.v[0] - 1) * R1, 1 + (M1.s.v[1] - 1) * R1, 1));\n                        for(D1 = 0; D1 < F1; D1 += 1){\n                            if (M1 = S1[D1].a, R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars), M1.sk.propType && (R1.length ? x1.skewFromAxis(-M1.sk.v * R1[0], M1.sa.v * R1[1]) : x1.skewFromAxis(-M1.sk.v * R1, M1.sa.v * R1)), M1.r.propType && (R1.length ? x1.rotateZ(-M1.r.v * R1[2]) : x1.rotateZ(-M1.r.v * R1)), M1.ry.propType && (R1.length ? x1.rotateY(M1.ry.v * R1[1]) : x1.rotateY(M1.ry.v * R1)), M1.rx.propType && (R1.length ? x1.rotateX(M1.rx.v * R1[0]) : x1.rotateX(M1.rx.v * R1)), M1.o.propType && (R1.length ? z1 += (M1.o.v * R1[0] - z1) * R1[0] : z1 += (M1.o.v * R1 - z1) * R1), t1.strokeWidthAnim && M1.sw.propType && (R1.length ? N1 += M1.sw.v * R1[0] : N1 += M1.sw.v * R1), t1.strokeColorAnim && M1.sc.propType) for(H1 = 0; H1 < 3; H1 += 1)R1.length ? G1[H1] += (M1.sc.v[H1] - G1[H1]) * R1[0] : G1[H1] += (M1.sc.v[H1] - G1[H1]) * R1;\n                            if (t1.fillColorAnim && t1.fc) {\n                                if (M1.fc.propType) for(H1 = 0; H1 < 3; H1 += 1)R1.length ? j1[H1] += (M1.fc.v[H1] - j1[H1]) * R1[0] : j1[H1] += (M1.fc.v[H1] - j1[H1]) * R1;\n                                M1.fh.propType && (j1 = R1.length ? addHueToRGB(j1, M1.fh.v * R1[0]) : addHueToRGB(j1, M1.fh.v * R1)), M1.fs.propType && (j1 = R1.length ? addSaturationToRGB(j1, M1.fs.v * R1[0]) : addSaturationToRGB(j1, M1.fs.v * R1)), M1.fb.propType && (j1 = R1.length ? addBrightnessToRGB(j1, M1.fb.v * R1[0]) : addBrightnessToRGB(j1, M1.fb.v * R1));\n                            }\n                        }\n                        for(D1 = 0; D1 < F1; D1 += 1)(M1 = S1[D1].a).p.propType && (R1 = S1[D1].s.getMult(w1[s1].anIndexes[D1], E1.a[D1].s.totalChars), this._hasMaskedPath ? R1.length ? x1.translate(0, M1.p.v[1] * R1[0], -M1.p.v[2] * R1[1]) : x1.translate(0, M1.p.v[1] * R1, -M1.p.v[2] * R1) : R1.length ? x1.translate(M1.p.v[0] * R1[0], M1.p.v[1] * R1[1], -M1.p.v[2] * R1[2]) : x1.translate(M1.p.v[0] * R1, M1.p.v[1] * R1, -M1.p.v[2] * R1));\n                        if (t1.strokeWidthAnim && (q1 = N1 < 0 ? 0 : N1), t1.strokeColorAnim && (W1 = \"rgb(\" + Math.round(255 * G1[0]) + \",\" + Math.round(255 * G1[1]) + \",\" + Math.round(255 * G1[2]) + \")\"), t1.fillColorAnim && t1.fc && (U1 = \"rgb(\" + Math.round(255 * j1[0]) + \",\" + Math.round(255 * j1[1]) + \",\" + Math.round(255 * j1[2]) + \")\"), this._hasMaskedPath) {\n                            if (x1.translate(0, -t1.ls), x1.translate(0, P1[1] * L1 * .01 + i1, 0), this._pathData.p.v) {\n                                b1 = (h1.point[1] - u1.point[1]) / (h1.point[0] - u1.point[0]);\n                                var ht1 = 180 * Math.atan(b1) / Math.PI;\n                                h1.point[0] < u1.point[0] && (ht1 += 180), x1.rotate(-ht1 * Math.PI / 180);\n                            }\n                            x1.translate(O1, $1, 0), o1 -= P1[0] * w1[s1].an * .005, w1[s1 + 1] && J1 !== w1[s1 + 1].ind && (o1 += w1[s1].an / 2, o1 += .001 * t1.tr * t1.finalSize);\n                        } else {\n                            switch(x1.translate(r1, i1, 0), t1.ps && x1.translate(t1.ps[0], t1.ps[1] + t1.ascent, 0), t1.j){\n                                case 1:\n                                    x1.translate(w1[s1].animatorJustifyOffset + t1.justifyOffset + (t1.boxWidth - t1.lineWidths[w1[s1].line]), 0, 0);\n                                    break;\n                                case 2:\n                                    x1.translate(w1[s1].animatorJustifyOffset + t1.justifyOffset + (t1.boxWidth - t1.lineWidths[w1[s1].line]) / 2, 0, 0);\n                            }\n                            x1.translate(0, -t1.ls), x1.translate(B1, 0, 0), x1.translate(P1[0] * w1[s1].an * .005, P1[1] * L1 * .01, 0), r1 += w1[s1].l + .001 * t1.tr * t1.finalSize;\n                        }\n                        \"html\" === C1 ? tt1 = x1.toCSS() : \"svg\" === C1 ? tt1 = x1.to2dCSS() : et1 = [\n                            x1.props[0],\n                            x1.props[1],\n                            x1.props[2],\n                            x1.props[3],\n                            x1.props[4],\n                            x1.props[5],\n                            x1.props[6],\n                            x1.props[7],\n                            x1.props[8],\n                            x1.props[9],\n                            x1.props[10],\n                            x1.props[11],\n                            x1.props[12],\n                            x1.props[13],\n                            x1.props[14],\n                            x1.props[15]\n                        ], Y1 = z1;\n                    }\n                    A1 <= s1 ? (I1 = new LetterProps(Y1, q1, W1, U1, tt1, et1), this.renderedLetters.push(I1), A1 += 1, this.lettersChangedFlag = !0) : (I1 = this.renderedLetters[s1], this.lettersChangedFlag = I1.update(Y1, q1, W1, U1, tt1, et1) || this.lettersChangedFlag);\n                }\n            }\n        }, TextAnimatorProperty.prototype.getValue = function() {\n            this._elem.globalData.frameId !== this._frameId && (this._frameId = this._elem.globalData.frameId, this.iterateDynamicProperties());\n        }, TextAnimatorProperty.prototype.mHelper = new Matrix, TextAnimatorProperty.prototype.defaultPropsArray = [], extendPrototype([\n            DynamicPropertyContainer\n        ], TextAnimatorProperty), ITextElement.prototype.initElement = function(t1, e1, r1) {\n            this.lettersChangedFlag = !0, this.initFrame(), this.initBaseData(t1, e1, r1), this.textProperty = new TextProperty(this, t1.t, this.dynamicProperties), this.textAnimator = new TextAnimatorProperty(t1.t, this.renderType, this), this.initTransform(t1, e1, r1), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide(), this.textAnimator.searchProperties(this.dynamicProperties);\n        }, ITextElement.prototype.prepareFrame = function(t1) {\n            this._mdf = !1, this.prepareRenderableFrame(t1), this.prepareProperties(t1, this.isInRange);\n        }, ITextElement.prototype.createPathShape = function(t1, e1) {\n            var r1, i1, s1 = e1.length, a1 = \"\";\n            for(r1 = 0; r1 < s1; r1 += 1)\"sh\" === e1[r1].ty && (i1 = e1[r1].ks.k, a1 += buildShapeString(i1, i1.i.length, !0, t1));\n            return a1;\n        }, ITextElement.prototype.updateDocumentData = function(t1, e1) {\n            this.textProperty.updateDocumentData(t1, e1);\n        }, ITextElement.prototype.canResizeFont = function(t1) {\n            this.textProperty.canResizeFont(t1);\n        }, ITextElement.prototype.setMinimumFontSize = function(t1) {\n            this.textProperty.setMinimumFontSize(t1);\n        }, ITextElement.prototype.applyTextPropertiesToMatrix = function(t1, e1, r1, i1, s1) {\n            switch(t1.ps && e1.translate(t1.ps[0], t1.ps[1] + t1.ascent, 0), e1.translate(0, -t1.ls, 0), t1.j){\n                case 1:\n                    e1.translate(t1.justifyOffset + (t1.boxWidth - t1.lineWidths[r1]), 0, 0);\n                    break;\n                case 2:\n                    e1.translate(t1.justifyOffset + (t1.boxWidth - t1.lineWidths[r1]) / 2, 0, 0);\n            }\n            e1.translate(i1, s1, 0);\n        }, ITextElement.prototype.buildColor = function(t1) {\n            return \"rgb(\" + Math.round(255 * t1[0]) + \",\" + Math.round(255 * t1[1]) + \",\" + Math.round(255 * t1[2]) + \")\";\n        }, ITextElement.prototype.emptyProp = new LetterProps, ITextElement.prototype.destroy = function() {}, ITextElement.prototype.validateText = function() {\n            (this.textProperty._mdf || this.textProperty._isFirstFrame) && (this.buildNewText(), this.textProperty._isFirstFrame = !1, this.textProperty._mdf = !1);\n        };\n        var emptyShapeData = {\n            shapes: []\n        };\n        function SVGTextLottieElement(t1, e1, r1) {\n            this.textSpans = [], this.renderType = \"svg\", this.initElement(t1, e1, r1);\n        }\n        function ISolidElement(t1, e1, r1) {\n            this.initElement(t1, e1, r1);\n        }\n        function NullElement(t1, e1, r1) {\n            this.initFrame(), this.initBaseData(t1, e1, r1), this.initFrame(), this.initTransform(t1, e1, r1), this.initHierarchy();\n        }\n        function SVGRendererBase() {}\n        function ICompElement() {}\n        function SVGCompElement(t1, e1, r1) {\n            this.layers = t1.layers, this.supports3d = !0, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t1, e1, r1), this.tm = t1.tm ? PropertyFactory.getProp(this, t1.tm, 0, e1.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function SVGRenderer(t1, e1) {\n            this.animationItem = t1, this.layers = null, this.renderedFrame = -1, this.svgElement = createNS(\"svg\");\n            var r1 = \"\";\n            if (e1 && e1.title) {\n                var i1 = createNS(\"title\"), s1 = createElementID();\n                i1.setAttribute(\"id\", s1), i1.textContent = e1.title, this.svgElement.appendChild(i1), r1 += s1;\n            }\n            if (e1 && e1.description) {\n                var a1 = createNS(\"desc\"), n1 = createElementID();\n                a1.setAttribute(\"id\", n1), a1.textContent = e1.description, this.svgElement.appendChild(a1), r1 += \" \" + n1;\n            }\n            r1 && this.svgElement.setAttribute(\"aria-labelledby\", r1);\n            var o1 = createNS(\"defs\");\n            this.svgElement.appendChild(o1);\n            var h1 = createNS(\"g\");\n            this.svgElement.appendChild(h1), this.layerElement = h1, this.renderConfig = {\n                preserveAspectRatio: e1 && e1.preserveAspectRatio || \"xMidYMid meet\",\n                imagePreserveAspectRatio: e1 && e1.imagePreserveAspectRatio || \"xMidYMid slice\",\n                contentVisibility: e1 && e1.contentVisibility || \"visible\",\n                progressiveLoad: e1 && e1.progressiveLoad || !1,\n                hideOnTransparent: !(e1 && !1 === e1.hideOnTransparent),\n                viewBoxOnly: e1 && e1.viewBoxOnly || !1,\n                viewBoxSize: e1 && e1.viewBoxSize || !1,\n                className: e1 && e1.className || \"\",\n                id: e1 && e1.id || \"\",\n                focusable: e1 && e1.focusable,\n                filterSize: {\n                    width: e1 && e1.filterSize && e1.filterSize.width || \"100%\",\n                    height: e1 && e1.filterSize && e1.filterSize.height || \"100%\",\n                    x: e1 && e1.filterSize && e1.filterSize.x || \"0%\",\n                    y: e1 && e1.filterSize && e1.filterSize.y || \"0%\"\n                },\n                width: e1 && e1.width,\n                height: e1 && e1.height,\n                runExpressions: !e1 || void 0 === e1.runExpressions || e1.runExpressions\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                defs: o1,\n                renderConfig: this.renderConfig\n            }, this.elements = [], this.pendingElements = [], this.destroyed = !1, this.rendererType = \"svg\";\n        }\n        function ShapeTransformManager() {\n            this.sequences = {}, this.sequenceList = [], this.transform_key_count = 0;\n        }\n        extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement,\n            ITextElement\n        ], SVGTextLottieElement), SVGTextLottieElement.prototype.createContent = function() {\n            this.data.singleShape && !this.globalData.fontManager.chars && (this.textContainer = createNS(\"text\"));\n        }, SVGTextLottieElement.prototype.buildTextContents = function(t1) {\n            for(var e1 = 0, r1 = t1.length, i1 = [], s1 = \"\"; e1 < r1;)t1[e1] === String.fromCharCode(13) || t1[e1] === String.fromCharCode(3) ? (i1.push(s1), s1 = \"\") : s1 += t1[e1], e1 += 1;\n            return i1.push(s1), i1;\n        }, SVGTextLottieElement.prototype.buildShapeData = function(t1, e1) {\n            if (t1.shapes && t1.shapes.length) {\n                var r1 = t1.shapes[0];\n                if (r1.it) {\n                    var i1 = r1.it[r1.it.length - 1];\n                    i1.s && (i1.s.k[0] = e1, i1.s.k[1] = e1);\n                }\n            }\n            return t1;\n        }, SVGTextLottieElement.prototype.buildNewText = function() {\n            var t1, e1;\n            this.addDynamicProperty(this);\n            var r1 = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(r1 ? r1.l.length : 0), r1.fc ? this.layerElement.setAttribute(\"fill\", this.buildColor(r1.fc)) : this.layerElement.setAttribute(\"fill\", \"rgba(0,0,0,0)\"), r1.sc && (this.layerElement.setAttribute(\"stroke\", this.buildColor(r1.sc)), this.layerElement.setAttribute(\"stroke-width\", r1.sw)), this.layerElement.setAttribute(\"font-size\", r1.finalSize);\n            var i1 = this.globalData.fontManager.getFontByName(r1.f);\n            if (i1.fClass) this.layerElement.setAttribute(\"class\", i1.fClass);\n            else {\n                this.layerElement.setAttribute(\"font-family\", i1.fFamily);\n                var s1 = r1.fWeight, a1 = r1.fStyle;\n                this.layerElement.setAttribute(\"font-style\", a1), this.layerElement.setAttribute(\"font-weight\", s1);\n            }\n            this.layerElement.setAttribute(\"aria-label\", r1.t);\n            var n1, o1 = r1.l || [], h1 = !!this.globalData.fontManager.chars;\n            e1 = o1.length;\n            var l1 = this.mHelper, p1 = this.data.singleShape, c1 = 0, f1 = 0, u1 = !0, d1 = .001 * r1.tr * r1.finalSize;\n            if (!p1 || h1 || r1.sz) {\n                var m1, y1 = this.textSpans.length;\n                for(t1 = 0; t1 < e1; t1 += 1){\n                    if (this.textSpans[t1] || (this.textSpans[t1] = {\n                        span: null,\n                        childSpan: null,\n                        glyph: null\n                    }), !h1 || !p1 || 0 === t1) {\n                        if (n1 = y1 > t1 ? this.textSpans[t1].span : createNS(h1 ? \"g\" : \"text\"), y1 <= t1) {\n                            if (n1.setAttribute(\"stroke-linecap\", \"butt\"), n1.setAttribute(\"stroke-linejoin\", \"round\"), n1.setAttribute(\"stroke-miterlimit\", \"4\"), this.textSpans[t1].span = n1, h1) {\n                                var g1 = createNS(\"g\");\n                                n1.appendChild(g1), this.textSpans[t1].childSpan = g1;\n                            }\n                            this.textSpans[t1].span = n1, this.layerElement.appendChild(n1);\n                        }\n                        n1.style.display = \"inherit\";\n                    }\n                    if (l1.reset(), p1 && (o1[t1].n && (c1 = -d1, f1 += r1.yOffset, f1 += u1 ? 1 : 0, u1 = !1), this.applyTextPropertiesToMatrix(r1, l1, o1[t1].line, c1, f1), c1 += o1[t1].l || 0, c1 += d1), h1) {\n                        var v1;\n                        if (1 === (m1 = this.globalData.fontManager.getCharData(r1.finalText[t1], i1.fStyle, this.globalData.fontManager.getFontByName(r1.f).fFamily)).t) v1 = new SVGCompElement(m1.data, this.globalData, this);\n                        else {\n                            var b1 = emptyShapeData;\n                            m1.data && m1.data.shapes && (b1 = this.buildShapeData(m1.data, r1.finalSize)), v1 = new SVGShapeElement(b1, this.globalData, this);\n                        }\n                        if (this.textSpans[t1].glyph) {\n                            var _1 = this.textSpans[t1].glyph;\n                            this.textSpans[t1].childSpan.removeChild(_1.layerElement), _1.destroy();\n                        }\n                        this.textSpans[t1].glyph = v1, v1._debug = !0, v1.prepareFrame(0), v1.renderFrame(), this.textSpans[t1].childSpan.appendChild(v1.layerElement), 1 === m1.t && this.textSpans[t1].childSpan.setAttribute(\"transform\", \"scale(\" + r1.finalSize / 100 + \",\" + r1.finalSize / 100 + \")\");\n                    } else p1 && n1.setAttribute(\"transform\", \"translate(\" + l1.props[12] + \",\" + l1.props[13] + \")\"), n1.textContent = o1[t1].val, n1.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                }\n                p1 && n1 && n1.setAttribute(\"d\", \"\");\n            } else {\n                var P1 = this.textContainer, S1 = \"start\";\n                switch(r1.j){\n                    case 1:\n                        S1 = \"end\";\n                        break;\n                    case 2:\n                        S1 = \"middle\";\n                        break;\n                    default:\n                        S1 = \"start\";\n                }\n                P1.setAttribute(\"text-anchor\", S1), P1.setAttribute(\"letter-spacing\", d1);\n                var E1 = this.buildTextContents(r1.finalText);\n                for(e1 = E1.length, f1 = r1.ps ? r1.ps[1] + r1.ascent : 0, t1 = 0; t1 < e1; t1 += 1)(n1 = this.textSpans[t1].span || createNS(\"tspan\")).textContent = E1[t1], n1.setAttribute(\"x\", 0), n1.setAttribute(\"y\", f1), n1.style.display = \"inherit\", P1.appendChild(n1), this.textSpans[t1] || (this.textSpans[t1] = {\n                    span: null,\n                    glyph: null\n                }), this.textSpans[t1].span = n1, f1 += r1.finalLineHeight;\n                this.layerElement.appendChild(P1);\n            }\n            for(; t1 < this.textSpans.length;)this.textSpans[t1].span.style.display = \"none\", t1 += 1;\n            this._sizeChanged = !0;\n        }, SVGTextLottieElement.prototype.sourceRectAtTime = function() {\n            if (this.prepareFrame(this.comp.renderedFrame - this.data.st), this.renderInnerContent(), this._sizeChanged) {\n                this._sizeChanged = !1;\n                var t1 = this.layerElement.getBBox();\n                this.bbox = {\n                    top: t1.y,\n                    left: t1.x,\n                    width: t1.width,\n                    height: t1.height\n                };\n            }\n            return this.bbox;\n        }, SVGTextLottieElement.prototype.getValue = function() {\n            var t1, e1, r1 = this.textSpans.length;\n            for(this.renderedFrame = this.comp.renderedFrame, t1 = 0; t1 < r1; t1 += 1)(e1 = this.textSpans[t1].glyph) && (e1.prepareFrame(this.comp.renderedFrame - this.data.st), e1._mdf && (this._mdf = !0));\n        }, SVGTextLottieElement.prototype.renderInnerContent = function() {\n            if (this.validateText(), (!this.data.singleShape || this._mdf) && (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag)) {\n                var t1, e1;\n                this._sizeChanged = !0;\n                var r1, i1, s1, a1 = this.textAnimator.renderedLetters, n1 = this.textProperty.currentData.l;\n                for(e1 = n1.length, t1 = 0; t1 < e1; t1 += 1)n1[t1].n || (r1 = a1[t1], i1 = this.textSpans[t1].span, (s1 = this.textSpans[t1].glyph) && s1.renderFrame(), r1._mdf.m && i1.setAttribute(\"transform\", r1.m), r1._mdf.o && i1.setAttribute(\"opacity\", r1.o), r1._mdf.sw && i1.setAttribute(\"stroke-width\", r1.sw), r1._mdf.sc && i1.setAttribute(\"stroke\", r1.sc), r1._mdf.fc && i1.setAttribute(\"fill\", r1.fc));\n            }\n        }, extendPrototype([\n            IImageElement\n        ], ISolidElement), ISolidElement.prototype.createContent = function() {\n            var t1 = createNS(\"rect\");\n            t1.setAttribute(\"width\", this.data.sw), t1.setAttribute(\"height\", this.data.sh), t1.setAttribute(\"fill\", this.data.sc), this.layerElement.appendChild(t1);\n        }, NullElement.prototype.prepareFrame = function(t1) {\n            this.prepareProperties(t1, !0);\n        }, NullElement.prototype.renderFrame = function() {}, NullElement.prototype.getBaseElement = function() {\n            return null;\n        }, NullElement.prototype.destroy = function() {}, NullElement.prototype.sourceRectAtTime = function() {}, NullElement.prototype.hide = function() {}, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HierarchyElement,\n            FrameElement\n        ], NullElement), extendPrototype([\n            BaseRenderer\n        ], SVGRendererBase), SVGRendererBase.prototype.createNull = function(t1) {\n            return new NullElement(t1, this.globalData, this);\n        }, SVGRendererBase.prototype.createShape = function(t1) {\n            return new SVGShapeElement(t1, this.globalData, this);\n        }, SVGRendererBase.prototype.createText = function(t1) {\n            return new SVGTextLottieElement(t1, this.globalData, this);\n        }, SVGRendererBase.prototype.createImage = function(t1) {\n            return new IImageElement(t1, this.globalData, this);\n        }, SVGRendererBase.prototype.createSolid = function(t1) {\n            return new ISolidElement(t1, this.globalData, this);\n        }, SVGRendererBase.prototype.configAnimation = function(t1) {\n            this.svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"), this.svgElement.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\"), this.renderConfig.viewBoxSize ? this.svgElement.setAttribute(\"viewBox\", this.renderConfig.viewBoxSize) : this.svgElement.setAttribute(\"viewBox\", \"0 0 \" + t1.w + \" \" + t1.h), this.renderConfig.viewBoxOnly || (this.svgElement.setAttribute(\"width\", t1.w), this.svgElement.setAttribute(\"height\", t1.h), this.svgElement.style.width = \"100%\", this.svgElement.style.height = \"100%\", this.svgElement.style.transform = \"translate3d(0,0,0)\", this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility), this.renderConfig.width && this.svgElement.setAttribute(\"width\", this.renderConfig.width), this.renderConfig.height && this.svgElement.setAttribute(\"height\", this.renderConfig.height), this.renderConfig.className && this.svgElement.setAttribute(\"class\", this.renderConfig.className), this.renderConfig.id && this.svgElement.setAttribute(\"id\", this.renderConfig.id), void 0 !== this.renderConfig.focusable && this.svgElement.setAttribute(\"focusable\", this.renderConfig.focusable), this.svgElement.setAttribute(\"preserveAspectRatio\", this.renderConfig.preserveAspectRatio), this.animationItem.wrapper.appendChild(this.svgElement);\n            var e1 = this.globalData.defs;\n            this.setupGlobalData(t1, e1), this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.data = t1;\n            var r1 = createNS(\"clipPath\"), i1 = createNS(\"rect\");\n            i1.setAttribute(\"width\", t1.w), i1.setAttribute(\"height\", t1.h), i1.setAttribute(\"x\", 0), i1.setAttribute(\"y\", 0);\n            var s1 = createElementID();\n            r1.setAttribute(\"id\", s1), r1.appendChild(i1), this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + s1 + \")\"), e1.appendChild(r1), this.layers = t1.layers, this.elements = createSizedArray(t1.layers.length);\n        }, SVGRendererBase.prototype.destroy = function() {\n            var t1;\n            this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), this.layerElement = null, this.globalData.defs = null;\n            var e1 = this.layers ? this.layers.length : 0;\n            for(t1 = 0; t1 < e1; t1 += 1)this.elements[t1] && this.elements[t1].destroy && this.elements[t1].destroy();\n            this.elements.length = 0, this.destroyed = !0, this.animationItem = null;\n        }, SVGRendererBase.prototype.updateContainerSize = function() {}, SVGRendererBase.prototype.findIndexByInd = function(t1) {\n            var e1 = 0, r1 = this.layers.length;\n            for(e1 = 0; e1 < r1; e1 += 1)if (this.layers[e1].ind === t1) return e1;\n            return -1;\n        }, SVGRendererBase.prototype.buildItem = function(t1) {\n            var e1 = this.elements;\n            if (!e1[t1] && 99 !== this.layers[t1].ty) {\n                e1[t1] = !0;\n                var r1 = this.createItem(this.layers[t1]);\n                if (e1[t1] = r1, getExpressionsPlugin() && (0 === this.layers[t1].ty && this.globalData.projectInterface.registerComposition(r1), r1.initExpressions()), this.appendElementInPos(r1, t1), this.layers[t1].tt) {\n                    var i1 = \"tp\" in this.layers[t1] ? this.findIndexByInd(this.layers[t1].tp) : t1 - 1;\n                    if (-1 === i1) return;\n                    if (this.elements[i1] && !0 !== this.elements[i1]) {\n                        var s1 = e1[i1].getMatte(this.layers[t1].tt);\n                        r1.setMatte(s1);\n                    } else this.buildItem(i1), this.addPendingElement(r1);\n                }\n            }\n        }, SVGRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;){\n                var t1 = this.pendingElements.pop();\n                if (t1.checkParenting(), t1.data.tt) for(var e1 = 0, r1 = this.elements.length; e1 < r1;){\n                    if (this.elements[e1] === t1) {\n                        var i1 = \"tp\" in t1.data ? this.findIndexByInd(t1.data.tp) : e1 - 1, s1 = this.elements[i1].getMatte(this.layers[e1].tt);\n                        t1.setMatte(s1);\n                        break;\n                    }\n                    e1 += 1;\n                }\n            }\n        }, SVGRendererBase.prototype.renderFrame = function(t1) {\n            if (this.renderedFrame !== t1 && !this.destroyed) {\n                var e1;\n                null === t1 ? t1 = this.renderedFrame : this.renderedFrame = t1, this.globalData.frameNum = t1, this.globalData.frameId += 1, this.globalData.projectInterface.currentFrame = t1, this.globalData._mdf = !1;\n                var r1 = this.layers.length;\n                for(this.completeLayers || this.checkLayers(t1), e1 = r1 - 1; e1 >= 0; e1 -= 1)(this.completeLayers || this.elements[e1]) && this.elements[e1].prepareFrame(t1 - this.layers[e1].st);\n                if (this.globalData._mdf) for(e1 = 0; e1 < r1; e1 += 1)(this.completeLayers || this.elements[e1]) && this.elements[e1].renderFrame();\n            }\n        }, SVGRendererBase.prototype.appendElementInPos = function(t1, e1) {\n            var r1 = t1.getBaseElement();\n            if (r1) {\n                for(var i1, s1 = 0; s1 < e1;)this.elements[s1] && !0 !== this.elements[s1] && this.elements[s1].getBaseElement() && (i1 = this.elements[s1].getBaseElement()), s1 += 1;\n                i1 ? this.layerElement.insertBefore(r1, i1) : this.layerElement.appendChild(r1);\n            }\n        }, SVGRendererBase.prototype.hide = function() {\n            this.layerElement.style.display = \"none\";\n        }, SVGRendererBase.prototype.show = function() {\n            this.layerElement.style.display = \"block\";\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], ICompElement), ICompElement.prototype.initElement = function(t1, e1, r1) {\n            this.initFrame(), this.initBaseData(t1, e1, r1), this.initTransform(t1, e1, r1), this.initRenderable(), this.initHierarchy(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), !this.data.xt && e1.progressiveLoad || this.buildAllItems(), this.hide();\n        }, ICompElement.prototype.prepareFrame = function(t1) {\n            if (this._mdf = !1, this.prepareRenderableFrame(t1), this.prepareProperties(t1, this.isInRange), this.isInRange || this.data.xt) {\n                if (this.tm._placeholder) this.renderedFrame = t1 / this.data.sr;\n                else {\n                    var e1 = this.tm.v;\n                    e1 === this.data.op && (e1 = this.data.op - 1), this.renderedFrame = e1;\n                }\n                var r1, i1 = this.elements.length;\n                for(this.completeLayers || this.checkLayers(this.renderedFrame), r1 = i1 - 1; r1 >= 0; r1 -= 1)(this.completeLayers || this.elements[r1]) && (this.elements[r1].prepareFrame(this.renderedFrame - this.layers[r1].st), this.elements[r1]._mdf && (this._mdf = !0));\n            }\n        }, ICompElement.prototype.renderInnerContent = function() {\n            var t1, e1 = this.layers.length;\n            for(t1 = 0; t1 < e1; t1 += 1)(this.completeLayers || this.elements[t1]) && this.elements[t1].renderFrame();\n        }, ICompElement.prototype.setElements = function(t1) {\n            this.elements = t1;\n        }, ICompElement.prototype.getElements = function() {\n            return this.elements;\n        }, ICompElement.prototype.destroyElements = function() {\n            var t1, e1 = this.layers.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.elements[t1] && this.elements[t1].destroy();\n        }, ICompElement.prototype.destroy = function() {\n            this.destroyElements(), this.destroyBaseElement();\n        }, extendPrototype([\n            SVGRendererBase,\n            ICompElement,\n            SVGBaseElement\n        ], SVGCompElement), SVGCompElement.prototype.createComp = function(t1) {\n            return new SVGCompElement(t1, this.globalData, this);\n        }, extendPrototype([\n            SVGRendererBase\n        ], SVGRenderer), SVGRenderer.prototype.createComp = function(t1) {\n            return new SVGCompElement(t1, this.globalData, this);\n        }, ShapeTransformManager.prototype = {\n            addTransformSequence: function(t1) {\n                var e1, r1 = t1.length, i1 = \"_\";\n                for(e1 = 0; e1 < r1; e1 += 1)i1 += t1[e1].transform.key + \"_\";\n                var s1 = this.sequences[i1];\n                return s1 || (s1 = {\n                    transforms: [].concat(t1),\n                    finalTransform: new Matrix,\n                    _mdf: !1\n                }, this.sequences[i1] = s1, this.sequenceList.push(s1)), s1;\n            },\n            processSequence: function(t1, e1) {\n                for(var r1 = 0, i1 = t1.transforms.length, s1 = e1; r1 < i1 && !e1;){\n                    if (t1.transforms[r1].transform.mProps._mdf) {\n                        s1 = !0;\n                        break;\n                    }\n                    r1 += 1;\n                }\n                if (s1) for(t1.finalTransform.reset(), r1 = i1 - 1; r1 >= 0; r1 -= 1)t1.finalTransform.multiply(t1.transforms[r1].transform.mProps.v);\n                t1._mdf = s1;\n            },\n            processSequences: function(t1) {\n                var e1, r1 = this.sequenceList.length;\n                for(e1 = 0; e1 < r1; e1 += 1)this.processSequence(this.sequenceList[e1], t1);\n            },\n            getNewKey: function() {\n                return this.transform_key_count += 1, \"_\" + this.transform_key_count;\n            }\n        };\n        var lumaLoader = function() {\n            var t1 = \"__lottie_element_luma_buffer\", e1 = null, r1 = null, i1 = null;\n            function s1() {\n                var s1, a1, n1;\n                e1 || (s1 = createNS(\"svg\"), a1 = createNS(\"filter\"), n1 = createNS(\"feColorMatrix\"), a1.setAttribute(\"id\", t1), n1.setAttribute(\"type\", \"matrix\"), n1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), n1.setAttribute(\"values\", \"0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0\"), a1.appendChild(n1), s1.appendChild(a1), s1.setAttribute(\"id\", t1 + \"_svg\"), featureSupport.svgLumaHidden && (s1.style.display = \"none\"), i1 = s1, document.body.appendChild(i1), e1 = createTag(\"canvas\"), (r1 = e1.getContext(\"2d\")).filter = \"url(#\" + t1 + \")\", r1.fillStyle = \"rgba(0,0,0,0)\", r1.fillRect(0, 0, 1, 1));\n            }\n            return {\n                load: s1,\n                get: function(i1) {\n                    return e1 || s1(), e1.width = i1.width, e1.height = i1.height, r1.filter = \"url(#\" + t1 + \")\", e1;\n                }\n            };\n        };\n        function createCanvas(t1, e1) {\n            if (featureSupport.offscreenCanvas) return new OffscreenCanvas(t1, e1);\n            var r1 = createTag(\"canvas\");\n            return r1.width = t1, r1.height = e1, r1;\n        }\n        var assetLoader = {\n            loadLumaCanvas: lumaLoader.load,\n            getLumaCanvas: lumaLoader.get,\n            createCanvas: createCanvas\n        }, registeredEffects = {};\n        function CVEffects(t1) {\n            var e1, r1, i1 = t1.data.ef ? t1.data.ef.length : 0;\n            for(this.filters = [], e1 = 0; e1 < i1; e1 += 1){\n                r1 = null;\n                var s1 = t1.data.ef[e1].ty;\n                registeredEffects[s1] && (r1 = new (0, registeredEffects[s1].effect)(t1.effectsManager.effectElements[e1], t1)), r1 && this.filters.push(r1);\n            }\n            this.filters.length && t1.addRenderableComponent(this);\n        }\n        function registerEffect(t1, e1) {\n            registeredEffects[t1] = {\n                effect: e1\n            };\n        }\n        function CVMaskElement(t1, e1) {\n            var r1;\n            this.data = t1, this.element = e1, this.masksProperties = this.data.masksProperties || [], this.viewData = createSizedArray(this.masksProperties.length);\n            var i1 = this.masksProperties.length, s1 = !1;\n            for(r1 = 0; r1 < i1; r1 += 1)\"n\" !== this.masksProperties[r1].mode && (s1 = !0), this.viewData[r1] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[r1], 3);\n            this.hasMasks = s1, s1 && this.element.addRenderableComponent(this);\n        }\n        function CVBaseElement() {}\n        CVEffects.prototype.renderFrame = function(t1) {\n            var e1, r1 = this.filters.length;\n            for(e1 = 0; e1 < r1; e1 += 1)this.filters[e1].renderFrame(t1);\n        }, CVEffects.prototype.getEffects = function(t1) {\n            var e1, r1 = this.filters.length, i1 = [];\n            for(e1 = 0; e1 < r1; e1 += 1)this.filters[e1].type === t1 && i1.push(this.filters[e1]);\n            return i1;\n        }, CVMaskElement.prototype.renderFrame = function() {\n            if (this.hasMasks) {\n                var t1, e1, r1, i1, s1 = this.element.finalTransform.mat, a1 = this.element.canvasContext, n1 = this.masksProperties.length;\n                for(a1.beginPath(), t1 = 0; t1 < n1; t1 += 1)if (\"n\" !== this.masksProperties[t1].mode) {\n                    var o1;\n                    this.masksProperties[t1].inv && (a1.moveTo(0, 0), a1.lineTo(this.element.globalData.compSize.w, 0), a1.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h), a1.lineTo(0, this.element.globalData.compSize.h), a1.lineTo(0, 0)), i1 = this.viewData[t1].v, e1 = s1.applyToPointArray(i1.v[0][0], i1.v[0][1], 0), a1.moveTo(e1[0], e1[1]);\n                    var h1 = i1._length;\n                    for(o1 = 1; o1 < h1; o1 += 1)r1 = s1.applyToTriplePoints(i1.o[o1 - 1], i1.i[o1], i1.v[o1]), a1.bezierCurveTo(r1[0], r1[1], r1[2], r1[3], r1[4], r1[5]);\n                    r1 = s1.applyToTriplePoints(i1.o[o1 - 1], i1.i[0], i1.v[0]), a1.bezierCurveTo(r1[0], r1[1], r1[2], r1[3], r1[4], r1[5]);\n                }\n                this.element.globalData.renderer.save(!0), a1.clip();\n            }\n        }, CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty, CVMaskElement.prototype.destroy = function() {\n            this.element = null;\n        };\n        var operationsMap = {\n            1: \"source-in\",\n            2: \"source-out\",\n            3: \"source-in\",\n            4: \"source-out\"\n        };\n        function CVShapeData(t1, e1, r1, i1) {\n            this.styledShapes = [], this.tr = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            var s1, a1 = 4;\n            \"rc\" === e1.ty ? a1 = 5 : \"el\" === e1.ty ? a1 = 6 : \"sr\" === e1.ty && (a1 = 7), this.sh = ShapePropertyFactory.getShapeProp(t1, e1, a1, t1);\n            var n1, o1 = r1.length;\n            for(s1 = 0; s1 < o1; s1 += 1)r1[s1].closed || (n1 = {\n                transforms: i1.addTransformSequence(r1[s1].transforms),\n                trNodes: []\n            }, this.styledShapes.push(n1), r1[s1].elements.push(n1));\n        }\n        function CVShapeElement(t1, e1, r1) {\n            this.shapes = [], this.shapesData = t1.shapes, this.stylesList = [], this.itemsData = [], this.prevViewData = [], this.shapeModifiers = [], this.processedElements = [], this.transformsManager = new ShapeTransformManager, this.initElement(t1, e1, r1);\n        }\n        function CVTextElement(t1, e1, r1) {\n            this.textSpans = [], this.yOffset = 0, this.fillColorAnim = !1, this.strokeColorAnim = !1, this.strokeWidthAnim = !1, this.stroke = !1, this.fill = !1, this.justifyOffset = 0, this.currentRender = null, this.renderType = \"canvas\", this.values = {\n                fill: \"rgba(0,0,0,0)\",\n                stroke: \"rgba(0,0,0,0)\",\n                sWidth: 0,\n                fValue: \"\"\n            }, this.initElement(t1, e1, r1);\n        }\n        function CVImageElement(t1, e1, r1) {\n            this.assetData = e1.getAssetData(t1.refId), this.img = e1.imageLoader.getAsset(this.assetData), this.initElement(t1, e1, r1);\n        }\n        function CVSolidElement(t1, e1, r1) {\n            this.initElement(t1, e1, r1);\n        }\n        function CanvasRendererBase() {}\n        function CanvasContext() {\n            this.opacity = -1, this.transform = createTypedArray(\"float32\", 16), this.fillStyle = \"\", this.strokeStyle = \"\", this.lineWidth = \"\", this.lineCap = \"\", this.lineJoin = \"\", this.miterLimit = \"\", this.id = Math.random();\n        }\n        function CVContextData() {\n            var t1;\n            for(this.stack = [], this.cArrPos = 0, this.cTr = new Matrix, t1 = 0; t1 < 15; t1 += 1){\n                var e1 = new CanvasContext;\n                this.stack[t1] = e1;\n            }\n            this._length = 15, this.nativeContext = null, this.transformMat = new Matrix, this.currentOpacity = 1, this.currentFillStyle = \"\", this.appliedFillStyle = \"\", this.currentStrokeStyle = \"\", this.appliedStrokeStyle = \"\", this.currentLineWidth = \"\", this.appliedLineWidth = \"\", this.currentLineCap = \"\", this.appliedLineCap = \"\", this.currentLineJoin = \"\", this.appliedLineJoin = \"\", this.appliedMiterLimit = \"\", this.currentMiterLimit = \"\";\n        }\n        function CVCompElement(t1, e1, r1) {\n            this.completeLayers = !1, this.layers = t1.layers, this.pendingElements = [], this.elements = createSizedArray(this.layers.length), this.initElement(t1, e1, r1), this.tm = t1.tm ? PropertyFactory.getProp(this, t1.tm, 0, e1.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function CanvasRenderer(t1, e1) {\n            this.animationItem = t1, this.renderConfig = {\n                clearCanvas: !e1 || void 0 === e1.clearCanvas || e1.clearCanvas,\n                context: e1 && e1.context || null,\n                progressiveLoad: e1 && e1.progressiveLoad || !1,\n                preserveAspectRatio: e1 && e1.preserveAspectRatio || \"xMidYMid meet\",\n                imagePreserveAspectRatio: e1 && e1.imagePreserveAspectRatio || \"xMidYMid slice\",\n                contentVisibility: e1 && e1.contentVisibility || \"visible\",\n                className: e1 && e1.className || \"\",\n                id: e1 && e1.id || \"\",\n                runExpressions: !e1 || void 0 === e1.runExpressions || e1.runExpressions\n            }, this.renderConfig.dpr = e1 && e1.dpr || 1, this.animationItem.wrapper && (this.renderConfig.dpr = e1 && e1.dpr || window.devicePixelRatio || 1), this.renderedFrame = -1, this.globalData = {\n                frameNum: -1,\n                _mdf: !1,\n                renderConfig: this.renderConfig,\n                currentGlobalAlpha: -1\n            }, this.contextData = new CVContextData, this.elements = [], this.pendingElements = [], this.transformMat = new Matrix, this.completeLayers = !1, this.rendererType = \"canvas\", this.renderConfig.clearCanvas && (this.ctxTransform = this.contextData.transform.bind(this.contextData), this.ctxOpacity = this.contextData.opacity.bind(this.contextData), this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData), this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData), this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData), this.ctxLineCap = this.contextData.lineCap.bind(this.contextData), this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData), this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData), this.ctxFill = this.contextData.fill.bind(this.contextData), this.ctxFillRect = this.contextData.fillRect.bind(this.contextData), this.ctxStroke = this.contextData.stroke.bind(this.contextData), this.save = this.contextData.save.bind(this.contextData));\n        }\n        function HBaseElement() {}\n        function HSolidElement(t1, e1, r1) {\n            this.initElement(t1, e1, r1);\n        }\n        function HShapeElement(t1, e1, r1) {\n            this.shapes = [], this.shapesData = t1.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.shapesContainer = createNS(\"g\"), this.initElement(t1, e1, r1), this.prevViewData = [], this.currentBBox = {\n                x: 999999,\n                y: -999999,\n                h: 0,\n                w: 0\n            };\n        }\n        function HTextElement(t1, e1, r1) {\n            this.textSpans = [], this.textPaths = [], this.currentBBox = {\n                x: 999999,\n                y: -999999,\n                h: 0,\n                w: 0\n            }, this.renderType = \"svg\", this.isMasked = !1, this.initElement(t1, e1, r1);\n        }\n        function HCameraElement(t1, e1, r1) {\n            this.initFrame(), this.initBaseData(t1, e1, r1), this.initHierarchy();\n            var i1 = PropertyFactory.getProp;\n            if (this.pe = i1(this, t1.pe, 0, 0, this), t1.ks.p.s ? (this.px = i1(this, t1.ks.p.x, 1, 0, this), this.py = i1(this, t1.ks.p.y, 1, 0, this), this.pz = i1(this, t1.ks.p.z, 1, 0, this)) : this.p = i1(this, t1.ks.p, 1, 0, this), t1.ks.a && (this.a = i1(this, t1.ks.a, 1, 0, this)), t1.ks.or.k.length && t1.ks.or.k[0].to) {\n                var s1, a1 = t1.ks.or.k.length;\n                for(s1 = 0; s1 < a1; s1 += 1)t1.ks.or.k[s1].to = null, t1.ks.or.k[s1].ti = null;\n            }\n            this.or = i1(this, t1.ks.or, 1, degToRads, this), this.or.sh = !0, this.rx = i1(this, t1.ks.rx, 0, degToRads, this), this.ry = i1(this, t1.ks.ry, 0, degToRads, this), this.rz = i1(this, t1.ks.rz, 0, degToRads, this), this.mat = new Matrix, this._prevMat = new Matrix, this._isFirstFrame = !0, this.finalTransform = {\n                mProp: this\n            };\n        }\n        function HImageElement(t1, e1, r1) {\n            this.assetData = e1.getAssetData(t1.refId), this.initElement(t1, e1, r1);\n        }\n        function HybridRendererBase(t1, e1) {\n            this.animationItem = t1, this.layers = null, this.renderedFrame = -1, this.renderConfig = {\n                className: e1 && e1.className || \"\",\n                imagePreserveAspectRatio: e1 && e1.imagePreserveAspectRatio || \"xMidYMid slice\",\n                hideOnTransparent: !(e1 && !1 === e1.hideOnTransparent),\n                filterSize: {\n                    width: e1 && e1.filterSize && e1.filterSize.width || \"400%\",\n                    height: e1 && e1.filterSize && e1.filterSize.height || \"400%\",\n                    x: e1 && e1.filterSize && e1.filterSize.x || \"-100%\",\n                    y: e1 && e1.filterSize && e1.filterSize.y || \"-100%\"\n                }\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                renderConfig: this.renderConfig\n            }, this.pendingElements = [], this.elements = [], this.threeDElements = [], this.destroyed = !1, this.camera = null, this.supports3d = !0, this.rendererType = \"html\";\n        }\n        function HCompElement(t1, e1, r1) {\n            this.layers = t1.layers, this.supports3d = !t1.hasMask, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t1, e1, r1), this.tm = t1.tm ? PropertyFactory.getProp(this, t1.tm, 0, e1.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function HybridRenderer(t1, e1) {\n            this.animationItem = t1, this.layers = null, this.renderedFrame = -1, this.renderConfig = {\n                className: e1 && e1.className || \"\",\n                imagePreserveAspectRatio: e1 && e1.imagePreserveAspectRatio || \"xMidYMid slice\",\n                hideOnTransparent: !(e1 && !1 === e1.hideOnTransparent),\n                filterSize: {\n                    width: e1 && e1.filterSize && e1.filterSize.width || \"400%\",\n                    height: e1 && e1.filterSize && e1.filterSize.height || \"400%\",\n                    x: e1 && e1.filterSize && e1.filterSize.x || \"-100%\",\n                    y: e1 && e1.filterSize && e1.filterSize.y || \"-100%\"\n                },\n                runExpressions: !e1 || void 0 === e1.runExpressions || e1.runExpressions\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                renderConfig: this.renderConfig\n            }, this.pendingElements = [], this.elements = [], this.threeDElements = [], this.destroyed = !1, this.camera = null, this.supports3d = !0, this.rendererType = \"html\";\n        }\n        CVBaseElement.prototype = {\n            createElements: function() {},\n            initRendererElement: function() {},\n            createContainerElements: function() {\n                if (this.data.tt >= 1) {\n                    this.buffers = [];\n                    var t1 = this.globalData.canvasContext, e1 = assetLoader.createCanvas(t1.canvas.width, t1.canvas.height);\n                    this.buffers.push(e1);\n                    var r1 = assetLoader.createCanvas(t1.canvas.width, t1.canvas.height);\n                    this.buffers.push(r1), this.data.tt >= 3 && !document._isProxy && assetLoader.loadLumaCanvas();\n                }\n                this.canvasContext = this.globalData.canvasContext, this.transformCanvas = this.globalData.transformCanvas, this.renderableEffectsManager = new CVEffects(this), this.searchEffectTransforms();\n            },\n            createContent: function() {},\n            setBlendMode: function() {\n                var t1 = this.globalData;\n                if (t1.blendMode !== this.data.bm) {\n                    t1.blendMode = this.data.bm;\n                    var e1 = getBlendMode(this.data.bm);\n                    t1.canvasContext.globalCompositeOperation = e1;\n                }\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new CVMaskElement(this.data, this), this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n            },\n            hideElement: function() {\n                this.hidden || this.isInRange && !this.isTransparent || (this.hidden = !0);\n            },\n            showElement: function() {\n                this.isInRange && !this.isTransparent && (this.hidden = !1, this._isFirstFrame = !0, this.maskManager._isFirstFrame = !0);\n            },\n            clearCanvas: function(t1) {\n                t1.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);\n            },\n            prepareLayer: function() {\n                if (this.data.tt >= 1) {\n                    var t1 = this.buffers[0].getContext(\"2d\");\n                    this.clearCanvas(t1), t1.drawImage(this.canvasContext.canvas, 0, 0), this.currentTransform = this.canvasContext.getTransform(), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.setTransform(this.currentTransform);\n                }\n            },\n            exitLayer: function() {\n                if (this.data.tt >= 1) {\n                    var t1 = this.buffers[1], e1 = t1.getContext(\"2d\");\n                    if (this.clearCanvas(e1), e1.drawImage(this.canvasContext.canvas, 0, 0), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.setTransform(this.currentTransform), this.comp.getElementById(\"tp\" in this.data ? this.data.tp : this.data.ind - 1).renderFrame(!0), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.data.tt >= 3 && !document._isProxy) {\n                        var r1 = assetLoader.getLumaCanvas(this.canvasContext.canvas);\n                        r1.getContext(\"2d\").drawImage(this.canvasContext.canvas, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.drawImage(r1, 0, 0);\n                    }\n                    this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt], this.canvasContext.drawImage(t1, 0, 0), this.canvasContext.globalCompositeOperation = \"destination-over\", this.canvasContext.drawImage(this.buffers[0], 0, 0), this.canvasContext.setTransform(this.currentTransform), this.canvasContext.globalCompositeOperation = \"source-over\";\n                }\n            },\n            renderFrame: function(t1) {\n                if (!this.hidden && !this.data.hd && (1 !== this.data.td || t1)) {\n                    this.renderTransform(), this.renderRenderable(), this.renderLocalTransform(), this.setBlendMode();\n                    var e1 = 0 === this.data.ty;\n                    this.prepareLayer(), this.globalData.renderer.save(e1), this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props), this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity), this.renderInnerContent(), this.globalData.renderer.restore(e1), this.exitLayer(), this.maskManager.hasMasks && this.globalData.renderer.restore(!0), this._isFirstFrame && (this._isFirstFrame = !1);\n                }\n            },\n            destroy: function() {\n                this.canvasContext = null, this.data = null, this.globalData = null, this.maskManager.destroy();\n            },\n            mHelper: new Matrix\n        }, CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement, CVBaseElement.prototype.show = CVBaseElement.prototype.showElement, CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            IShapeElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVShapeElement), CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement, CVShapeElement.prototype.transformHelper = {\n            opacity: 1,\n            _opMdf: !1\n        }, CVShapeElement.prototype.dashResetter = [], CVShapeElement.prototype.createContent = function() {\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []);\n        }, CVShapeElement.prototype.createStyleElement = function(t1, e1) {\n            var r1 = {\n                data: t1,\n                type: t1.ty,\n                preTransforms: this.transformsManager.addTransformSequence(e1),\n                transforms: [],\n                elements: [],\n                closed: !0 === t1.hd\n            }, i1 = {};\n            if (\"fl\" === t1.ty || \"st\" === t1.ty ? (i1.c = PropertyFactory.getProp(this, t1.c, 1, 255, this), i1.c.k || (r1.co = \"rgb(\" + bmFloor(i1.c.v[0]) + \",\" + bmFloor(i1.c.v[1]) + \",\" + bmFloor(i1.c.v[2]) + \")\")) : \"gf\" !== t1.ty && \"gs\" !== t1.ty || (i1.s = PropertyFactory.getProp(this, t1.s, 1, null, this), i1.e = PropertyFactory.getProp(this, t1.e, 1, null, this), i1.h = PropertyFactory.getProp(this, t1.h || {\n                k: 0\n            }, 0, .01, this), i1.a = PropertyFactory.getProp(this, t1.a || {\n                k: 0\n            }, 0, degToRads, this), i1.g = new GradientProperty(this, t1.g, this)), i1.o = PropertyFactory.getProp(this, t1.o, 0, .01, this), \"st\" === t1.ty || \"gs\" === t1.ty) {\n                if (r1.lc = lineCapEnum[t1.lc || 2], r1.lj = lineJoinEnum[t1.lj || 2], 1 == t1.lj && (r1.ml = t1.ml), i1.w = PropertyFactory.getProp(this, t1.w, 0, null, this), i1.w.k || (r1.wi = i1.w.v), t1.d) {\n                    var s1 = new DashProperty(this, t1.d, \"canvas\", this);\n                    i1.d = s1, i1.d.k || (r1.da = i1.d.dashArray, r1.do = i1.d.dashoffset[0]);\n                }\n            } else r1.r = 2 === t1.r ? \"evenodd\" : \"nonzero\";\n            return this.stylesList.push(r1), i1.style = r1, i1;\n        }, CVShapeElement.prototype.createGroupElement = function() {\n            return {\n                it: [],\n                prevViewData: []\n            };\n        }, CVShapeElement.prototype.createTransformElement = function(t1) {\n            return {\n                transform: {\n                    opacity: 1,\n                    _opMdf: !1,\n                    key: this.transformsManager.getNewKey(),\n                    op: PropertyFactory.getProp(this, t1.o, 0, .01, this),\n                    mProps: TransformPropertyFactory.getTransformProperty(this, t1, this)\n                }\n            };\n        }, CVShapeElement.prototype.createShapeElement = function(t1) {\n            var e1 = new CVShapeData(this, t1, this.stylesList, this.transformsManager);\n            return this.shapes.push(e1), this.addShapeToModifiers(e1), e1;\n        }, CVShapeElement.prototype.reloadShapes = function() {\n            var t1;\n            this._isFirstFrame = !0;\n            var e1 = this.itemsData.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.prevViewData[t1] = this.itemsData[t1];\n            for(this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []), e1 = this.dynamicProperties.length, t1 = 0; t1 < e1; t1 += 1)this.dynamicProperties[t1].getValue();\n            this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame);\n        }, CVShapeElement.prototype.addTransformToStyleList = function(t1) {\n            var e1, r1 = this.stylesList.length;\n            for(e1 = 0; e1 < r1; e1 += 1)this.stylesList[e1].closed || this.stylesList[e1].transforms.push(t1);\n        }, CVShapeElement.prototype.removeTransformFromStyleList = function() {\n            var t1, e1 = this.stylesList.length;\n            for(t1 = 0; t1 < e1; t1 += 1)this.stylesList[t1].closed || this.stylesList[t1].transforms.pop();\n        }, CVShapeElement.prototype.closeStyles = function(t1) {\n            var e1, r1 = t1.length;\n            for(e1 = 0; e1 < r1; e1 += 1)t1[e1].closed = !0;\n        }, CVShapeElement.prototype.searchShapes = function(t1, e1, r1, i1, s1) {\n            var a1, n1, o1, h1, l1, p1, c1 = t1.length - 1, f1 = [], u1 = [], d1 = [].concat(s1);\n            for(a1 = c1; a1 >= 0; a1 -= 1){\n                if ((h1 = this.searchProcessedElement(t1[a1])) ? e1[a1] = r1[h1 - 1] : t1[a1]._shouldRender = i1, \"fl\" === t1[a1].ty || \"st\" === t1[a1].ty || \"gf\" === t1[a1].ty || \"gs\" === t1[a1].ty) h1 ? e1[a1].style.closed = !1 : e1[a1] = this.createStyleElement(t1[a1], d1), f1.push(e1[a1].style);\n                else if (\"gr\" === t1[a1].ty) {\n                    if (h1) for(o1 = e1[a1].it.length, n1 = 0; n1 < o1; n1 += 1)e1[a1].prevViewData[n1] = e1[a1].it[n1];\n                    else e1[a1] = this.createGroupElement(t1[a1]);\n                    this.searchShapes(t1[a1].it, e1[a1].it, e1[a1].prevViewData, i1, d1);\n                } else \"tr\" === t1[a1].ty ? (h1 || (p1 = this.createTransformElement(t1[a1]), e1[a1] = p1), d1.push(e1[a1]), this.addTransformToStyleList(e1[a1])) : \"sh\" === t1[a1].ty || \"rc\" === t1[a1].ty || \"el\" === t1[a1].ty || \"sr\" === t1[a1].ty ? h1 || (e1[a1] = this.createShapeElement(t1[a1])) : \"tm\" === t1[a1].ty || \"rd\" === t1[a1].ty || \"pb\" === t1[a1].ty || \"zz\" === t1[a1].ty || \"op\" === t1[a1].ty ? (h1 ? (l1 = e1[a1]).closed = !1 : ((l1 = ShapeModifiers.getModifier(t1[a1].ty)).init(this, t1[a1]), e1[a1] = l1, this.shapeModifiers.push(l1)), u1.push(l1)) : \"rp\" === t1[a1].ty && (h1 ? (l1 = e1[a1]).closed = !0 : (l1 = ShapeModifiers.getModifier(t1[a1].ty), e1[a1] = l1, l1.init(this, t1, a1, e1), this.shapeModifiers.push(l1), i1 = !1), u1.push(l1));\n                this.addProcessedElement(t1[a1], a1 + 1);\n            }\n            for(this.removeTransformFromStyleList(), this.closeStyles(f1), c1 = u1.length, a1 = 0; a1 < c1; a1 += 1)u1[a1].closed = !0;\n        }, CVShapeElement.prototype.renderInnerContent = function() {\n            this.transformHelper.opacity = 1, this.transformHelper._opMdf = !1, this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame), this.renderShape(this.transformHelper, this.shapesData, this.itemsData, !0);\n        }, CVShapeElement.prototype.renderShapeTransform = function(t1, e1) {\n            (t1._opMdf || e1.op._mdf || this._isFirstFrame) && (e1.opacity = t1.opacity, e1.opacity *= e1.op.v, e1._opMdf = !0);\n        }, CVShapeElement.prototype.drawLayer = function() {\n            var t1, e1, r1, i1, s1, a1, n1, o1, h1, l1 = this.stylesList.length, p1 = this.globalData.renderer, c1 = this.globalData.canvasContext;\n            for(t1 = 0; t1 < l1; t1 += 1)if ((\"st\" !== (o1 = (h1 = this.stylesList[t1]).type) && \"gs\" !== o1 || 0 !== h1.wi) && h1.data._shouldRender && 0 !== h1.coOp && 0 !== this.globalData.currentGlobalAlpha) {\n                for(p1.save(), a1 = h1.elements, \"st\" === o1 || \"gs\" === o1 ? (p1.ctxStrokeStyle(\"st\" === o1 ? h1.co : h1.grd), p1.ctxLineWidth(h1.wi), p1.ctxLineCap(h1.lc), p1.ctxLineJoin(h1.lj), p1.ctxMiterLimit(h1.ml || 0)) : p1.ctxFillStyle(\"fl\" === o1 ? h1.co : h1.grd), p1.ctxOpacity(h1.coOp), \"st\" !== o1 && \"gs\" !== o1 && c1.beginPath(), p1.ctxTransform(h1.preTransforms.finalTransform.props), r1 = a1.length, e1 = 0; e1 < r1; e1 += 1){\n                    for(\"st\" !== o1 && \"gs\" !== o1 || (c1.beginPath(), h1.da && (c1.setLineDash(h1.da), c1.lineDashOffset = h1.do)), s1 = (n1 = a1[e1].trNodes).length, i1 = 0; i1 < s1; i1 += 1)\"m\" === n1[i1].t ? c1.moveTo(n1[i1].p[0], n1[i1].p[1]) : \"c\" === n1[i1].t ? c1.bezierCurveTo(n1[i1].pts[0], n1[i1].pts[1], n1[i1].pts[2], n1[i1].pts[3], n1[i1].pts[4], n1[i1].pts[5]) : c1.closePath();\n                    \"st\" !== o1 && \"gs\" !== o1 || (p1.ctxStroke(), h1.da && c1.setLineDash(this.dashResetter));\n                }\n                \"st\" !== o1 && \"gs\" !== o1 && this.globalData.renderer.ctxFill(h1.r), p1.restore();\n            }\n        }, CVShapeElement.prototype.renderShape = function(t1, e1, r1, i1) {\n            var s1, a1;\n            for(a1 = t1, s1 = e1.length - 1; s1 >= 0; s1 -= 1)\"tr\" === e1[s1].ty ? (a1 = r1[s1].transform, this.renderShapeTransform(t1, a1)) : \"sh\" === e1[s1].ty || \"el\" === e1[s1].ty || \"rc\" === e1[s1].ty || \"sr\" === e1[s1].ty ? this.renderPath(e1[s1], r1[s1]) : \"fl\" === e1[s1].ty ? this.renderFill(e1[s1], r1[s1], a1) : \"st\" === e1[s1].ty ? this.renderStroke(e1[s1], r1[s1], a1) : \"gf\" === e1[s1].ty || \"gs\" === e1[s1].ty ? this.renderGradientFill(e1[s1], r1[s1], a1) : \"gr\" === e1[s1].ty ? this.renderShape(a1, e1[s1].it, r1[s1].it) : e1[s1].ty;\n            i1 && this.drawLayer();\n        }, CVShapeElement.prototype.renderStyledShape = function(t1, e1) {\n            if (this._isFirstFrame || e1._mdf || t1.transforms._mdf) {\n                var r1, i1, s1, a1 = t1.trNodes, n1 = e1.paths, o1 = n1._length;\n                a1.length = 0;\n                var h1 = t1.transforms.finalTransform;\n                for(s1 = 0; s1 < o1; s1 += 1){\n                    var l1 = n1.shapes[s1];\n                    if (l1 && l1.v) {\n                        for(i1 = l1._length, r1 = 1; r1 < i1; r1 += 1)1 === r1 && a1.push({\n                            t: \"m\",\n                            p: h1.applyToPointArray(l1.v[0][0], l1.v[0][1], 0)\n                        }), a1.push({\n                            t: \"c\",\n                            pts: h1.applyToTriplePoints(l1.o[r1 - 1], l1.i[r1], l1.v[r1])\n                        });\n                        1 === i1 && a1.push({\n                            t: \"m\",\n                            p: h1.applyToPointArray(l1.v[0][0], l1.v[0][1], 0)\n                        }), l1.c && i1 && (a1.push({\n                            t: \"c\",\n                            pts: h1.applyToTriplePoints(l1.o[r1 - 1], l1.i[0], l1.v[0])\n                        }), a1.push({\n                            t: \"z\"\n                        }));\n                    }\n                }\n                t1.trNodes = a1;\n            }\n        }, CVShapeElement.prototype.renderPath = function(t1, e1) {\n            if (!0 !== t1.hd && t1._shouldRender) {\n                var r1, i1 = e1.styledShapes.length;\n                for(r1 = 0; r1 < i1; r1 += 1)this.renderStyledShape(e1.styledShapes[r1], e1.sh);\n            }\n        }, CVShapeElement.prototype.renderFill = function(t1, e1, r1) {\n            var i1 = e1.style;\n            (e1.c._mdf || this._isFirstFrame) && (i1.co = \"rgb(\" + bmFloor(e1.c.v[0]) + \",\" + bmFloor(e1.c.v[1]) + \",\" + bmFloor(e1.c.v[2]) + \")\"), (e1.o._mdf || r1._opMdf || this._isFirstFrame) && (i1.coOp = e1.o.v * r1.opacity);\n        }, CVShapeElement.prototype.renderGradientFill = function(t1, e1, r1) {\n            var i1, s1 = e1.style;\n            if (!s1.grd || e1.g._mdf || e1.s._mdf || e1.e._mdf || 1 !== t1.t && (e1.h._mdf || e1.a._mdf)) {\n                var a1, n1 = this.globalData.canvasContext, o1 = e1.s.v, h1 = e1.e.v;\n                if (1 === t1.t) i1 = n1.createLinearGradient(o1[0], o1[1], h1[0], h1[1]);\n                else {\n                    var l1 = Math.sqrt(Math.pow(o1[0] - h1[0], 2) + Math.pow(o1[1] - h1[1], 2)), p1 = Math.atan2(h1[1] - o1[1], h1[0] - o1[0]), c1 = e1.h.v;\n                    c1 >= 1 ? c1 = .99 : c1 <= -1 && (c1 = -.99);\n                    var f1 = l1 * c1, u1 = Math.cos(p1 + e1.a.v) * f1 + o1[0], d1 = Math.sin(p1 + e1.a.v) * f1 + o1[1];\n                    i1 = n1.createRadialGradient(u1, d1, 0, o1[0], o1[1], l1);\n                }\n                var m1 = t1.g.p, y1 = e1.g.c, g1 = 1;\n                for(a1 = 0; a1 < m1; a1 += 1)e1.g._hasOpacity && e1.g._collapsable && (g1 = e1.g.o[2 * a1 + 1]), i1.addColorStop(y1[4 * a1] / 100, \"rgba(\" + y1[4 * a1 + 1] + \",\" + y1[4 * a1 + 2] + \",\" + y1[4 * a1 + 3] + \",\" + g1 + \")\");\n                s1.grd = i1;\n            }\n            s1.coOp = e1.o.v * r1.opacity;\n        }, CVShapeElement.prototype.renderStroke = function(t1, e1, r1) {\n            var i1 = e1.style, s1 = e1.d;\n            s1 && (s1._mdf || this._isFirstFrame) && (i1.da = s1.dashArray, i1.do = s1.dashoffset[0]), (e1.c._mdf || this._isFirstFrame) && (i1.co = \"rgb(\" + bmFloor(e1.c.v[0]) + \",\" + bmFloor(e1.c.v[1]) + \",\" + bmFloor(e1.c.v[2]) + \")\"), (e1.o._mdf || r1._opMdf || this._isFirstFrame) && (i1.coOp = e1.o.v * r1.opacity), (e1.w._mdf || this._isFirstFrame) && (i1.wi = e1.w.v);\n        }, CVShapeElement.prototype.destroy = function() {\n            this.shapesData = null, this.globalData = null, this.canvasContext = null, this.stylesList.length = 0, this.itemsData.length = 0;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement,\n            ITextElement\n        ], CVTextElement), CVTextElement.prototype.tHelper = createTag(\"canvas\").getContext(\"2d\"), CVTextElement.prototype.buildNewText = function() {\n            var t1 = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(t1.l ? t1.l.length : 0);\n            var e1 = !1;\n            t1.fc ? (e1 = !0, this.values.fill = this.buildColor(t1.fc)) : this.values.fill = \"rgba(0,0,0,0)\", this.fill = e1;\n            var r1 = !1;\n            t1.sc && (r1 = !0, this.values.stroke = this.buildColor(t1.sc), this.values.sWidth = t1.sw);\n            var i1, s1, a1, n1, o1, h1, l1, p1, c1, f1, u1, d1, m1 = this.globalData.fontManager.getFontByName(t1.f), y1 = t1.l, g1 = this.mHelper;\n            this.stroke = r1, this.values.fValue = t1.finalSize + \"px \" + this.globalData.fontManager.getFontByName(t1.f).fFamily, s1 = t1.finalText.length;\n            var v1 = this.data.singleShape, b1 = .001 * t1.tr * t1.finalSize, _1 = 0, P1 = 0, S1 = !0, E1 = 0;\n            for(i1 = 0; i1 < s1; i1 += 1){\n                n1 = (a1 = this.globalData.fontManager.getCharData(t1.finalText[i1], m1.fStyle, this.globalData.fontManager.getFontByName(t1.f).fFamily)) && a1.data || {}, g1.reset(), v1 && y1[i1].n && (_1 = -b1, P1 += t1.yOffset, P1 += S1 ? 1 : 0, S1 = !1), c1 = (l1 = n1.shapes ? n1.shapes[0].it : []).length, g1.scale(t1.finalSize / 100, t1.finalSize / 100), v1 && this.applyTextPropertiesToMatrix(t1, g1, y1[i1].line, _1, P1), u1 = createSizedArray(c1 - 1);\n                var x1 = 0;\n                for(p1 = 0; p1 < c1; p1 += 1)if (\"sh\" === l1[p1].ty) {\n                    for(h1 = l1[p1].ks.k.i.length, f1 = l1[p1].ks.k, d1 = [], o1 = 1; o1 < h1; o1 += 1)1 === o1 && d1.push(g1.applyToX(f1.v[0][0], f1.v[0][1], 0), g1.applyToY(f1.v[0][0], f1.v[0][1], 0)), d1.push(g1.applyToX(f1.o[o1 - 1][0], f1.o[o1 - 1][1], 0), g1.applyToY(f1.o[o1 - 1][0], f1.o[o1 - 1][1], 0), g1.applyToX(f1.i[o1][0], f1.i[o1][1], 0), g1.applyToY(f1.i[o1][0], f1.i[o1][1], 0), g1.applyToX(f1.v[o1][0], f1.v[o1][1], 0), g1.applyToY(f1.v[o1][0], f1.v[o1][1], 0));\n                    d1.push(g1.applyToX(f1.o[o1 - 1][0], f1.o[o1 - 1][1], 0), g1.applyToY(f1.o[o1 - 1][0], f1.o[o1 - 1][1], 0), g1.applyToX(f1.i[0][0], f1.i[0][1], 0), g1.applyToY(f1.i[0][0], f1.i[0][1], 0), g1.applyToX(f1.v[0][0], f1.v[0][1], 0), g1.applyToY(f1.v[0][0], f1.v[0][1], 0)), u1[x1] = d1, x1 += 1;\n                }\n                v1 && (_1 += y1[i1].l, _1 += b1), this.textSpans[E1] ? this.textSpans[E1].elem = u1 : this.textSpans[E1] = {\n                    elem: u1\n                }, E1 += 1;\n            }\n        }, CVTextElement.prototype.renderInnerContent = function() {\n            var t1, e1, r1, i1, s1, a1;\n            this.validateText(), this.canvasContext.font = this.values.fValue, this.globalData.renderer.ctxLineCap(\"butt\"), this.globalData.renderer.ctxLineJoin(\"miter\"), this.globalData.renderer.ctxMiterLimit(4), this.data.singleShape || this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n            var n1, o1 = this.textAnimator.renderedLetters, h1 = this.textProperty.currentData.l;\n            e1 = h1.length;\n            var l1, p1, c1 = null, f1 = null, u1 = null, d1 = this.globalData.renderer;\n            for(t1 = 0; t1 < e1; t1 += 1)if (!h1[t1].n) {\n                if ((n1 = o1[t1]) && (d1.save(), d1.ctxTransform(n1.p), d1.ctxOpacity(n1.o)), this.fill) {\n                    for(n1 && n1.fc ? c1 !== n1.fc && (d1.ctxFillStyle(n1.fc), c1 = n1.fc) : c1 !== this.values.fill && (c1 = this.values.fill, d1.ctxFillStyle(this.values.fill)), i1 = (l1 = this.textSpans[t1].elem).length, this.globalData.canvasContext.beginPath(), r1 = 0; r1 < i1; r1 += 1)for(a1 = (p1 = l1[r1]).length, this.globalData.canvasContext.moveTo(p1[0], p1[1]), s1 = 2; s1 < a1; s1 += 6)this.globalData.canvasContext.bezierCurveTo(p1[s1], p1[s1 + 1], p1[s1 + 2], p1[s1 + 3], p1[s1 + 4], p1[s1 + 5]);\n                    this.globalData.canvasContext.closePath(), d1.ctxFill();\n                }\n                if (this.stroke) {\n                    for(n1 && n1.sw ? u1 !== n1.sw && (u1 = n1.sw, d1.ctxLineWidth(n1.sw)) : u1 !== this.values.sWidth && (u1 = this.values.sWidth, d1.ctxLineWidth(this.values.sWidth)), n1 && n1.sc ? f1 !== n1.sc && (f1 = n1.sc, d1.ctxStrokeStyle(n1.sc)) : f1 !== this.values.stroke && (f1 = this.values.stroke, d1.ctxStrokeStyle(this.values.stroke)), i1 = (l1 = this.textSpans[t1].elem).length, this.globalData.canvasContext.beginPath(), r1 = 0; r1 < i1; r1 += 1)for(a1 = (p1 = l1[r1]).length, this.globalData.canvasContext.moveTo(p1[0], p1[1]), s1 = 2; s1 < a1; s1 += 6)this.globalData.canvasContext.bezierCurveTo(p1[s1], p1[s1 + 1], p1[s1 + 2], p1[s1 + 3], p1[s1 + 4], p1[s1 + 5]);\n                    this.globalData.canvasContext.closePath(), d1.ctxStroke();\n                }\n                n1 && this.globalData.renderer.restore();\n            }\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVImageElement), CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVImageElement.prototype.createContent = function() {\n            if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {\n                var t1 = createTag(\"canvas\");\n                t1.width = this.assetData.w, t1.height = this.assetData.h;\n                var e1, r1, i1 = t1.getContext(\"2d\"), s1 = this.img.width, a1 = this.img.height, n1 = s1 / a1, o1 = this.assetData.w / this.assetData.h, h1 = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;\n                n1 > o1 && \"xMidYMid slice\" === h1 || n1 < o1 && \"xMidYMid slice\" !== h1 ? e1 = (r1 = a1) * o1 : r1 = (e1 = s1) / o1, i1.drawImage(this.img, (s1 - e1) / 2, (a1 - r1) / 2, e1, r1, 0, 0, this.assetData.w, this.assetData.h), this.img = t1;\n            }\n        }, CVImageElement.prototype.renderInnerContent = function() {\n            this.canvasContext.drawImage(this.img, 0, 0);\n        }, CVImageElement.prototype.destroy = function() {\n            this.img = null;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVSolidElement), CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVSolidElement.prototype.renderInnerContent = function() {\n            this.globalData.renderer.ctxFillStyle(this.data.sc), this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);\n        }, extendPrototype([\n            BaseRenderer\n        ], CanvasRendererBase), CanvasRendererBase.prototype.createShape = function(t1) {\n            return new CVShapeElement(t1, this.globalData, this);\n        }, CanvasRendererBase.prototype.createText = function(t1) {\n            return new CVTextElement(t1, this.globalData, this);\n        }, CanvasRendererBase.prototype.createImage = function(t1) {\n            return new CVImageElement(t1, this.globalData, this);\n        }, CanvasRendererBase.prototype.createSolid = function(t1) {\n            return new CVSolidElement(t1, this.globalData, this);\n        }, CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull, CanvasRendererBase.prototype.ctxTransform = function(t1) {\n            1 === t1[0] && 0 === t1[1] && 0 === t1[4] && 1 === t1[5] && 0 === t1[12] && 0 === t1[13] || this.canvasContext.transform(t1[0], t1[1], t1[4], t1[5], t1[12], t1[13]);\n        }, CanvasRendererBase.prototype.ctxOpacity = function(t1) {\n            this.canvasContext.globalAlpha *= t1 < 0 ? 0 : t1;\n        }, CanvasRendererBase.prototype.ctxFillStyle = function(t1) {\n            this.canvasContext.fillStyle = t1;\n        }, CanvasRendererBase.prototype.ctxStrokeStyle = function(t1) {\n            this.canvasContext.strokeStyle = t1;\n        }, CanvasRendererBase.prototype.ctxLineWidth = function(t1) {\n            this.canvasContext.lineWidth = t1;\n        }, CanvasRendererBase.prototype.ctxLineCap = function(t1) {\n            this.canvasContext.lineCap = t1;\n        }, CanvasRendererBase.prototype.ctxLineJoin = function(t1) {\n            this.canvasContext.lineJoin = t1;\n        }, CanvasRendererBase.prototype.ctxMiterLimit = function(t1) {\n            this.canvasContext.miterLimit = t1;\n        }, CanvasRendererBase.prototype.ctxFill = function(t1) {\n            this.canvasContext.fill(t1);\n        }, CanvasRendererBase.prototype.ctxFillRect = function(t1, e1, r1, i1) {\n            this.canvasContext.fillRect(t1, e1, r1, i1);\n        }, CanvasRendererBase.prototype.ctxStroke = function() {\n            this.canvasContext.stroke();\n        }, CanvasRendererBase.prototype.reset = function() {\n            this.renderConfig.clearCanvas ? this.contextData.reset() : this.canvasContext.restore();\n        }, CanvasRendererBase.prototype.save = function() {\n            this.canvasContext.save();\n        }, CanvasRendererBase.prototype.restore = function(t1) {\n            this.renderConfig.clearCanvas ? (t1 && (this.globalData.blendMode = \"source-over\"), this.contextData.restore(t1)) : this.canvasContext.restore();\n        }, CanvasRendererBase.prototype.configAnimation = function(t1) {\n            if (this.animationItem.wrapper) {\n                this.animationItem.container = createTag(\"canvas\");\n                var e1 = this.animationItem.container.style;\n                e1.width = \"100%\", e1.height = \"100%\";\n                var r1 = \"0px 0px 0px\";\n                e1.transformOrigin = r1, e1.mozTransformOrigin = r1, e1.webkitTransformOrigin = r1, e1[\"-webkit-transform\"] = r1, e1.contentVisibility = this.renderConfig.contentVisibility, this.animationItem.wrapper.appendChild(this.animationItem.container), this.canvasContext = this.animationItem.container.getContext(\"2d\"), this.renderConfig.className && this.animationItem.container.setAttribute(\"class\", this.renderConfig.className), this.renderConfig.id && this.animationItem.container.setAttribute(\"id\", this.renderConfig.id);\n            } else this.canvasContext = this.renderConfig.context;\n            this.contextData.setContext(this.canvasContext), this.data = t1, this.layers = t1.layers, this.transformCanvas = {\n                w: t1.w,\n                h: t1.h,\n                sx: 0,\n                sy: 0,\n                tx: 0,\n                ty: 0\n            }, this.setupGlobalData(t1, document.body), this.globalData.canvasContext = this.canvasContext, this.globalData.renderer = this, this.globalData.isDashed = !1, this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.globalData.transformCanvas = this.transformCanvas, this.elements = createSizedArray(t1.layers.length), this.updateContainerSize();\n        }, CanvasRendererBase.prototype.updateContainerSize = function(t1, e1) {\n            var r1, i1, s1, a1;\n            if (this.reset(), t1 ? (r1 = t1, i1 = e1, this.canvasContext.canvas.width = r1, this.canvasContext.canvas.height = i1) : (this.animationItem.wrapper && this.animationItem.container ? (r1 = this.animationItem.wrapper.offsetWidth, i1 = this.animationItem.wrapper.offsetHeight) : (r1 = this.canvasContext.canvas.width, i1 = this.canvasContext.canvas.height), this.canvasContext.canvas.width = r1 * this.renderConfig.dpr, this.canvasContext.canvas.height = i1 * this.renderConfig.dpr), -1 !== this.renderConfig.preserveAspectRatio.indexOf(\"meet\") || -1 !== this.renderConfig.preserveAspectRatio.indexOf(\"slice\")) {\n                var n1 = this.renderConfig.preserveAspectRatio.split(\" \"), o1 = n1[1] || \"meet\", h1 = n1[0] || \"xMidYMid\", l1 = h1.substr(0, 4), p1 = h1.substr(4);\n                s1 = r1 / i1, (a1 = this.transformCanvas.w / this.transformCanvas.h) > s1 && \"meet\" === o1 || a1 < s1 && \"slice\" === o1 ? (this.transformCanvas.sx = r1 / (this.transformCanvas.w / this.renderConfig.dpr), this.transformCanvas.sy = r1 / (this.transformCanvas.w / this.renderConfig.dpr)) : (this.transformCanvas.sx = i1 / (this.transformCanvas.h / this.renderConfig.dpr), this.transformCanvas.sy = i1 / (this.transformCanvas.h / this.renderConfig.dpr)), this.transformCanvas.tx = \"xMid\" === l1 && (a1 < s1 && \"meet\" === o1 || a1 > s1 && \"slice\" === o1) ? (r1 - this.transformCanvas.w * (i1 / this.transformCanvas.h)) / 2 * this.renderConfig.dpr : \"xMax\" === l1 && (a1 < s1 && \"meet\" === o1 || a1 > s1 && \"slice\" === o1) ? (r1 - this.transformCanvas.w * (i1 / this.transformCanvas.h)) * this.renderConfig.dpr : 0, this.transformCanvas.ty = \"YMid\" === p1 && (a1 > s1 && \"meet\" === o1 || a1 < s1 && \"slice\" === o1) ? (i1 - this.transformCanvas.h * (r1 / this.transformCanvas.w)) / 2 * this.renderConfig.dpr : \"YMax\" === p1 && (a1 > s1 && \"meet\" === o1 || a1 < s1 && \"slice\" === o1) ? (i1 - this.transformCanvas.h * (r1 / this.transformCanvas.w)) * this.renderConfig.dpr : 0;\n            } else \"none\" === this.renderConfig.preserveAspectRatio ? (this.transformCanvas.sx = r1 / (this.transformCanvas.w / this.renderConfig.dpr), this.transformCanvas.sy = i1 / (this.transformCanvas.h / this.renderConfig.dpr), this.transformCanvas.tx = 0, this.transformCanvas.ty = 0) : (this.transformCanvas.sx = this.renderConfig.dpr, this.transformCanvas.sy = this.renderConfig.dpr, this.transformCanvas.tx = 0, this.transformCanvas.ty = 0);\n            this.transformCanvas.props = [\n                this.transformCanvas.sx,\n                0,\n                0,\n                0,\n                0,\n                this.transformCanvas.sy,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                this.transformCanvas.tx,\n                this.transformCanvas.ty,\n                0,\n                1\n            ], this.ctxTransform(this.transformCanvas.props), this.canvasContext.beginPath(), this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h), this.canvasContext.closePath(), this.canvasContext.clip(), this.renderFrame(this.renderedFrame, !0);\n        }, CanvasRendererBase.prototype.destroy = function() {\n            var t1;\n            for(this.renderConfig.clearCanvas && this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), t1 = (this.layers ? this.layers.length : 0) - 1; t1 >= 0; t1 -= 1)this.elements[t1] && this.elements[t1].destroy && this.elements[t1].destroy();\n            this.elements.length = 0, this.globalData.canvasContext = null, this.animationItem.container = null, this.destroyed = !0;\n        }, CanvasRendererBase.prototype.renderFrame = function(t1, e1) {\n            if ((this.renderedFrame !== t1 || !0 !== this.renderConfig.clearCanvas || e1) && !this.destroyed && -1 !== t1) {\n                var r1;\n                this.renderedFrame = t1, this.globalData.frameNum = t1 - this.animationItem._isFirstFrame, this.globalData.frameId += 1, this.globalData._mdf = !this.renderConfig.clearCanvas || e1, this.globalData.projectInterface.currentFrame = t1;\n                var i1 = this.layers.length;\n                for(this.completeLayers || this.checkLayers(t1), r1 = i1 - 1; r1 >= 0; r1 -= 1)(this.completeLayers || this.elements[r1]) && this.elements[r1].prepareFrame(t1 - this.layers[r1].st);\n                if (this.globalData._mdf) {\n                    for(!0 === this.renderConfig.clearCanvas ? this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h) : this.save(), r1 = i1 - 1; r1 >= 0; r1 -= 1)(this.completeLayers || this.elements[r1]) && this.elements[r1].renderFrame();\n                    !0 !== this.renderConfig.clearCanvas && this.restore();\n                }\n            }\n        }, CanvasRendererBase.prototype.buildItem = function(t1) {\n            var e1 = this.elements;\n            if (!e1[t1] && 99 !== this.layers[t1].ty) {\n                var r1 = this.createItem(this.layers[t1], this, this.globalData);\n                e1[t1] = r1, r1.initExpressions();\n            }\n        }, CanvasRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;)this.pendingElements.pop().checkParenting();\n        }, CanvasRendererBase.prototype.hide = function() {\n            this.animationItem.container.style.display = \"none\";\n        }, CanvasRendererBase.prototype.show = function() {\n            this.animationItem.container.style.display = \"block\";\n        }, CVContextData.prototype.duplicate = function() {\n            var t1 = 2 * this._length, e1 = 0;\n            for(e1 = this._length; e1 < t1; e1 += 1)this.stack[e1] = new CanvasContext;\n            this._length = t1;\n        }, CVContextData.prototype.reset = function() {\n            this.cArrPos = 0, this.cTr.reset(), this.stack[this.cArrPos].opacity = 1;\n        }, CVContextData.prototype.restore = function(t1) {\n            this.cArrPos -= 1;\n            var e1, r1 = this.stack[this.cArrPos], i1 = r1.transform, s1 = this.cTr.props;\n            for(e1 = 0; e1 < 16; e1 += 1)s1[e1] = i1[e1];\n            if (t1) {\n                this.nativeContext.restore();\n                var a1 = this.stack[this.cArrPos + 1];\n                this.appliedFillStyle = a1.fillStyle, this.appliedStrokeStyle = a1.strokeStyle, this.appliedLineWidth = a1.lineWidth, this.appliedLineCap = a1.lineCap, this.appliedLineJoin = a1.lineJoin, this.appliedMiterLimit = a1.miterLimit;\n            }\n            this.nativeContext.setTransform(i1[0], i1[1], i1[4], i1[5], i1[12], i1[13]), (t1 || -1 !== r1.opacity && this.currentOpacity !== r1.opacity) && (this.nativeContext.globalAlpha = r1.opacity, this.currentOpacity = r1.opacity), this.currentFillStyle = r1.fillStyle, this.currentStrokeStyle = r1.strokeStyle, this.currentLineWidth = r1.lineWidth, this.currentLineCap = r1.lineCap, this.currentLineJoin = r1.lineJoin, this.currentMiterLimit = r1.miterLimit;\n        }, CVContextData.prototype.save = function(t1) {\n            t1 && this.nativeContext.save();\n            var e1 = this.cTr.props;\n            this._length <= this.cArrPos && this.duplicate();\n            var r1, i1 = this.stack[this.cArrPos];\n            for(r1 = 0; r1 < 16; r1 += 1)i1.transform[r1] = e1[r1];\n            this.cArrPos += 1;\n            var s1 = this.stack[this.cArrPos];\n            s1.opacity = i1.opacity, s1.fillStyle = i1.fillStyle, s1.strokeStyle = i1.strokeStyle, s1.lineWidth = i1.lineWidth, s1.lineCap = i1.lineCap, s1.lineJoin = i1.lineJoin, s1.miterLimit = i1.miterLimit;\n        }, CVContextData.prototype.setOpacity = function(t1) {\n            this.stack[this.cArrPos].opacity = t1;\n        }, CVContextData.prototype.setContext = function(t1) {\n            this.nativeContext = t1;\n        }, CVContextData.prototype.fillStyle = function(t1) {\n            this.stack[this.cArrPos].fillStyle !== t1 && (this.currentFillStyle = t1, this.stack[this.cArrPos].fillStyle = t1);\n        }, CVContextData.prototype.strokeStyle = function(t1) {\n            this.stack[this.cArrPos].strokeStyle !== t1 && (this.currentStrokeStyle = t1, this.stack[this.cArrPos].strokeStyle = t1);\n        }, CVContextData.prototype.lineWidth = function(t1) {\n            this.stack[this.cArrPos].lineWidth !== t1 && (this.currentLineWidth = t1, this.stack[this.cArrPos].lineWidth = t1);\n        }, CVContextData.prototype.lineCap = function(t1) {\n            this.stack[this.cArrPos].lineCap !== t1 && (this.currentLineCap = t1, this.stack[this.cArrPos].lineCap = t1);\n        }, CVContextData.prototype.lineJoin = function(t1) {\n            this.stack[this.cArrPos].lineJoin !== t1 && (this.currentLineJoin = t1, this.stack[this.cArrPos].lineJoin = t1);\n        }, CVContextData.prototype.miterLimit = function(t1) {\n            this.stack[this.cArrPos].miterLimit !== t1 && (this.currentMiterLimit = t1, this.stack[this.cArrPos].miterLimit = t1);\n        }, CVContextData.prototype.transform = function(t1) {\n            this.transformMat.cloneFromProps(t1);\n            var e1 = this.cTr;\n            this.transformMat.multiply(e1), e1.cloneFromProps(this.transformMat.props);\n            var r1 = e1.props;\n            this.nativeContext.setTransform(r1[0], r1[1], r1[4], r1[5], r1[12], r1[13]);\n        }, CVContextData.prototype.opacity = function(t1) {\n            var e1 = this.stack[this.cArrPos].opacity;\n            e1 *= t1 < 0 ? 0 : t1, this.stack[this.cArrPos].opacity !== e1 && (this.currentOpacity !== t1 && (this.nativeContext.globalAlpha = t1, this.currentOpacity = t1), this.stack[this.cArrPos].opacity = e1);\n        }, CVContextData.prototype.fill = function(t1) {\n            this.appliedFillStyle !== this.currentFillStyle && (this.appliedFillStyle = this.currentFillStyle, this.nativeContext.fillStyle = this.appliedFillStyle), this.nativeContext.fill(t1);\n        }, CVContextData.prototype.fillRect = function(t1, e1, r1, i1) {\n            this.appliedFillStyle !== this.currentFillStyle && (this.appliedFillStyle = this.currentFillStyle, this.nativeContext.fillStyle = this.appliedFillStyle), this.nativeContext.fillRect(t1, e1, r1, i1);\n        }, CVContextData.prototype.stroke = function() {\n            this.appliedStrokeStyle !== this.currentStrokeStyle && (this.appliedStrokeStyle = this.currentStrokeStyle, this.nativeContext.strokeStyle = this.appliedStrokeStyle), this.appliedLineWidth !== this.currentLineWidth && (this.appliedLineWidth = this.currentLineWidth, this.nativeContext.lineWidth = this.appliedLineWidth), this.appliedLineCap !== this.currentLineCap && (this.appliedLineCap = this.currentLineCap, this.nativeContext.lineCap = this.appliedLineCap), this.appliedLineJoin !== this.currentLineJoin && (this.appliedLineJoin = this.currentLineJoin, this.nativeContext.lineJoin = this.appliedLineJoin), this.appliedMiterLimit !== this.currentMiterLimit && (this.appliedMiterLimit = this.currentMiterLimit, this.nativeContext.miterLimit = this.appliedMiterLimit), this.nativeContext.stroke();\n        }, extendPrototype([\n            CanvasRendererBase,\n            ICompElement,\n            CVBaseElement\n        ], CVCompElement), CVCompElement.prototype.renderInnerContent = function() {\n            var t1, e1 = this.canvasContext;\n            for(e1.beginPath(), e1.moveTo(0, 0), e1.lineTo(this.data.w, 0), e1.lineTo(this.data.w, this.data.h), e1.lineTo(0, this.data.h), e1.lineTo(0, 0), e1.clip(), t1 = this.layers.length - 1; t1 >= 0; t1 -= 1)(this.completeLayers || this.elements[t1]) && this.elements[t1].renderFrame();\n        }, CVCompElement.prototype.destroy = function() {\n            var t1;\n            for(t1 = this.layers.length - 1; t1 >= 0; t1 -= 1)this.elements[t1] && this.elements[t1].destroy();\n            this.layers = null, this.elements = null;\n        }, CVCompElement.prototype.createComp = function(t1) {\n            return new CVCompElement(t1, this.globalData, this);\n        }, extendPrototype([\n            CanvasRendererBase\n        ], CanvasRenderer), CanvasRenderer.prototype.createComp = function(t1) {\n            return new CVCompElement(t1, this.globalData, this);\n        }, HBaseElement.prototype = {\n            checkBlendMode: function() {},\n            initRendererElement: function() {\n                this.baseElement = createTag(this.data.tg || \"div\"), this.data.hasMask ? (this.svgElement = createNS(\"svg\"), this.layerElement = createNS(\"g\"), this.maskedElement = this.layerElement, this.svgElement.appendChild(this.layerElement), this.baseElement.appendChild(this.svgElement)) : this.layerElement = this.baseElement, styleDiv(this.baseElement);\n            },\n            createContainerElements: function() {\n                this.renderableEffectsManager = new CVEffects(this), this.transformedElement = this.baseElement, this.maskedElement = this.layerElement, this.data.ln && this.layerElement.setAttribute(\"id\", this.data.ln), this.data.cl && this.layerElement.setAttribute(\"class\", this.data.cl), 0 !== this.data.bm && this.setBlendMode();\n            },\n            renderElement: function() {\n                var t1 = this.transformedElement ? this.transformedElement.style : {};\n                if (this.finalTransform._matMdf) {\n                    var e1 = this.finalTransform.mat.toCSS();\n                    t1.transform = e1, t1.webkitTransform = e1;\n                }\n                this.finalTransform._opMdf && (t1.opacity = this.finalTransform.mProp.o.v);\n            },\n            renderFrame: function() {\n                this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));\n            },\n            destroy: function() {\n                this.layerElement = null, this.transformedElement = null, this.matteElement && (this.matteElement = null), this.maskManager && (this.maskManager.destroy(), this.maskManager = null);\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new MaskElement(this.data, this, this.globalData);\n            },\n            addEffects: function() {},\n            setMatte: function() {}\n        }, HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement, HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy, HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], HSolidElement), HSolidElement.prototype.createContent = function() {\n            var t1;\n            this.data.hasMask ? ((t1 = createNS(\"rect\")).setAttribute(\"width\", this.data.sw), t1.setAttribute(\"height\", this.data.sh), t1.setAttribute(\"fill\", this.data.sc), this.svgElement.setAttribute(\"width\", this.data.sw), this.svgElement.setAttribute(\"height\", this.data.sh)) : ((t1 = createTag(\"div\")).style.width = this.data.sw + \"px\", t1.style.height = this.data.sh + \"px\", t1.style.backgroundColor = this.data.sc), this.layerElement.appendChild(t1);\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HSolidElement,\n            SVGShapeElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], HShapeElement), HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent, HShapeElement.prototype.createContent = function() {\n            var t1;\n            if (this.baseElement.style.fontSize = 0, this.data.hasMask) this.layerElement.appendChild(this.shapesContainer), t1 = this.svgElement;\n            else {\n                t1 = createNS(\"svg\");\n                var e1 = this.comp.data ? this.comp.data : this.globalData.compSize;\n                t1.setAttribute(\"width\", e1.w), t1.setAttribute(\"height\", e1.h), t1.appendChild(this.shapesContainer), this.layerElement.appendChild(t1);\n            }\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], !0), this.filterUniqueShapes(), this.shapeCont = t1;\n        }, HShapeElement.prototype.getTransformedPoint = function(t1, e1) {\n            var r1, i1 = t1.length;\n            for(r1 = 0; r1 < i1; r1 += 1)e1 = t1[r1].mProps.v.applyToPointArray(e1[0], e1[1], 0);\n            return e1;\n        }, HShapeElement.prototype.calculateShapeBoundingBox = function(t1, e1) {\n            var r1, i1, s1, a1, n1, o1 = t1.sh.v, h1 = t1.transformers, l1 = o1._length;\n            if (!(l1 <= 1)) {\n                for(r1 = 0; r1 < l1 - 1; r1 += 1)i1 = this.getTransformedPoint(h1, o1.v[r1]), s1 = this.getTransformedPoint(h1, o1.o[r1]), a1 = this.getTransformedPoint(h1, o1.i[r1 + 1]), n1 = this.getTransformedPoint(h1, o1.v[r1 + 1]), this.checkBounds(i1, s1, a1, n1, e1);\n                o1.c && (i1 = this.getTransformedPoint(h1, o1.v[r1]), s1 = this.getTransformedPoint(h1, o1.o[r1]), a1 = this.getTransformedPoint(h1, o1.i[0]), n1 = this.getTransformedPoint(h1, o1.v[0]), this.checkBounds(i1, s1, a1, n1, e1));\n            }\n        }, HShapeElement.prototype.checkBounds = function(t1, e1, r1, i1, s1) {\n            this.getBoundsOfCurve(t1, e1, r1, i1);\n            var a1 = this.shapeBoundingBox;\n            s1.x = bmMin(a1.left, s1.x), s1.xMax = bmMax(a1.right, s1.xMax), s1.y = bmMin(a1.top, s1.y), s1.yMax = bmMax(a1.bottom, s1.yMax);\n        }, HShapeElement.prototype.shapeBoundingBox = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, HShapeElement.prototype.tempBoundingBox = {\n            x: 0,\n            xMax: 0,\n            y: 0,\n            yMax: 0,\n            width: 0,\n            height: 0\n        }, HShapeElement.prototype.getBoundsOfCurve = function(t1, e1, r1, i1) {\n            for(var s1, a1, n1, o1, h1, l1, p1, c1 = [\n                [\n                    t1[0],\n                    i1[0]\n                ],\n                [\n                    t1[1],\n                    i1[1]\n                ]\n            ], f1 = 0; f1 < 2; ++f1)a1 = 6 * t1[f1] - 12 * e1[f1] + 6 * r1[f1], s1 = -3 * t1[f1] + 9 * e1[f1] - 9 * r1[f1] + 3 * i1[f1], n1 = 3 * e1[f1] - 3 * t1[f1], a1 |= 0, n1 |= 0, 0 == (s1 |= 0) && 0 === a1 || (0 === s1 ? (o1 = -n1 / a1) > 0 && o1 < 1 && c1[f1].push(this.calculateF(o1, t1, e1, r1, i1, f1)) : (h1 = a1 * a1 - 4 * n1 * s1) >= 0 && ((l1 = (-a1 + bmSqrt(h1)) / (2 * s1)) > 0 && l1 < 1 && c1[f1].push(this.calculateF(l1, t1, e1, r1, i1, f1)), (p1 = (-a1 - bmSqrt(h1)) / (2 * s1)) > 0 && p1 < 1 && c1[f1].push(this.calculateF(p1, t1, e1, r1, i1, f1))));\n            this.shapeBoundingBox.left = bmMin.apply(null, c1[0]), this.shapeBoundingBox.top = bmMin.apply(null, c1[1]), this.shapeBoundingBox.right = bmMax.apply(null, c1[0]), this.shapeBoundingBox.bottom = bmMax.apply(null, c1[1]);\n        }, HShapeElement.prototype.calculateF = function(t1, e1, r1, i1, s1, a1) {\n            return bmPow(1 - t1, 3) * e1[a1] + 3 * bmPow(1 - t1, 2) * t1 * r1[a1] + 3 * (1 - t1) * bmPow(t1, 2) * i1[a1] + bmPow(t1, 3) * s1[a1];\n        }, HShapeElement.prototype.calculateBoundingBox = function(t1, e1) {\n            var r1, i1 = t1.length;\n            for(r1 = 0; r1 < i1; r1 += 1)t1[r1] && t1[r1].sh ? this.calculateShapeBoundingBox(t1[r1], e1) : t1[r1] && t1[r1].it ? this.calculateBoundingBox(t1[r1].it, e1) : t1[r1] && t1[r1].style && t1[r1].w && this.expandStrokeBoundingBox(t1[r1].w, e1);\n        }, HShapeElement.prototype.expandStrokeBoundingBox = function(t1, e1) {\n            var r1 = 0;\n            if (t1.keyframes) {\n                for(var i1 = 0; i1 < t1.keyframes.length; i1 += 1){\n                    var s1 = t1.keyframes[i1].s;\n                    s1 > r1 && (r1 = s1);\n                }\n                r1 *= t1.mult;\n            } else r1 = t1.v * t1.mult;\n            e1.x -= r1, e1.xMax += r1, e1.y -= r1, e1.yMax += r1;\n        }, HShapeElement.prototype.currentBoxContains = function(t1) {\n            return this.currentBBox.x <= t1.x && this.currentBBox.y <= t1.y && this.currentBBox.width + this.currentBBox.x >= t1.x + t1.width && this.currentBBox.height + this.currentBBox.y >= t1.y + t1.height;\n        }, HShapeElement.prototype.renderInnerContent = function() {\n            if (this._renderShapeFrame(), !this.hidden && (this._isFirstFrame || this._mdf)) {\n                var t1 = this.tempBoundingBox, e1 = 999999;\n                if (t1.x = e1, t1.xMax = -e1, t1.y = e1, t1.yMax = -e1, this.calculateBoundingBox(this.itemsData, t1), t1.width = t1.xMax < t1.x ? 0 : t1.xMax - t1.x, t1.height = t1.yMax < t1.y ? 0 : t1.yMax - t1.y, this.currentBoxContains(t1)) return;\n                var r1 = !1;\n                if (this.currentBBox.w !== t1.width && (this.currentBBox.w = t1.width, this.shapeCont.setAttribute(\"width\", t1.width), r1 = !0), this.currentBBox.h !== t1.height && (this.currentBBox.h = t1.height, this.shapeCont.setAttribute(\"height\", t1.height), r1 = !0), r1 || this.currentBBox.x !== t1.x || this.currentBBox.y !== t1.y) {\n                    this.currentBBox.w = t1.width, this.currentBBox.h = t1.height, this.currentBBox.x = t1.x, this.currentBBox.y = t1.y, this.shapeCont.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                    var i1 = this.shapeCont.style, s1 = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                    i1.transform = s1, i1.webkitTransform = s1;\n                }\n            }\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement,\n            ITextElement\n        ], HTextElement), HTextElement.prototype.createContent = function() {\n            if (this.isMasked = this.checkMasks(), this.isMasked) {\n                this.renderType = \"svg\", this.compW = this.comp.data.w, this.compH = this.comp.data.h, this.svgElement.setAttribute(\"width\", this.compW), this.svgElement.setAttribute(\"height\", this.compH);\n                var t1 = createNS(\"g\");\n                this.maskedElement.appendChild(t1), this.innerElem = t1;\n            } else this.renderType = \"html\", this.innerElem = this.layerElement;\n            this.checkParenting();\n        }, HTextElement.prototype.buildNewText = function() {\n            var t1 = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(t1.l ? t1.l.length : 0);\n            var e1 = this.innerElem.style, r1 = t1.fc ? this.buildColor(t1.fc) : \"rgba(0,0,0,0)\";\n            e1.fill = r1, e1.color = r1, t1.sc && (e1.stroke = this.buildColor(t1.sc), e1.strokeWidth = t1.sw + \"px\");\n            var i1, s1, a1 = this.globalData.fontManager.getFontByName(t1.f);\n            if (!this.globalData.fontManager.chars) if (e1.fontSize = t1.finalSize + \"px\", e1.lineHeight = t1.finalSize + \"px\", a1.fClass) this.innerElem.className = a1.fClass;\n            else {\n                e1.fontFamily = a1.fFamily;\n                var n1 = t1.fWeight, o1 = t1.fStyle;\n                e1.fontStyle = o1, e1.fontWeight = n1;\n            }\n            var h1, l1, p1, c1 = t1.l;\n            s1 = c1.length;\n            var f1, u1 = this.mHelper, d1 = \"\", m1 = 0;\n            for(i1 = 0; i1 < s1; i1 += 1){\n                if (this.globalData.fontManager.chars ? (this.textPaths[m1] ? h1 = this.textPaths[m1] : ((h1 = createNS(\"path\")).setAttribute(\"stroke-linecap\", lineCapEnum[1]), h1.setAttribute(\"stroke-linejoin\", lineJoinEnum[2]), h1.setAttribute(\"stroke-miterlimit\", \"4\")), this.isMasked || (this.textSpans[m1] ? p1 = (l1 = this.textSpans[m1]).children[0] : ((l1 = createTag(\"div\")).style.lineHeight = 0, (p1 = createNS(\"svg\")).appendChild(h1), styleDiv(l1)))) : this.isMasked ? h1 = this.textPaths[m1] ? this.textPaths[m1] : createNS(\"text\") : this.textSpans[m1] ? (l1 = this.textSpans[m1], h1 = this.textPaths[m1]) : (styleDiv(l1 = createTag(\"span\")), styleDiv(h1 = createTag(\"span\")), l1.appendChild(h1)), this.globalData.fontManager.chars) {\n                    var y1, g1 = this.globalData.fontManager.getCharData(t1.finalText[i1], a1.fStyle, this.globalData.fontManager.getFontByName(t1.f).fFamily);\n                    if (y1 = g1 ? g1.data : null, u1.reset(), y1 && y1.shapes && y1.shapes.length && (f1 = y1.shapes[0].it, u1.scale(t1.finalSize / 100, t1.finalSize / 100), d1 = this.createPathShape(u1, f1), h1.setAttribute(\"d\", d1)), this.isMasked) this.innerElem.appendChild(h1);\n                    else {\n                        if (this.innerElem.appendChild(l1), y1 && y1.shapes) {\n                            document.body.appendChild(p1);\n                            var v1 = p1.getBBox();\n                            p1.setAttribute(\"width\", v1.width + 2), p1.setAttribute(\"height\", v1.height + 2), p1.setAttribute(\"viewBox\", v1.x - 1 + \" \" + (v1.y - 1) + \" \" + (v1.width + 2) + \" \" + (v1.height + 2));\n                            var b1 = p1.style, _1 = \"translate(\" + (v1.x - 1) + \"px,\" + (v1.y - 1) + \"px)\";\n                            b1.transform = _1, b1.webkitTransform = _1, c1[i1].yOffset = v1.y - 1;\n                        } else p1.setAttribute(\"width\", 1), p1.setAttribute(\"height\", 1);\n                        l1.appendChild(p1);\n                    }\n                } else if (h1.textContent = c1[i1].val, h1.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\"), this.isMasked) this.innerElem.appendChild(h1);\n                else {\n                    this.innerElem.appendChild(l1);\n                    var P1 = h1.style, S1 = \"translate3d(0,\" + -t1.finalSize / 1.2 + \"px,0)\";\n                    P1.transform = S1, P1.webkitTransform = S1;\n                }\n                this.isMasked ? this.textSpans[m1] = h1 : this.textSpans[m1] = l1, this.textSpans[m1].style.display = \"block\", this.textPaths[m1] = h1, m1 += 1;\n            }\n            for(; m1 < this.textSpans.length;)this.textSpans[m1].style.display = \"none\", m1 += 1;\n        }, HTextElement.prototype.renderInnerContent = function() {\n            var t1;\n            if (this.validateText(), this.data.singleShape) {\n                if (!this._isFirstFrame && !this.lettersChangedFlag) return;\n                if (this.isMasked && this.finalTransform._matMdf) {\n                    this.svgElement.setAttribute(\"viewBox\", -this.finalTransform.mProp.p.v[0] + \" \" + -this.finalTransform.mProp.p.v[1] + \" \" + this.compW + \" \" + this.compH), t1 = this.svgElement.style;\n                    var e1 = \"translate(\" + -this.finalTransform.mProp.p.v[0] + \"px,\" + -this.finalTransform.mProp.p.v[1] + \"px)\";\n                    t1.transform = e1, t1.webkitTransform = e1;\n                }\n            }\n            if (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {\n                var r1, i1, s1, a1, n1, o1 = 0, h1 = this.textAnimator.renderedLetters, l1 = this.textProperty.currentData.l;\n                for(i1 = l1.length, r1 = 0; r1 < i1; r1 += 1)l1[r1].n ? o1 += 1 : (a1 = this.textSpans[r1], n1 = this.textPaths[r1], s1 = h1[o1], o1 += 1, s1._mdf.m && (this.isMasked ? a1.setAttribute(\"transform\", s1.m) : (a1.style.webkitTransform = s1.m, a1.style.transform = s1.m)), a1.style.opacity = s1.o, s1.sw && s1._mdf.sw && n1.setAttribute(\"stroke-width\", s1.sw), s1.sc && s1._mdf.sc && n1.setAttribute(\"stroke\", s1.sc), s1.fc && s1._mdf.fc && (n1.setAttribute(\"fill\", s1.fc), n1.style.color = s1.fc));\n                if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {\n                    var p1 = this.innerElem.getBBox();\n                    if (this.currentBBox.w !== p1.width && (this.currentBBox.w = p1.width, this.svgElement.setAttribute(\"width\", p1.width)), this.currentBBox.h !== p1.height && (this.currentBBox.h = p1.height, this.svgElement.setAttribute(\"height\", p1.height)), this.currentBBox.w !== p1.width + 2 || this.currentBBox.h !== p1.height + 2 || this.currentBBox.x !== p1.x - 1 || this.currentBBox.y !== p1.y - 1) {\n                        this.currentBBox.w = p1.width + 2, this.currentBBox.h = p1.height + 2, this.currentBBox.x = p1.x - 1, this.currentBBox.y = p1.y - 1, this.svgElement.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h), t1 = this.svgElement.style;\n                        var c1 = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                        t1.transform = c1, t1.webkitTransform = c1;\n                    }\n                }\n            }\n        }, extendPrototype([\n            BaseElement,\n            FrameElement,\n            HierarchyElement\n        ], HCameraElement), HCameraElement.prototype.setup = function() {\n            var t1, e1, r1, i1, s1 = this.comp.threeDElements.length;\n            for(t1 = 0; t1 < s1; t1 += 1)if (\"3d\" === (e1 = this.comp.threeDElements[t1]).type) {\n                r1 = e1.perspectiveElem.style, i1 = e1.container.style;\n                var a1 = this.pe.v + \"px\", n1 = \"0px 0px 0px\", o1 = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                r1.perspective = a1, r1.webkitPerspective = a1, i1.transformOrigin = n1, i1.mozTransformOrigin = n1, i1.webkitTransformOrigin = n1, r1.transform = o1, r1.webkitTransform = o1;\n            }\n        }, HCameraElement.prototype.createElements = function() {}, HCameraElement.prototype.hide = function() {}, HCameraElement.prototype.renderFrame = function() {\n            var t1, e1, r1 = this._isFirstFrame;\n            if (this.hierarchy) for(e1 = this.hierarchy.length, t1 = 0; t1 < e1; t1 += 1)r1 = this.hierarchy[t1].finalTransform.mProp._mdf || r1;\n            if (r1 || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {\n                if (this.mat.reset(), this.hierarchy) for(t1 = e1 = this.hierarchy.length - 1; t1 >= 0; t1 -= 1){\n                    var i1 = this.hierarchy[t1].finalTransform.mProp;\n                    this.mat.translate(-i1.p.v[0], -i1.p.v[1], i1.p.v[2]), this.mat.rotateX(-i1.or.v[0]).rotateY(-i1.or.v[1]).rotateZ(i1.or.v[2]), this.mat.rotateX(-i1.rx.v).rotateY(-i1.ry.v).rotateZ(i1.rz.v), this.mat.scale(1 / i1.s.v[0], 1 / i1.s.v[1], 1 / i1.s.v[2]), this.mat.translate(i1.a.v[0], i1.a.v[1], i1.a.v[2]);\n                }\n                if (this.p ? this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]) : this.mat.translate(-this.px.v, -this.py.v, this.pz.v), this.a) {\n                    var s1;\n                    s1 = this.p ? [\n                        this.p.v[0] - this.a.v[0],\n                        this.p.v[1] - this.a.v[1],\n                        this.p.v[2] - this.a.v[2]\n                    ] : [\n                        this.px.v - this.a.v[0],\n                        this.py.v - this.a.v[1],\n                        this.pz.v - this.a.v[2]\n                    ];\n                    var a1 = Math.sqrt(Math.pow(s1[0], 2) + Math.pow(s1[1], 2) + Math.pow(s1[2], 2)), n1 = [\n                        s1[0] / a1,\n                        s1[1] / a1,\n                        s1[2] / a1\n                    ], o1 = Math.sqrt(n1[2] * n1[2] + n1[0] * n1[0]), h1 = Math.atan2(n1[1], o1), l1 = Math.atan2(n1[0], -n1[2]);\n                    this.mat.rotateY(l1).rotateX(-h1);\n                }\n                this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v), this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]), this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0), this.mat.translate(0, 0, this.pe.v);\n                var p1 = !this._prevMat.equals(this.mat);\n                if ((p1 || this.pe._mdf) && this.comp.threeDElements) {\n                    var c1, f1, u1;\n                    for(e1 = this.comp.threeDElements.length, t1 = 0; t1 < e1; t1 += 1)if (\"3d\" === (c1 = this.comp.threeDElements[t1]).type) {\n                        if (p1) {\n                            var d1 = this.mat.toCSS();\n                            (u1 = c1.container.style).transform = d1, u1.webkitTransform = d1;\n                        }\n                        this.pe._mdf && ((f1 = c1.perspectiveElem.style).perspective = this.pe.v + \"px\", f1.webkitPerspective = this.pe.v + \"px\");\n                    }\n                    this.mat.clone(this._prevMat);\n                }\n            }\n            this._isFirstFrame = !1;\n        }, HCameraElement.prototype.prepareFrame = function(t1) {\n            this.prepareProperties(t1, !0);\n        }, HCameraElement.prototype.destroy = function() {}, HCameraElement.prototype.getBaseElement = function() {\n            return null;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HSolidElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], HImageElement), HImageElement.prototype.createContent = function() {\n            var t1 = this.globalData.getAssetsPath(this.assetData), e1 = new Image;\n            this.data.hasMask ? (this.imageElem = createNS(\"image\"), this.imageElem.setAttribute(\"width\", this.assetData.w + \"px\"), this.imageElem.setAttribute(\"height\", this.assetData.h + \"px\"), this.imageElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", t1), this.layerElement.appendChild(this.imageElem), this.baseElement.setAttribute(\"width\", this.assetData.w), this.baseElement.setAttribute(\"height\", this.assetData.h)) : this.layerElement.appendChild(e1), e1.crossOrigin = \"anonymous\", e1.src = t1, this.data.ln && this.baseElement.setAttribute(\"id\", this.data.ln);\n        }, extendPrototype([\n            BaseRenderer\n        ], HybridRendererBase), HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem, HybridRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;)this.pendingElements.pop().checkParenting();\n        }, HybridRendererBase.prototype.appendElementInPos = function(t1, e1) {\n            var r1 = t1.getBaseElement();\n            if (r1) {\n                var i1 = this.layers[e1];\n                if (i1.ddd && this.supports3d) this.addTo3dContainer(r1, e1);\n                else if (this.threeDElements) this.addTo3dContainer(r1, e1);\n                else {\n                    for(var s1, a1, n1 = 0; n1 < e1;)this.elements[n1] && !0 !== this.elements[n1] && this.elements[n1].getBaseElement && (a1 = this.elements[n1], s1 = (this.layers[n1].ddd ? this.getThreeDContainerByPos(n1) : a1.getBaseElement()) || s1), n1 += 1;\n                    s1 ? i1.ddd && this.supports3d || this.layerElement.insertBefore(r1, s1) : i1.ddd && this.supports3d || this.layerElement.appendChild(r1);\n                }\n            }\n        }, HybridRendererBase.prototype.createShape = function(t1) {\n            return this.supports3d ? new HShapeElement(t1, this.globalData, this) : new SVGShapeElement(t1, this.globalData, this);\n        }, HybridRendererBase.prototype.createText = function(t1) {\n            return this.supports3d ? new HTextElement(t1, this.globalData, this) : new SVGTextLottieElement(t1, this.globalData, this);\n        }, HybridRendererBase.prototype.createCamera = function(t1) {\n            return this.camera = new HCameraElement(t1, this.globalData, this), this.camera;\n        }, HybridRendererBase.prototype.createImage = function(t1) {\n            return this.supports3d ? new HImageElement(t1, this.globalData, this) : new IImageElement(t1, this.globalData, this);\n        }, HybridRendererBase.prototype.createSolid = function(t1) {\n            return this.supports3d ? new HSolidElement(t1, this.globalData, this) : new ISolidElement(t1, this.globalData, this);\n        }, HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull, HybridRendererBase.prototype.getThreeDContainerByPos = function(t1) {\n            for(var e1 = 0, r1 = this.threeDElements.length; e1 < r1;){\n                if (this.threeDElements[e1].startPos <= t1 && this.threeDElements[e1].endPos >= t1) return this.threeDElements[e1].perspectiveElem;\n                e1 += 1;\n            }\n            return null;\n        }, HybridRendererBase.prototype.createThreeDContainer = function(t1, e1) {\n            var r1, i1, s1 = createTag(\"div\");\n            styleDiv(s1);\n            var a1 = createTag(\"div\");\n            if (styleDiv(a1), \"3d\" === e1) {\n                (r1 = s1.style).width = this.globalData.compSize.w + \"px\", r1.height = this.globalData.compSize.h + \"px\";\n                var n1 = \"50% 50%\";\n                r1.webkitTransformOrigin = n1, r1.mozTransformOrigin = n1, r1.transformOrigin = n1;\n                var o1 = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                (i1 = a1.style).transform = o1, i1.webkitTransform = o1;\n            }\n            s1.appendChild(a1);\n            var h1 = {\n                container: a1,\n                perspectiveElem: s1,\n                startPos: t1,\n                endPos: t1,\n                type: e1\n            };\n            return this.threeDElements.push(h1), h1;\n        }, HybridRendererBase.prototype.build3dContainers = function() {\n            var t1, e1, r1 = this.layers.length, i1 = \"\";\n            for(t1 = 0; t1 < r1; t1 += 1)this.layers[t1].ddd && 3 !== this.layers[t1].ty ? (\"3d\" !== i1 && (i1 = \"3d\", e1 = this.createThreeDContainer(t1, \"3d\")), e1.endPos = Math.max(e1.endPos, t1)) : (\"2d\" !== i1 && (i1 = \"2d\", e1 = this.createThreeDContainer(t1, \"2d\")), e1.endPos = Math.max(e1.endPos, t1));\n            for(t1 = (r1 = this.threeDElements.length) - 1; t1 >= 0; t1 -= 1)this.resizerElem.appendChild(this.threeDElements[t1].perspectiveElem);\n        }, HybridRendererBase.prototype.addTo3dContainer = function(t1, e1) {\n            for(var r1 = 0, i1 = this.threeDElements.length; r1 < i1;){\n                if (e1 <= this.threeDElements[r1].endPos) {\n                    for(var s1, a1 = this.threeDElements[r1].startPos; a1 < e1;)this.elements[a1] && this.elements[a1].getBaseElement && (s1 = this.elements[a1].getBaseElement()), a1 += 1;\n                    s1 ? this.threeDElements[r1].container.insertBefore(t1, s1) : this.threeDElements[r1].container.appendChild(t1);\n                    break;\n                }\n                r1 += 1;\n            }\n        }, HybridRendererBase.prototype.configAnimation = function(t1) {\n            var e1 = createTag(\"div\"), r1 = this.animationItem.wrapper, i1 = e1.style;\n            i1.width = t1.w + \"px\", i1.height = t1.h + \"px\", this.resizerElem = e1, styleDiv(e1), i1.transformStyle = \"flat\", i1.mozTransformStyle = \"flat\", i1.webkitTransformStyle = \"flat\", this.renderConfig.className && e1.setAttribute(\"class\", this.renderConfig.className), r1.appendChild(e1), i1.overflow = \"hidden\";\n            var s1 = createNS(\"svg\");\n            s1.setAttribute(\"width\", \"1\"), s1.setAttribute(\"height\", \"1\"), styleDiv(s1), this.resizerElem.appendChild(s1);\n            var a1 = createNS(\"defs\");\n            s1.appendChild(a1), this.data = t1, this.setupGlobalData(t1, s1), this.globalData.defs = a1, this.layers = t1.layers, this.layerElement = this.resizerElem, this.build3dContainers(), this.updateContainerSize();\n        }, HybridRendererBase.prototype.destroy = function() {\n            var t1;\n            this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), this.animationItem.container = null, this.globalData.defs = null;\n            var e1 = this.layers ? this.layers.length : 0;\n            for(t1 = 0; t1 < e1; t1 += 1)this.elements[t1] && this.elements[t1].destroy && this.elements[t1].destroy();\n            this.elements.length = 0, this.destroyed = !0, this.animationItem = null;\n        }, HybridRendererBase.prototype.updateContainerSize = function() {\n            var t1, e1, r1, i1, s1 = this.animationItem.wrapper.offsetWidth, a1 = this.animationItem.wrapper.offsetHeight, n1 = s1 / a1;\n            this.globalData.compSize.w / this.globalData.compSize.h > n1 ? (t1 = s1 / this.globalData.compSize.w, e1 = s1 / this.globalData.compSize.w, r1 = 0, i1 = (a1 - this.globalData.compSize.h * (s1 / this.globalData.compSize.w)) / 2) : (t1 = a1 / this.globalData.compSize.h, e1 = a1 / this.globalData.compSize.h, r1 = (s1 - this.globalData.compSize.w * (a1 / this.globalData.compSize.h)) / 2, i1 = 0);\n            var o1 = this.resizerElem.style;\n            o1.webkitTransform = \"matrix3d(\" + t1 + \",0,0,0,0,\" + e1 + \",0,0,0,0,1,0,\" + r1 + \",\" + i1 + \",0,1)\", o1.transform = o1.webkitTransform;\n        }, HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame, HybridRendererBase.prototype.hide = function() {\n            this.resizerElem.style.display = \"none\";\n        }, HybridRendererBase.prototype.show = function() {\n            this.resizerElem.style.display = \"block\";\n        }, HybridRendererBase.prototype.initItems = function() {\n            if (this.buildAllItems(), this.camera) this.camera.setup();\n            else {\n                var t1, e1 = this.globalData.compSize.w, r1 = this.globalData.compSize.h, i1 = this.threeDElements.length;\n                for(t1 = 0; t1 < i1; t1 += 1){\n                    var s1 = this.threeDElements[t1].perspectiveElem.style;\n                    s1.webkitPerspective = Math.sqrt(Math.pow(e1, 2) + Math.pow(r1, 2)) + \"px\", s1.perspective = s1.webkitPerspective;\n                }\n            }\n        }, HybridRendererBase.prototype.searchExtraCompositions = function(t1) {\n            var e1, r1 = t1.length, i1 = createTag(\"div\");\n            for(e1 = 0; e1 < r1; e1 += 1)if (t1[e1].xt) {\n                var s1 = this.createComp(t1[e1], i1, this.globalData.comp, null);\n                s1.initExpressions(), this.globalData.projectInterface.registerComposition(s1);\n            }\n        }, extendPrototype([\n            HybridRendererBase,\n            ICompElement,\n            HBaseElement\n        ], HCompElement), HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements, HCompElement.prototype.createContainerElements = function() {\n            this._createBaseContainerElements(), this.data.hasMask ? (this.svgElement.setAttribute(\"width\", this.data.w), this.svgElement.setAttribute(\"height\", this.data.h), this.transformedElement = this.baseElement) : this.transformedElement = this.layerElement;\n        }, HCompElement.prototype.addTo3dContainer = function(t1, e1) {\n            for(var r1, i1 = 0; i1 < e1;)this.elements[i1] && this.elements[i1].getBaseElement && (r1 = this.elements[i1].getBaseElement()), i1 += 1;\n            r1 ? this.layerElement.insertBefore(t1, r1) : this.layerElement.appendChild(t1);\n        }, HCompElement.prototype.createComp = function(t1) {\n            return this.supports3d ? new HCompElement(t1, this.globalData, this) : new SVGCompElement(t1, this.globalData, this);\n        }, extendPrototype([\n            HybridRendererBase\n        ], HybridRenderer), HybridRenderer.prototype.createComp = function(t1) {\n            return this.supports3d ? new HCompElement(t1, this.globalData, this) : new SVGCompElement(t1, this.globalData, this);\n        };\n        var CompExpressionInterface = function(t1) {\n            function e1(e1) {\n                for(var r1 = 0, i1 = t1.layers.length; r1 < i1;){\n                    if (t1.layers[r1].nm === e1 || t1.layers[r1].ind === e1) return t1.elements[r1].layerInterface;\n                    r1 += 1;\n                }\n                return null;\n            }\n            return Object.defineProperty(e1, \"_name\", {\n                value: t1.data.nm\n            }), e1.layer = e1, e1.pixelAspect = 1, e1.height = t1.data.h || t1.globalData.compSize.h, e1.width = t1.data.w || t1.globalData.compSize.w, e1.pixelAspect = 1, e1.frameDuration = 1 / t1.globalData.frameRate, e1.displayStartTime = 0, e1.numLayers = t1.layers.length, e1;\n        };\n        function _typeof$2(t1) {\n            return _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$2(t1);\n        }\n        function seedRandom(t1, e1) {\n            var r1 = this, i1 = 256, s1 = e1.pow(i1, 6), a1 = e1.pow(2, 52), n1 = 2 * a1, o1 = 255;\n            function h1(t1) {\n                var e1, r1 = t1.length, s1 = this, a1 = 0, n1 = s1.i = s1.j = 0, h1 = s1.S = [];\n                for(r1 || (t1 = [\n                    r1++\n                ]); a1 < i1;)h1[a1] = a1++;\n                for(a1 = 0; a1 < i1; a1++)h1[a1] = h1[n1 = o1 & n1 + t1[a1 % r1] + (e1 = h1[a1])], h1[n1] = e1;\n                s1.g = function(t1) {\n                    for(var e1, r1 = 0, a1 = s1.i, n1 = s1.j, h1 = s1.S; t1--;)e1 = h1[a1 = o1 & a1 + 1], r1 = r1 * i1 + h1[o1 & (h1[a1] = h1[n1 = o1 & n1 + e1]) + (h1[n1] = e1)];\n                    return s1.i = a1, s1.j = n1, r1;\n                };\n            }\n            function l1(t1, e1) {\n                return e1.i = t1.i, e1.j = t1.j, e1.S = t1.S.slice(), e1;\n            }\n            function p1(t1, e1) {\n                var r1, i1 = [], s1 = _typeof$2(t1);\n                if (e1 && \"object\" == s1) for(r1 in t1)try {\n                    i1.push(p1(t1[r1], e1 - 1));\n                } catch (t1) {}\n                return i1.length ? i1 : \"string\" == s1 ? t1 : t1 + \"\\x00\";\n            }\n            function c1(t1, e1) {\n                for(var r1, i1 = t1 + \"\", s1 = 0; s1 < i1.length;)e1[o1 & s1] = o1 & (r1 ^= 19 * e1[o1 & s1]) + i1.charCodeAt(s1++);\n                return f1(e1);\n            }\n            function f1(t1) {\n                return String.fromCharCode.apply(0, t1);\n            }\n            e1.seedrandom = function(o1, u1, d1) {\n                var m1 = [], y1 = c1(p1((u1 = !0 === u1 ? {\n                    entropy: !0\n                } : u1 || {}).entropy ? [\n                    o1,\n                    f1(t1)\n                ] : null === o1 ? function() {\n                    try {\n                        var e1 = new Uint8Array(i1);\n                        return (r1.crypto || r1.msCrypto).getRandomValues(e1), f1(e1);\n                    } catch (e1) {\n                        var s1 = r1.navigator, a1 = s1 && s1.plugins;\n                        return [\n                            +new Date,\n                            r1,\n                            a1,\n                            r1.screen,\n                            f1(t1)\n                        ];\n                    }\n                }() : o1, 3), m1), g1 = new h1(m1), v1 = function() {\n                    for(var t1 = g1.g(6), e1 = s1, r1 = 0; t1 < a1;)t1 = (t1 + r1) * i1, e1 *= i1, r1 = g1.g(1);\n                    for(; t1 >= n1;)t1 /= 2, e1 /= 2, r1 >>>= 1;\n                    return (t1 + r1) / e1;\n                };\n                return v1.int32 = function() {\n                    return 0 | g1.g(4);\n                }, v1.quick = function() {\n                    return g1.g(4) / 4294967296;\n                }, v1.double = v1, c1(f1(g1.S), t1), (u1.pass || d1 || function(t1, r1, i1, s1) {\n                    return s1 && (s1.S && l1(s1, g1), t1.state = function() {\n                        return l1(g1, {});\n                    }), i1 ? (e1.random = t1, r1) : t1;\n                })(v1, y1, \"global\" in u1 ? u1.global : this == e1, u1.state);\n            }, c1(e1.random(), t1);\n        }\n        function initialize$2(t1) {\n            seedRandom([], t1);\n        }\n        var propTypes = {\n            SHAPE: \"shape\"\n        };\n        function _typeof$1(t1) {\n            return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof$1(t1);\n        }\n        var ExpressionManager = function() {\n            var ob = {}, Math = BMMath, window = null, document = null, XMLHttpRequest = null, fetch = null, frames = null, _lottieGlobal = {};\n            function resetFrame() {\n                _lottieGlobal = {};\n            }\n            function $bm_isInstanceOfArray(t1) {\n                return t1.constructor === Array || t1.constructor === Float32Array;\n            }\n            function isNumerable(t1, e1) {\n                return \"number\" === t1 || e1 instanceof Number || \"boolean\" === t1 || \"string\" === t1;\n            }\n            function $bm_neg(t1) {\n                var e1 = _typeof$1(t1);\n                if (\"number\" === e1 || t1 instanceof Number || \"boolean\" === e1) return -t1;\n                if ($bm_isInstanceOfArray(t1)) {\n                    var r1, i1 = t1.length, s1 = [];\n                    for(r1 = 0; r1 < i1; r1 += 1)s1[r1] = -t1[r1];\n                    return s1;\n                }\n                return t1.propType ? t1.v : -t1;\n            }\n            initialize$2(BMMath);\n            var easeInBez = BezierFactory.getBezierEasing(.333, 0, .833, .833, \"easeIn\").get, easeOutBez = BezierFactory.getBezierEasing(.167, .167, .667, 1, \"easeOut\").get, easeInOutBez = BezierFactory.getBezierEasing(.33, 0, .667, 1, \"easeInOut\").get;\n            function sum(t1, e1) {\n                var r1 = _typeof$1(t1), i1 = _typeof$1(e1);\n                if (isNumerable(r1, t1) && isNumerable(i1, e1) || \"string\" === r1 || \"string\" === i1) return t1 + e1;\n                if ($bm_isInstanceOfArray(t1) && isNumerable(i1, e1)) return (t1 = t1.slice(0))[0] += e1, t1;\n                if (isNumerable(r1, t1) && $bm_isInstanceOfArray(e1)) return (e1 = e1.slice(0))[0] = t1 + e1[0], e1;\n                if ($bm_isInstanceOfArray(t1) && $bm_isInstanceOfArray(e1)) {\n                    for(var s1 = 0, a1 = t1.length, n1 = e1.length, o1 = []; s1 < a1 || s1 < n1;)(\"number\" == typeof t1[s1] || t1[s1] instanceof Number) && (\"number\" == typeof e1[s1] || e1[s1] instanceof Number) ? o1[s1] = t1[s1] + e1[s1] : o1[s1] = void 0 === e1[s1] ? t1[s1] : t1[s1] || e1[s1], s1 += 1;\n                    return o1;\n                }\n                return 0;\n            }\n            var add = sum;\n            function sub(t1, e1) {\n                var r1 = _typeof$1(t1), i1 = _typeof$1(e1);\n                if (isNumerable(r1, t1) && isNumerable(i1, e1)) return \"string\" === r1 && (t1 = parseInt(t1, 10)), \"string\" === i1 && (e1 = parseInt(e1, 10)), t1 - e1;\n                if ($bm_isInstanceOfArray(t1) && isNumerable(i1, e1)) return (t1 = t1.slice(0))[0] -= e1, t1;\n                if (isNumerable(r1, t1) && $bm_isInstanceOfArray(e1)) return (e1 = e1.slice(0))[0] = t1 - e1[0], e1;\n                if ($bm_isInstanceOfArray(t1) && $bm_isInstanceOfArray(e1)) {\n                    for(var s1 = 0, a1 = t1.length, n1 = e1.length, o1 = []; s1 < a1 || s1 < n1;)(\"number\" == typeof t1[s1] || t1[s1] instanceof Number) && (\"number\" == typeof e1[s1] || e1[s1] instanceof Number) ? o1[s1] = t1[s1] - e1[s1] : o1[s1] = void 0 === e1[s1] ? t1[s1] : t1[s1] || e1[s1], s1 += 1;\n                    return o1;\n                }\n                return 0;\n            }\n            function mul(t1, e1) {\n                var r1, i1, s1, a1 = _typeof$1(t1), n1 = _typeof$1(e1);\n                if (isNumerable(a1, t1) && isNumerable(n1, e1)) return t1 * e1;\n                if ($bm_isInstanceOfArray(t1) && isNumerable(n1, e1)) {\n                    for(s1 = t1.length, r1 = createTypedArray(\"float32\", s1), i1 = 0; i1 < s1; i1 += 1)r1[i1] = t1[i1] * e1;\n                    return r1;\n                }\n                if (isNumerable(a1, t1) && $bm_isInstanceOfArray(e1)) {\n                    for(s1 = e1.length, r1 = createTypedArray(\"float32\", s1), i1 = 0; i1 < s1; i1 += 1)r1[i1] = t1 * e1[i1];\n                    return r1;\n                }\n                return 0;\n            }\n            function div(t1, e1) {\n                var r1, i1, s1, a1 = _typeof$1(t1), n1 = _typeof$1(e1);\n                if (isNumerable(a1, t1) && isNumerable(n1, e1)) return t1 / e1;\n                if ($bm_isInstanceOfArray(t1) && isNumerable(n1, e1)) {\n                    for(s1 = t1.length, r1 = createTypedArray(\"float32\", s1), i1 = 0; i1 < s1; i1 += 1)r1[i1] = t1[i1] / e1;\n                    return r1;\n                }\n                if (isNumerable(a1, t1) && $bm_isInstanceOfArray(e1)) {\n                    for(s1 = e1.length, r1 = createTypedArray(\"float32\", s1), i1 = 0; i1 < s1; i1 += 1)r1[i1] = t1 / e1[i1];\n                    return r1;\n                }\n                return 0;\n            }\n            function mod(t1, e1) {\n                return \"string\" == typeof t1 && (t1 = parseInt(t1, 10)), \"string\" == typeof e1 && (e1 = parseInt(e1, 10)), t1 % e1;\n            }\n            var $bm_sum = sum, $bm_sub = sub, $bm_mul = mul, $bm_div = div, $bm_mod = mod;\n            function clamp(t1, e1, r1) {\n                if (e1 > r1) {\n                    var i1 = r1;\n                    r1 = e1, e1 = i1;\n                }\n                return Math.min(Math.max(t1, e1), r1);\n            }\n            function radiansToDegrees(t1) {\n                return t1 / degToRads;\n            }\n            var radians_to_degrees = radiansToDegrees;\n            function degreesToRadians(t1) {\n                return t1 * degToRads;\n            }\n            var degrees_to_radians = radiansToDegrees, helperLengthArray = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            function length(t1, e1) {\n                if (\"number\" == typeof t1 || t1 instanceof Number) return e1 = e1 || 0, Math.abs(t1 - e1);\n                var r1;\n                e1 || (e1 = helperLengthArray);\n                var i1 = Math.min(t1.length, e1.length), s1 = 0;\n                for(r1 = 0; r1 < i1; r1 += 1)s1 += Math.pow(e1[r1] - t1[r1], 2);\n                return Math.sqrt(s1);\n            }\n            function normalize(t1) {\n                return div(t1, length(t1));\n            }\n            function rgbToHsl(t1) {\n                var e1, r1, i1 = t1[0], s1 = t1[1], a1 = t1[2], n1 = Math.max(i1, s1, a1), o1 = Math.min(i1, s1, a1), h1 = (n1 + o1) / 2;\n                if (n1 === o1) e1 = 0, r1 = 0;\n                else {\n                    var l1 = n1 - o1;\n                    switch(r1 = h1 > .5 ? l1 / (2 - n1 - o1) : l1 / (n1 + o1), n1){\n                        case i1:\n                            e1 = (s1 - a1) / l1 + (s1 < a1 ? 6 : 0);\n                            break;\n                        case s1:\n                            e1 = (a1 - i1) / l1 + 2;\n                            break;\n                        case a1:\n                            e1 = (i1 - s1) / l1 + 4;\n                    }\n                    e1 /= 6;\n                }\n                return [\n                    e1,\n                    r1,\n                    h1,\n                    t1[3]\n                ];\n            }\n            function hue2rgb(t1, e1, r1) {\n                return r1 < 0 && (r1 += 1), r1 > 1 && (r1 -= 1), r1 < 1 / 6 ? t1 + 6 * (e1 - t1) * r1 : r1 < .5 ? e1 : r1 < 2 / 3 ? t1 + (e1 - t1) * (2 / 3 - r1) * 6 : t1;\n            }\n            function hslToRgb(t1) {\n                var e1, r1, i1, s1 = t1[0], a1 = t1[1], n1 = t1[2];\n                if (0 === a1) e1 = n1, i1 = n1, r1 = n1;\n                else {\n                    var o1 = n1 < .5 ? n1 * (1 + a1) : n1 + a1 - n1 * a1, h1 = 2 * n1 - o1;\n                    e1 = hue2rgb(h1, o1, s1 + 1 / 3), r1 = hue2rgb(h1, o1, s1), i1 = hue2rgb(h1, o1, s1 - 1 / 3);\n                }\n                return [\n                    e1,\n                    r1,\n                    i1,\n                    t1[3]\n                ];\n            }\n            function linear(t1, e1, r1, i1, s1) {\n                if (void 0 !== i1 && void 0 !== s1 || (i1 = e1, s1 = r1, e1 = 0, r1 = 1), r1 < e1) {\n                    var a1 = r1;\n                    r1 = e1, e1 = a1;\n                }\n                if (t1 <= e1) return i1;\n                if (t1 >= r1) return s1;\n                var n1, o1 = r1 === e1 ? 0 : (t1 - e1) / (r1 - e1);\n                if (!i1.length) return i1 + (s1 - i1) * o1;\n                var h1 = i1.length, l1 = createTypedArray(\"float32\", h1);\n                for(n1 = 0; n1 < h1; n1 += 1)l1[n1] = i1[n1] + (s1[n1] - i1[n1]) * o1;\n                return l1;\n            }\n            function random(t1, e1) {\n                if (void 0 === e1 && (void 0 === t1 ? (t1 = 0, e1 = 1) : (e1 = t1, t1 = void 0)), e1.length) {\n                    var r1, i1 = e1.length;\n                    t1 || (t1 = createTypedArray(\"float32\", i1));\n                    var s1 = createTypedArray(\"float32\", i1), a1 = BMMath.random();\n                    for(r1 = 0; r1 < i1; r1 += 1)s1[r1] = t1[r1] + a1 * (e1[r1] - t1[r1]);\n                    return s1;\n                }\n                return void 0 === t1 && (t1 = 0), t1 + BMMath.random() * (e1 - t1);\n            }\n            function createPath(t1, e1, r1, i1) {\n                var s1, a1 = t1.length, n1 = shapePool.newElement();\n                n1.setPathData(!!i1, a1);\n                var o1, h1, l1 = [\n                    0,\n                    0\n                ];\n                for(s1 = 0; s1 < a1; s1 += 1)o1 = e1 && e1[s1] ? e1[s1] : l1, h1 = r1 && r1[s1] ? r1[s1] : l1, n1.setTripleAt(t1[s1][0], t1[s1][1], h1[0] + t1[s1][0], h1[1] + t1[s1][1], o1[0] + t1[s1][0], o1[1] + t1[s1][1], s1, !0);\n                return n1;\n            }\n            function initiateExpression(elem, data, property) {\n                function noOp(t1) {\n                    return t1;\n                }\n                if (!elem.globalData.renderConfig.runExpressions) return noOp;\n                var val = data.x, needsVelocity = /velocity(?![\\w\\d])/.test(val), _needsRandom = -1 !== val.indexOf(\"random\"), elemType = elem.data.ty, transform, $bm_transform, content, effect, thisProperty = property;\n                thisProperty.valueAtTime = thisProperty.getValueAtTime, Object.defineProperty(thisProperty, \"value\", {\n                    get: function() {\n                        return thisProperty.v;\n                    }\n                }), elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate, elem.comp.displayStartTime = 0;\n                var inPoint = elem.data.ip / elem.comp.globalData.frameRate, outPoint = elem.data.op / elem.comp.globalData.frameRate, width = elem.data.sw ? elem.data.sw : 0, height = elem.data.sh ? elem.data.sh : 0, name = elem.data.nm, loopIn, loop_in, loopOut, loop_out, smooth, toWorld, fromWorld, fromComp, toComp, fromCompToSurface, position, rotation, anchorPoint, scale, thisLayer, thisComp, mask, valueAtTime, velocityAtTime, scoped_bm_rt, expression_function = eval(\"[function _expression_function(){\" + val + \";scoped_bm_rt=$bm_rt}]\")[0], numKeys = property.kf ? data.k.length : 0, active = !this.data || !0 !== this.data.hd, wiggle = (function(t1, e1) {\n                    var r1, i1, s1 = this.pv.length ? this.pv.length : 1, a1 = createTypedArray(\"float32\", s1), n1 = Math.floor(5 * time);\n                    for(r1 = 0, i1 = 0; r1 < n1;){\n                        for(i1 = 0; i1 < s1; i1 += 1)a1[i1] += -e1 + 2 * e1 * BMMath.random();\n                        r1 += 1;\n                    }\n                    var o1 = 5 * time, h1 = o1 - Math.floor(o1), l1 = createTypedArray(\"float32\", s1);\n                    if (s1 > 1) {\n                        for(i1 = 0; i1 < s1; i1 += 1)l1[i1] = this.pv[i1] + a1[i1] + (-e1 + 2 * e1 * BMMath.random()) * h1;\n                        return l1;\n                    }\n                    return this.pv + a1[0] + (-e1 + 2 * e1 * BMMath.random()) * h1;\n                }).bind(this);\n                function loopInDuration(t1, e1) {\n                    return loopIn(t1, e1, !0);\n                }\n                function loopOutDuration(t1, e1) {\n                    return loopOut(t1, e1, !0);\n                }\n                thisProperty.loopIn && (loopIn = thisProperty.loopIn.bind(thisProperty), loop_in = loopIn), thisProperty.loopOut && (loopOut = thisProperty.loopOut.bind(thisProperty), loop_out = loopOut), thisProperty.smooth && (smooth = thisProperty.smooth.bind(thisProperty)), this.getValueAtTime && (valueAtTime = this.getValueAtTime.bind(this)), this.getVelocityAtTime && (velocityAtTime = this.getVelocityAtTime.bind(this));\n                var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface), time, velocity, value, text, textIndex, textTotal, selectorValue;\n                function lookAt(t1, e1) {\n                    var r1 = [\n                        e1[0] - t1[0],\n                        e1[1] - t1[1],\n                        e1[2] - t1[2]\n                    ], i1 = Math.atan2(r1[0], Math.sqrt(r1[1] * r1[1] + r1[2] * r1[2])) / degToRads;\n                    return [\n                        -Math.atan2(r1[1], r1[2]) / degToRads,\n                        i1,\n                        0\n                    ];\n                }\n                function easeOut(t1, e1, r1, i1, s1) {\n                    return applyEase(easeOutBez, t1, e1, r1, i1, s1);\n                }\n                function easeIn(t1, e1, r1, i1, s1) {\n                    return applyEase(easeInBez, t1, e1, r1, i1, s1);\n                }\n                function ease(t1, e1, r1, i1, s1) {\n                    return applyEase(easeInOutBez, t1, e1, r1, i1, s1);\n                }\n                function applyEase(t1, e1, r1, i1, s1, a1) {\n                    void 0 === s1 ? (s1 = r1, a1 = i1) : e1 = (e1 - r1) / (i1 - r1), e1 > 1 ? e1 = 1 : e1 < 0 && (e1 = 0);\n                    var n1 = t1(e1);\n                    if ($bm_isInstanceOfArray(s1)) {\n                        var o1, h1 = s1.length, l1 = createTypedArray(\"float32\", h1);\n                        for(o1 = 0; o1 < h1; o1 += 1)l1[o1] = (a1[o1] - s1[o1]) * n1 + s1[o1];\n                        return l1;\n                    }\n                    return (a1 - s1) * n1 + s1;\n                }\n                function nearestKey(t1) {\n                    var e1, r1, i1, s1 = data.k.length;\n                    if (data.k.length && \"number\" != typeof data.k[0]) if (r1 = -1, (t1 *= elem.comp.globalData.frameRate) < data.k[0].t) r1 = 1, i1 = data.k[0].t;\n                    else {\n                        for(e1 = 0; e1 < s1 - 1; e1 += 1){\n                            if (t1 === data.k[e1].t) {\n                                r1 = e1 + 1, i1 = data.k[e1].t;\n                                break;\n                            }\n                            if (t1 > data.k[e1].t && t1 < data.k[e1 + 1].t) {\n                                t1 - data.k[e1].t > data.k[e1 + 1].t - t1 ? (r1 = e1 + 2, i1 = data.k[e1 + 1].t) : (r1 = e1 + 1, i1 = data.k[e1].t);\n                                break;\n                            }\n                        }\n                        -1 === r1 && (r1 = e1 + 1, i1 = data.k[e1].t);\n                    }\n                    else r1 = 0, i1 = 0;\n                    var a1 = {};\n                    return a1.index = r1, a1.time = i1 / elem.comp.globalData.frameRate, a1;\n                }\n                function key(t1) {\n                    var e1, r1, i1;\n                    if (!data.k.length || \"number\" == typeof data.k[0]) throw new Error(\"The property has no keyframe at index \" + t1);\n                    t1 -= 1, e1 = {\n                        time: data.k[t1].t / elem.comp.globalData.frameRate,\n                        value: []\n                    };\n                    var s1 = Object.prototype.hasOwnProperty.call(data.k[t1], \"s\") ? data.k[t1].s : data.k[t1 - 1].e;\n                    for(i1 = s1.length, r1 = 0; r1 < i1; r1 += 1)e1[r1] = s1[r1], e1.value[r1] = s1[r1];\n                    return e1;\n                }\n                function framesToTime(t1, e1) {\n                    return e1 || (e1 = elem.comp.globalData.frameRate), t1 / e1;\n                }\n                function timeToFrames(t1, e1) {\n                    return t1 || 0 === t1 || (t1 = time), e1 || (e1 = elem.comp.globalData.frameRate), t1 * e1;\n                }\n                function seedRandom(t1) {\n                    BMMath.seedrandom(randSeed + t1);\n                }\n                function sourceRectAtTime() {\n                    return elem.sourceRectAtTime();\n                }\n                function substring(t1, e1) {\n                    return \"string\" == typeof value ? void 0 === e1 ? value.substring(t1) : value.substring(t1, e1) : \"\";\n                }\n                function substr(t1, e1) {\n                    return \"string\" == typeof value ? void 0 === e1 ? value.substr(t1) : value.substr(t1, e1) : \"\";\n                }\n                function posterizeTime(t1) {\n                    time = 0 === t1 ? 0 : Math.floor(time * t1) / t1, value = valueAtTime(time);\n                }\n                var index = elem.data.ind, hasParent = !(!elem.hierarchy || !elem.hierarchy.length), parent, randSeed = Math.floor(1e6 * Math.random()), globalData = elem.globalData;\n                function executeExpression(t1) {\n                    return value = t1, this.frameExpressionId === elem.globalData.frameId && \"textSelector\" !== this.propType ? value : (\"textSelector\" === this.propType && (textIndex = this.textIndex, textTotal = this.textTotal, selectorValue = this.selectorValue), thisLayer || (text = elem.layerInterface.text, thisLayer = elem.layerInterface, thisComp = elem.comp.compInterface, toWorld = thisLayer.toWorld.bind(thisLayer), fromWorld = thisLayer.fromWorld.bind(thisLayer), fromComp = thisLayer.fromComp.bind(thisLayer), toComp = thisLayer.toComp.bind(thisLayer), mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null, fromCompToSurface = fromComp), transform || (transform = elem.layerInterface(\"ADBE Transform Group\"), $bm_transform = transform, transform && (anchorPoint = transform.anchorPoint)), 4 !== elemType || content || (content = thisLayer(\"ADBE Root Vectors Group\")), effect || (effect = thisLayer(4)), (hasParent = !(!elem.hierarchy || !elem.hierarchy.length)) && !parent && (parent = elem.hierarchy[0].layerInterface), time = this.comp.renderedFrame / this.comp.globalData.frameRate, _needsRandom && seedRandom(randSeed + time), needsVelocity && (velocity = velocityAtTime(time)), expression_function(), this.frameExpressionId = elem.globalData.frameId, scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt);\n                }\n                return executeExpression.__preventDeadCodeRemoval = [\n                    $bm_transform,\n                    anchorPoint,\n                    time,\n                    velocity,\n                    inPoint,\n                    outPoint,\n                    width,\n                    height,\n                    name,\n                    loop_in,\n                    loop_out,\n                    smooth,\n                    toComp,\n                    fromCompToSurface,\n                    toWorld,\n                    fromWorld,\n                    mask,\n                    position,\n                    rotation,\n                    scale,\n                    thisComp,\n                    numKeys,\n                    active,\n                    wiggle,\n                    loopInDuration,\n                    loopOutDuration,\n                    comp,\n                    lookAt,\n                    easeOut,\n                    easeIn,\n                    ease,\n                    nearestKey,\n                    key,\n                    text,\n                    textIndex,\n                    textTotal,\n                    selectorValue,\n                    framesToTime,\n                    timeToFrames,\n                    sourceRectAtTime,\n                    substring,\n                    substr,\n                    posterizeTime,\n                    index,\n                    globalData\n                ], executeExpression;\n            }\n            return ob.initiateExpression = initiateExpression, ob.__preventDeadCodeRemoval = [\n                window,\n                document,\n                XMLHttpRequest,\n                fetch,\n                frames,\n                $bm_neg,\n                add,\n                $bm_sum,\n                $bm_sub,\n                $bm_mul,\n                $bm_div,\n                $bm_mod,\n                clamp,\n                radians_to_degrees,\n                degreesToRadians,\n                degrees_to_radians,\n                normalize,\n                rgbToHsl,\n                hslToRgb,\n                linear,\n                random,\n                createPath,\n                _lottieGlobal\n            ], ob.resetFrame = resetFrame, ob;\n        }(), Expressions = function() {\n            var t1 = {\n                initExpressions: function(t1) {\n                    var e1 = 0, r1 = [];\n                    t1.renderer.compInterface = CompExpressionInterface(t1.renderer), t1.renderer.globalData.projectInterface.registerComposition(t1.renderer), t1.renderer.globalData.pushExpression = function() {\n                        e1 += 1;\n                    }, t1.renderer.globalData.popExpression = function() {\n                        0 == (e1 -= 1) && function() {\n                            var t1, e1 = r1.length;\n                            for(t1 = 0; t1 < e1; t1 += 1)r1[t1].release();\n                            r1.length = 0;\n                        }();\n                    }, t1.renderer.globalData.registerExpressionProperty = function(t1) {\n                        -1 === r1.indexOf(t1) && r1.push(t1);\n                    };\n                }\n            };\n            return t1.resetFrame = ExpressionManager.resetFrame, t1;\n        }(), MaskManagerInterface = function() {\n            function t1(t1, e1) {\n                this._mask = t1, this._data = e1;\n            }\n            return Object.defineProperty(t1.prototype, \"maskPath\", {\n                get: function() {\n                    return this._mask.prop.k && this._mask.prop.getValue(), this._mask.prop;\n                }\n            }), Object.defineProperty(t1.prototype, \"maskOpacity\", {\n                get: function() {\n                    return this._mask.op.k && this._mask.op.getValue(), 100 * this._mask.op.v;\n                }\n            }), function(e1) {\n                var r1, i1 = createSizedArray(e1.viewData.length), s1 = e1.viewData.length;\n                for(r1 = 0; r1 < s1; r1 += 1)i1[r1] = new t1(e1.viewData[r1], e1.masksProperties[r1]);\n                return function(t1) {\n                    for(r1 = 0; r1 < s1;){\n                        if (e1.masksProperties[r1].nm === t1) return i1[r1];\n                        r1 += 1;\n                    }\n                    return null;\n                };\n            };\n        }(), ExpressionPropertyInterface = function() {\n            var t1 = {\n                pv: 0,\n                v: 0,\n                mult: 1\n            }, e1 = {\n                pv: [\n                    0,\n                    0,\n                    0\n                ],\n                v: [\n                    0,\n                    0,\n                    0\n                ],\n                mult: 1\n            };\n            function r1(t1, e1, r1) {\n                Object.defineProperty(t1, \"velocity\", {\n                    get: function() {\n                        return e1.getVelocityAtTime(e1.comp.currentFrame);\n                    }\n                }), t1.numKeys = e1.keyframes ? e1.keyframes.length : 0, t1.key = function(i1) {\n                    if (!t1.numKeys) return 0;\n                    var s1 = \"\";\n                    s1 = \"s\" in e1.keyframes[i1 - 1] ? e1.keyframes[i1 - 1].s : \"e\" in e1.keyframes[i1 - 2] ? e1.keyframes[i1 - 2].e : e1.keyframes[i1 - 2].s;\n                    var a1 = \"unidimensional\" === r1 ? new Number(s1) : Object.assign({}, s1);\n                    return a1.time = e1.keyframes[i1 - 1].t / e1.elem.comp.globalData.frameRate, a1.value = \"unidimensional\" === r1 ? s1[0] : s1, a1;\n                }, t1.valueAtTime = e1.getValueAtTime, t1.speedAtTime = e1.getSpeedAtTime, t1.velocityAtTime = e1.getVelocityAtTime, t1.propertyGroup = e1.propertyGroup;\n            }\n            function i1() {\n                return t1;\n            }\n            return function(s1) {\n                return s1 ? \"unidimensional\" === s1.propType ? function(e1) {\n                    e1 && \"pv\" in e1 || (e1 = t1);\n                    var i1 = 1 / e1.mult, s1 = e1.pv * i1, a1 = new Number(s1);\n                    return a1.value = s1, r1(a1, e1, \"unidimensional\"), function() {\n                        return e1.k && e1.getValue(), s1 = e1.v * i1, a1.value !== s1 && ((a1 = new Number(s1)).value = s1, r1(a1, e1, \"unidimensional\")), a1;\n                    };\n                }(s1) : function(t1) {\n                    t1 && \"pv\" in t1 || (t1 = e1);\n                    var i1 = 1 / t1.mult, s1 = t1.data && t1.data.l || t1.pv.length, a1 = createTypedArray(\"float32\", s1), n1 = createTypedArray(\"float32\", s1);\n                    return a1.value = n1, r1(a1, t1, \"multidimensional\"), function() {\n                        t1.k && t1.getValue();\n                        for(var e1 = 0; e1 < s1; e1 += 1)n1[e1] = t1.v[e1] * i1, a1[e1] = n1[e1];\n                        return a1;\n                    };\n                }(s1) : i1;\n            };\n        }(), TransformExpressionInterface = function(t1) {\n            function e1(t1) {\n                switch(t1){\n                    case \"scale\":\n                    case \"Scale\":\n                    case \"ADBE Scale\":\n                    case 6:\n                        return e1.scale;\n                    case \"rotation\":\n                    case \"Rotation\":\n                    case \"ADBE Rotation\":\n                    case \"ADBE Rotate Z\":\n                    case 10:\n                        return e1.rotation;\n                    case \"ADBE Rotate X\":\n                        return e1.xRotation;\n                    case \"ADBE Rotate Y\":\n                        return e1.yRotation;\n                    case \"position\":\n                    case \"Position\":\n                    case \"ADBE Position\":\n                    case 2:\n                        return e1.position;\n                    case \"ADBE Position_0\":\n                        return e1.xPosition;\n                    case \"ADBE Position_1\":\n                        return e1.yPosition;\n                    case \"ADBE Position_2\":\n                        return e1.zPosition;\n                    case \"anchorPoint\":\n                    case \"AnchorPoint\":\n                    case \"Anchor Point\":\n                    case \"ADBE AnchorPoint\":\n                    case 1:\n                        return e1.anchorPoint;\n                    case \"opacity\":\n                    case \"Opacity\":\n                    case 11:\n                        return e1.opacity;\n                    default:\n                        return null;\n                }\n            }\n            var r1, i1, s1, a1;\n            return Object.defineProperty(e1, \"rotation\", {\n                get: ExpressionPropertyInterface(t1.r || t1.rz)\n            }), Object.defineProperty(e1, \"zRotation\", {\n                get: ExpressionPropertyInterface(t1.rz || t1.r)\n            }), Object.defineProperty(e1, \"xRotation\", {\n                get: ExpressionPropertyInterface(t1.rx)\n            }), Object.defineProperty(e1, \"yRotation\", {\n                get: ExpressionPropertyInterface(t1.ry)\n            }), Object.defineProperty(e1, \"scale\", {\n                get: ExpressionPropertyInterface(t1.s)\n            }), t1.p ? a1 = ExpressionPropertyInterface(t1.p) : (r1 = ExpressionPropertyInterface(t1.px), i1 = ExpressionPropertyInterface(t1.py), t1.pz && (s1 = ExpressionPropertyInterface(t1.pz))), Object.defineProperty(e1, \"position\", {\n                get: function() {\n                    return t1.p ? a1() : [\n                        r1(),\n                        i1(),\n                        s1 ? s1() : 0\n                    ];\n                }\n            }), Object.defineProperty(e1, \"xPosition\", {\n                get: ExpressionPropertyInterface(t1.px)\n            }), Object.defineProperty(e1, \"yPosition\", {\n                get: ExpressionPropertyInterface(t1.py)\n            }), Object.defineProperty(e1, \"zPosition\", {\n                get: ExpressionPropertyInterface(t1.pz)\n            }), Object.defineProperty(e1, \"anchorPoint\", {\n                get: ExpressionPropertyInterface(t1.a)\n            }), Object.defineProperty(e1, \"opacity\", {\n                get: ExpressionPropertyInterface(t1.o)\n            }), Object.defineProperty(e1, \"skew\", {\n                get: ExpressionPropertyInterface(t1.sk)\n            }), Object.defineProperty(e1, \"skewAxis\", {\n                get: ExpressionPropertyInterface(t1.sa)\n            }), Object.defineProperty(e1, \"orientation\", {\n                get: ExpressionPropertyInterface(t1.or)\n            }), e1;\n        }, LayerExpressionInterface = function() {\n            function t1(t1) {\n                var e1 = new Matrix;\n                return void 0 !== t1 ? this._elem.finalTransform.mProp.getValueAtTime(t1).clone(e1) : this._elem.finalTransform.mProp.applyToMatrix(e1), e1;\n            }\n            function e1(t1, e1) {\n                var r1 = this.getMatrix(e1);\n                return r1.props[12] = 0, r1.props[13] = 0, r1.props[14] = 0, this.applyPoint(r1, t1);\n            }\n            function r1(t1, e1) {\n                var r1 = this.getMatrix(e1);\n                return this.applyPoint(r1, t1);\n            }\n            function i1(t1, e1) {\n                var r1 = this.getMatrix(e1);\n                return r1.props[12] = 0, r1.props[13] = 0, r1.props[14] = 0, this.invertPoint(r1, t1);\n            }\n            function s1(t1, e1) {\n                var r1 = this.getMatrix(e1);\n                return this.invertPoint(r1, t1);\n            }\n            function a1(t1, e1) {\n                if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r1, i1 = this._elem.hierarchy.length;\n                    for(r1 = 0; r1 < i1; r1 += 1)this._elem.hierarchy[r1].finalTransform.mProp.applyToMatrix(t1);\n                }\n                return t1.applyToPointArray(e1[0], e1[1], e1[2] || 0);\n            }\n            function n1(t1, e1) {\n                if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r1, i1 = this._elem.hierarchy.length;\n                    for(r1 = 0; r1 < i1; r1 += 1)this._elem.hierarchy[r1].finalTransform.mProp.applyToMatrix(t1);\n                }\n                return t1.inversePoint(e1);\n            }\n            function o1(t1) {\n                var e1 = new Matrix;\n                if (e1.reset(), this._elem.finalTransform.mProp.applyToMatrix(e1), this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r1, i1 = this._elem.hierarchy.length;\n                    for(r1 = 0; r1 < i1; r1 += 1)this._elem.hierarchy[r1].finalTransform.mProp.applyToMatrix(e1);\n                    return e1.inversePoint(t1);\n                }\n                return e1.inversePoint(t1);\n            }\n            function h1() {\n                return [\n                    1,\n                    1,\n                    1,\n                    1\n                ];\n            }\n            return function(l1) {\n                var p1;\n                function c1(t1) {\n                    switch(t1){\n                        case \"ADBE Root Vectors Group\":\n                        case \"Contents\":\n                        case 2:\n                            return c1.shapeInterface;\n                        case 1:\n                        case 6:\n                        case \"Transform\":\n                        case \"transform\":\n                        case \"ADBE Transform Group\":\n                            return p1;\n                        case 4:\n                        case \"ADBE Effect Parade\":\n                        case \"effects\":\n                        case \"Effects\":\n                            return c1.effect;\n                        case \"ADBE Text Properties\":\n                            return c1.textInterface;\n                        default:\n                            return null;\n                    }\n                }\n                c1.getMatrix = t1, c1.invertPoint = n1, c1.applyPoint = a1, c1.toWorld = r1, c1.toWorldVec = e1, c1.fromWorld = s1, c1.fromWorldVec = i1, c1.toComp = r1, c1.fromComp = o1, c1.sampleImage = h1, c1.sourceRectAtTime = l1.sourceRectAtTime.bind(l1), c1._elem = l1;\n                var f1 = getDescriptor(p1 = TransformExpressionInterface(l1.finalTransform.mProp), \"anchorPoint\");\n                return Object.defineProperties(c1, {\n                    hasParent: {\n                        get: function() {\n                            return l1.hierarchy.length;\n                        }\n                    },\n                    parent: {\n                        get: function() {\n                            return l1.hierarchy[0].layerInterface;\n                        }\n                    },\n                    rotation: getDescriptor(p1, \"rotation\"),\n                    scale: getDescriptor(p1, \"scale\"),\n                    position: getDescriptor(p1, \"position\"),\n                    opacity: getDescriptor(p1, \"opacity\"),\n                    anchorPoint: f1,\n                    anchor_point: f1,\n                    transform: {\n                        get: function() {\n                            return p1;\n                        }\n                    },\n                    active: {\n                        get: function() {\n                            return l1.isInRange;\n                        }\n                    }\n                }), c1.startTime = l1.data.st, c1.index = l1.data.ind, c1.source = l1.data.refId, c1.height = 0 === l1.data.ty ? l1.data.h : 100, c1.width = 0 === l1.data.ty ? l1.data.w : 100, c1.inPoint = l1.data.ip / l1.comp.globalData.frameRate, c1.outPoint = l1.data.op / l1.comp.globalData.frameRate, c1._name = l1.data.nm, c1.registerMaskInterface = function(t1) {\n                    c1.mask = new MaskManagerInterface(t1, l1);\n                }, c1.registerEffectsInterface = function(t1) {\n                    c1.effect = t1;\n                }, c1;\n            };\n        }(), propertyGroupFactory = function(t1, e1) {\n            return function(r1) {\n                return (r1 = void 0 === r1 ? 1 : r1) <= 0 ? t1 : e1(r1 - 1);\n            };\n        }, PropertyInterface = function(t1, e1) {\n            var r1 = {\n                _name: t1\n            };\n            return function(t1) {\n                return (t1 = void 0 === t1 ? 1 : t1) <= 0 ? r1 : e1(t1 - 1);\n            };\n        }, EffectsExpressionInterface = function() {\n            var t1 = {\n                createEffectsInterface: function(t1, r1) {\n                    if (t1.effectsManager) {\n                        var i1, s1 = [], a1 = t1.data.ef, n1 = t1.effectsManager.effectElements.length;\n                        for(i1 = 0; i1 < n1; i1 += 1)s1.push(e1(a1[i1], t1.effectsManager.effectElements[i1], r1, t1));\n                        var o1 = t1.data.ef || [], h1 = function(t1) {\n                            for(i1 = 0, n1 = o1.length; i1 < n1;){\n                                if (t1 === o1[i1].nm || t1 === o1[i1].mn || t1 === o1[i1].ix) return s1[i1];\n                                i1 += 1;\n                            }\n                            return null;\n                        };\n                        return Object.defineProperty(h1, \"numProperties\", {\n                            get: function() {\n                                return o1.length;\n                            }\n                        }), h1;\n                    }\n                    return null;\n                }\n            };\n            function e1(t1, i1, s1, a1) {\n                function n1(e1) {\n                    for(var r1 = t1.ef, i1 = 0, s1 = r1.length; i1 < s1;){\n                        if (e1 === r1[i1].nm || e1 === r1[i1].mn || e1 === r1[i1].ix) return 5 === r1[i1].ty ? l1[i1] : l1[i1]();\n                        i1 += 1;\n                    }\n                    throw new Error;\n                }\n                var o1, h1 = propertyGroupFactory(n1, s1), l1 = [], p1 = t1.ef.length;\n                for(o1 = 0; o1 < p1; o1 += 1)5 === t1.ef[o1].ty ? l1.push(e1(t1.ef[o1], i1.effectElements[o1], i1.effectElements[o1].propertyGroup, a1)) : l1.push(r1(i1.effectElements[o1], t1.ef[o1].ty, a1, h1));\n                return \"ADBE Color Control\" === t1.mn && Object.defineProperty(n1, \"color\", {\n                    get: function() {\n                        return l1[0]();\n                    }\n                }), Object.defineProperties(n1, {\n                    numProperties: {\n                        get: function() {\n                            return t1.np;\n                        }\n                    },\n                    _name: {\n                        value: t1.nm\n                    },\n                    propertyGroup: {\n                        value: h1\n                    }\n                }), n1.enabled = 0 !== t1.en, n1.active = n1.enabled, n1;\n            }\n            function r1(t1, e1, r1, i1) {\n                var s1 = ExpressionPropertyInterface(t1.p);\n                return t1.p.setGroupProperty && t1.p.setGroupProperty(PropertyInterface(\"\", i1)), function() {\n                    return 10 === e1 ? r1.comp.compInterface(t1.p.v) : s1();\n                };\n            }\n            return t1;\n        }(), ShapePathInterface = function(t1, e1, r1) {\n            var i1 = e1.sh;\n            function s1(t1) {\n                return \"Shape\" === t1 || \"shape\" === t1 || \"Path\" === t1 || \"path\" === t1 || \"ADBE Vector Shape\" === t1 || 2 === t1 ? s1.path : null;\n            }\n            var a1 = propertyGroupFactory(s1, r1);\n            return i1.setGroupProperty(PropertyInterface(\"Path\", a1)), Object.defineProperties(s1, {\n                path: {\n                    get: function() {\n                        return i1.k && i1.getValue(), i1;\n                    }\n                },\n                shape: {\n                    get: function() {\n                        return i1.k && i1.getValue(), i1;\n                    }\n                },\n                _name: {\n                    value: t1.nm\n                },\n                ix: {\n                    value: t1.ix\n                },\n                propertyIndex: {\n                    value: t1.ix\n                },\n                mn: {\n                    value: t1.mn\n                },\n                propertyGroup: {\n                    value: r1\n                }\n            }), s1;\n        }, ShapeExpressionInterface = function() {\n            function t1(t1, n1, f1) {\n                var u1, d1 = [], m1 = t1 ? t1.length : 0;\n                for(u1 = 0; u1 < m1; u1 += 1)\"gr\" === t1[u1].ty ? d1.push(e1(t1[u1], n1[u1], f1)) : \"fl\" === t1[u1].ty ? d1.push(r1(t1[u1], n1[u1], f1)) : \"st\" === t1[u1].ty ? d1.push(s1(t1[u1], n1[u1], f1)) : \"tm\" === t1[u1].ty ? d1.push(a1(t1[u1], n1[u1], f1)) : \"tr\" === t1[u1].ty || (\"el\" === t1[u1].ty ? d1.push(o1(t1[u1], n1[u1], f1)) : \"sr\" === t1[u1].ty ? d1.push(h1(t1[u1], n1[u1], f1)) : \"sh\" === t1[u1].ty ? d1.push(ShapePathInterface(t1[u1], n1[u1], f1)) : \"rc\" === t1[u1].ty ? d1.push(l1(t1[u1], n1[u1], f1)) : \"rd\" === t1[u1].ty ? d1.push(p1(t1[u1], n1[u1], f1)) : \"rp\" === t1[u1].ty ? d1.push(c1(t1[u1], n1[u1], f1)) : \"gf\" === t1[u1].ty ? d1.push(i1(t1[u1], n1[u1], f1)) : d1.push((t1[u1], n1[u1], function() {\n                    return null;\n                })));\n                return d1;\n            }\n            function e1(e1, r1, i1) {\n                var s1 = function(t1) {\n                    switch(t1){\n                        case \"ADBE Vectors Group\":\n                        case \"Contents\":\n                        case 2:\n                            return s1.content;\n                        default:\n                            return s1.transform;\n                    }\n                };\n                s1.propertyGroup = propertyGroupFactory(s1, i1);\n                var a1 = function(e1, r1, i1) {\n                    var s1, a1 = function(t1) {\n                        for(var e1 = 0, r1 = s1.length; e1 < r1;){\n                            if (s1[e1]._name === t1 || s1[e1].mn === t1 || s1[e1].propertyIndex === t1 || s1[e1].ix === t1 || s1[e1].ind === t1) return s1[e1];\n                            e1 += 1;\n                        }\n                        return \"number\" == typeof t1 ? s1[t1 - 1] : null;\n                    };\n                    a1.propertyGroup = propertyGroupFactory(a1, i1), s1 = t1(e1.it, r1.it, a1.propertyGroup), a1.numProperties = s1.length;\n                    var o1 = n1(e1.it[e1.it.length - 1], r1.it[r1.it.length - 1], a1.propertyGroup);\n                    return a1.transform = o1, a1.propertyIndex = e1.cix, a1._name = e1.nm, a1;\n                }(e1, r1, s1.propertyGroup), o1 = n1(e1.it[e1.it.length - 1], r1.it[r1.it.length - 1], s1.propertyGroup);\n                return s1.content = a1, s1.transform = o1, Object.defineProperty(s1, \"_name\", {\n                    get: function() {\n                        return e1.nm;\n                    }\n                }), s1.numProperties = e1.np, s1.propertyIndex = e1.ix, s1.nm = e1.nm, s1.mn = e1.mn, s1;\n            }\n            function r1(t1, e1, r1) {\n                function i1(t1) {\n                    return \"Color\" === t1 || \"color\" === t1 ? i1.color : \"Opacity\" === t1 || \"opacity\" === t1 ? i1.opacity : null;\n                }\n                return Object.defineProperties(i1, {\n                    color: {\n                        get: ExpressionPropertyInterface(e1.c)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e1.o)\n                    },\n                    _name: {\n                        value: t1.nm\n                    },\n                    mn: {\n                        value: t1.mn\n                    }\n                }), e1.c.setGroupProperty(PropertyInterface(\"Color\", r1)), e1.o.setGroupProperty(PropertyInterface(\"Opacity\", r1)), i1;\n            }\n            function i1(t1, e1, r1) {\n                function i1(t1) {\n                    return \"Start Point\" === t1 || \"start point\" === t1 ? i1.startPoint : \"End Point\" === t1 || \"end point\" === t1 ? i1.endPoint : \"Opacity\" === t1 || \"opacity\" === t1 ? i1.opacity : null;\n                }\n                return Object.defineProperties(i1, {\n                    startPoint: {\n                        get: ExpressionPropertyInterface(e1.s)\n                    },\n                    endPoint: {\n                        get: ExpressionPropertyInterface(e1.e)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e1.o)\n                    },\n                    type: {\n                        get: function() {\n                            return \"a\";\n                        }\n                    },\n                    _name: {\n                        value: t1.nm\n                    },\n                    mn: {\n                        value: t1.mn\n                    }\n                }), e1.s.setGroupProperty(PropertyInterface(\"Start Point\", r1)), e1.e.setGroupProperty(PropertyInterface(\"End Point\", r1)), e1.o.setGroupProperty(PropertyInterface(\"Opacity\", r1)), i1;\n            }\n            function s1(t1, e1, r1) {\n                var i1, s1 = propertyGroupFactory(l1, r1), a1 = propertyGroupFactory(h1, s1);\n                function n1(r1) {\n                    Object.defineProperty(h1, t1.d[r1].nm, {\n                        get: ExpressionPropertyInterface(e1.d.dataProps[r1].p)\n                    });\n                }\n                var o1 = t1.d ? t1.d.length : 0, h1 = {};\n                for(i1 = 0; i1 < o1; i1 += 1)n1(i1), e1.d.dataProps[i1].p.setGroupProperty(a1);\n                function l1(t1) {\n                    return \"Color\" === t1 || \"color\" === t1 ? l1.color : \"Opacity\" === t1 || \"opacity\" === t1 ? l1.opacity : \"Stroke Width\" === t1 || \"stroke width\" === t1 ? l1.strokeWidth : null;\n                }\n                return Object.defineProperties(l1, {\n                    color: {\n                        get: ExpressionPropertyInterface(e1.c)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e1.o)\n                    },\n                    strokeWidth: {\n                        get: ExpressionPropertyInterface(e1.w)\n                    },\n                    dash: {\n                        get: function() {\n                            return h1;\n                        }\n                    },\n                    _name: {\n                        value: t1.nm\n                    },\n                    mn: {\n                        value: t1.mn\n                    }\n                }), e1.c.setGroupProperty(PropertyInterface(\"Color\", s1)), e1.o.setGroupProperty(PropertyInterface(\"Opacity\", s1)), e1.w.setGroupProperty(PropertyInterface(\"Stroke Width\", s1)), l1;\n            }\n            function a1(t1, e1, r1) {\n                function i1(e1) {\n                    return e1 === t1.e.ix || \"End\" === e1 || \"end\" === e1 ? i1.end : e1 === t1.s.ix ? i1.start : e1 === t1.o.ix ? i1.offset : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1);\n                return i1.propertyIndex = t1.ix, e1.s.setGroupProperty(PropertyInterface(\"Start\", s1)), e1.e.setGroupProperty(PropertyInterface(\"End\", s1)), e1.o.setGroupProperty(PropertyInterface(\"Offset\", s1)), i1.propertyIndex = t1.ix, i1.propertyGroup = r1, Object.defineProperties(i1, {\n                    start: {\n                        get: ExpressionPropertyInterface(e1.s)\n                    },\n                    end: {\n                        get: ExpressionPropertyInterface(e1.e)\n                    },\n                    offset: {\n                        get: ExpressionPropertyInterface(e1.o)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            function n1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.a.ix === e1 || \"Anchor Point\" === e1 ? i1.anchorPoint : t1.o.ix === e1 || \"Opacity\" === e1 ? i1.opacity : t1.p.ix === e1 || \"Position\" === e1 ? i1.position : t1.r.ix === e1 || \"Rotation\" === e1 || \"ADBE Vector Rotation\" === e1 ? i1.rotation : t1.s.ix === e1 || \"Scale\" === e1 ? i1.scale : t1.sk && t1.sk.ix === e1 || \"Skew\" === e1 ? i1.skew : t1.sa && t1.sa.ix === e1 || \"Skew Axis\" === e1 ? i1.skewAxis : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1);\n                return e1.transform.mProps.o.setGroupProperty(PropertyInterface(\"Opacity\", s1)), e1.transform.mProps.p.setGroupProperty(PropertyInterface(\"Position\", s1)), e1.transform.mProps.a.setGroupProperty(PropertyInterface(\"Anchor Point\", s1)), e1.transform.mProps.s.setGroupProperty(PropertyInterface(\"Scale\", s1)), e1.transform.mProps.r.setGroupProperty(PropertyInterface(\"Rotation\", s1)), e1.transform.mProps.sk && (e1.transform.mProps.sk.setGroupProperty(PropertyInterface(\"Skew\", s1)), e1.transform.mProps.sa.setGroupProperty(PropertyInterface(\"Skew Angle\", s1))), e1.transform.op.setGroupProperty(PropertyInterface(\"Opacity\", s1)), Object.defineProperties(i1, {\n                    opacity: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.o)\n                    },\n                    position: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.p)\n                    },\n                    anchorPoint: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.a)\n                    },\n                    scale: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.s)\n                    },\n                    rotation: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.r)\n                    },\n                    skew: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.sk)\n                    },\n                    skewAxis: {\n                        get: ExpressionPropertyInterface(e1.transform.mProps.sa)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.ty = \"tr\", i1.mn = t1.mn, i1.propertyGroup = r1, i1;\n            }\n            function o1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.p.ix === e1 ? i1.position : t1.s.ix === e1 ? i1.size : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1);\n                i1.propertyIndex = t1.ix;\n                var a1 = \"tm\" === e1.sh.ty ? e1.sh.prop : e1.sh;\n                return a1.s.setGroupProperty(PropertyInterface(\"Size\", s1)), a1.p.setGroupProperty(PropertyInterface(\"Position\", s1)), Object.defineProperties(i1, {\n                    size: {\n                        get: ExpressionPropertyInterface(a1.s)\n                    },\n                    position: {\n                        get: ExpressionPropertyInterface(a1.p)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            function h1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.p.ix === e1 ? i1.position : t1.r.ix === e1 ? i1.rotation : t1.pt.ix === e1 ? i1.points : t1.or.ix === e1 || \"ADBE Vector Star Outer Radius\" === e1 ? i1.outerRadius : t1.os.ix === e1 ? i1.outerRoundness : !t1.ir || t1.ir.ix !== e1 && \"ADBE Vector Star Inner Radius\" !== e1 ? t1.is && t1.is.ix === e1 ? i1.innerRoundness : null : i1.innerRadius;\n                }\n                var s1 = propertyGroupFactory(i1, r1), a1 = \"tm\" === e1.sh.ty ? e1.sh.prop : e1.sh;\n                return i1.propertyIndex = t1.ix, a1.or.setGroupProperty(PropertyInterface(\"Outer Radius\", s1)), a1.os.setGroupProperty(PropertyInterface(\"Outer Roundness\", s1)), a1.pt.setGroupProperty(PropertyInterface(\"Points\", s1)), a1.p.setGroupProperty(PropertyInterface(\"Position\", s1)), a1.r.setGroupProperty(PropertyInterface(\"Rotation\", s1)), t1.ir && (a1.ir.setGroupProperty(PropertyInterface(\"Inner Radius\", s1)), a1.is.setGroupProperty(PropertyInterface(\"Inner Roundness\", s1))), Object.defineProperties(i1, {\n                    position: {\n                        get: ExpressionPropertyInterface(a1.p)\n                    },\n                    rotation: {\n                        get: ExpressionPropertyInterface(a1.r)\n                    },\n                    points: {\n                        get: ExpressionPropertyInterface(a1.pt)\n                    },\n                    outerRadius: {\n                        get: ExpressionPropertyInterface(a1.or)\n                    },\n                    outerRoundness: {\n                        get: ExpressionPropertyInterface(a1.os)\n                    },\n                    innerRadius: {\n                        get: ExpressionPropertyInterface(a1.ir)\n                    },\n                    innerRoundness: {\n                        get: ExpressionPropertyInterface(a1.is)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            function l1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.p.ix === e1 ? i1.position : t1.r.ix === e1 ? i1.roundness : t1.s.ix === e1 || \"Size\" === e1 || \"ADBE Vector Rect Size\" === e1 ? i1.size : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1), a1 = \"tm\" === e1.sh.ty ? e1.sh.prop : e1.sh;\n                return i1.propertyIndex = t1.ix, a1.p.setGroupProperty(PropertyInterface(\"Position\", s1)), a1.s.setGroupProperty(PropertyInterface(\"Size\", s1)), a1.r.setGroupProperty(PropertyInterface(\"Rotation\", s1)), Object.defineProperties(i1, {\n                    position: {\n                        get: ExpressionPropertyInterface(a1.p)\n                    },\n                    roundness: {\n                        get: ExpressionPropertyInterface(a1.r)\n                    },\n                    size: {\n                        get: ExpressionPropertyInterface(a1.s)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            function p1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.r.ix === e1 || \"Round Corners 1\" === e1 ? i1.radius : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1), a1 = e1;\n                return i1.propertyIndex = t1.ix, a1.rd.setGroupProperty(PropertyInterface(\"Radius\", s1)), Object.defineProperties(i1, {\n                    radius: {\n                        get: ExpressionPropertyInterface(a1.rd)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            function c1(t1, e1, r1) {\n                function i1(e1) {\n                    return t1.c.ix === e1 || \"Copies\" === e1 ? i1.copies : t1.o.ix === e1 || \"Offset\" === e1 ? i1.offset : null;\n                }\n                var s1 = propertyGroupFactory(i1, r1), a1 = e1;\n                return i1.propertyIndex = t1.ix, a1.c.setGroupProperty(PropertyInterface(\"Copies\", s1)), a1.o.setGroupProperty(PropertyInterface(\"Offset\", s1)), Object.defineProperties(i1, {\n                    copies: {\n                        get: ExpressionPropertyInterface(a1.c)\n                    },\n                    offset: {\n                        get: ExpressionPropertyInterface(a1.o)\n                    },\n                    _name: {\n                        value: t1.nm\n                    }\n                }), i1.mn = t1.mn, i1;\n            }\n            return function(e1, r1, i1) {\n                var s1;\n                function a1(t1) {\n                    if (\"number\" == typeof t1) return 0 === (t1 = void 0 === t1 ? 1 : t1) ? i1 : s1[t1 - 1];\n                    for(var e1 = 0, r1 = s1.length; e1 < r1;){\n                        if (s1[e1]._name === t1) return s1[e1];\n                        e1 += 1;\n                    }\n                    return null;\n                }\n                return a1.propertyGroup = propertyGroupFactory(a1, function() {\n                    return i1;\n                }), s1 = t1(e1, r1, a1.propertyGroup), a1.numProperties = s1.length, a1._name = \"Contents\", a1;\n            };\n        }(), TextExpressionInterface = function(t1) {\n            var e1;\n            function r1(t1) {\n                return \"ADBE Text Document\" === t1 ? r1.sourceText : null;\n            }\n            return Object.defineProperty(r1, \"sourceText\", {\n                get: function() {\n                    t1.textProperty.getValue();\n                    var r1 = t1.textProperty.currentData.t;\n                    return e1 && r1 === e1.value || ((e1 = new String(r1)).value = r1 || new String(r1), Object.defineProperty(e1, \"style\", {\n                        get: function() {\n                            return {\n                                fillColor: t1.textProperty.currentData.fc\n                            };\n                        }\n                    })), e1;\n                }\n            }), r1;\n        };\n        function _typeof(t1) {\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t1) {\n                return typeof t1;\n            } : function(t1) {\n                return t1 && \"function\" == typeof Symbol && t1.constructor === Symbol && t1 !== Symbol.prototype ? \"symbol\" : typeof t1;\n            }, _typeof(t1);\n        }\n        var FootageInterface = (dataInterfaceFactory = function(t1) {\n            function e1(t1) {\n                return \"Outline\" === t1 ? e1.outlineInterface() : null;\n            }\n            return e1._name = \"Outline\", e1.outlineInterface = function(t1) {\n                var e1 = \"\", r1 = t1.getFootageData();\n                function i1(t1) {\n                    if (r1[t1]) return e1 = t1, \"object\" === _typeof(r1 = r1[t1]) ? i1 : r1;\n                    var s1 = t1.indexOf(e1);\n                    if (-1 !== s1) {\n                        var a1 = parseInt(t1.substr(s1 + e1.length), 10);\n                        return \"object\" === _typeof(r1 = r1[a1]) ? i1 : r1;\n                    }\n                    return \"\";\n                }\n                return function() {\n                    return e1 = \"\", r1 = t1.getFootageData(), i1;\n                };\n            }(t1), e1;\n        }, function(t1) {\n            function e1(t1) {\n                return \"Data\" === t1 ? e1.dataInterface : null;\n            }\n            return e1._name = \"Data\", e1.dataInterface = dataInterfaceFactory(t1), e1;\n        }), dataInterfaceFactory, interfaces = {\n            layer: LayerExpressionInterface,\n            effects: EffectsExpressionInterface,\n            comp: CompExpressionInterface,\n            shape: ShapeExpressionInterface,\n            text: TextExpressionInterface,\n            footage: FootageInterface\n        };\n        function getInterface(t1) {\n            return interfaces[t1] || null;\n        }\n        var expressionHelpers = {\n            searchExpressions: function(t1, e1, r1) {\n                e1.x && (r1.k = !0, r1.x = !0, r1.initiateExpression = ExpressionManager.initiateExpression, r1.effectsSequence.push(r1.initiateExpression(t1, e1, r1).bind(r1)));\n            },\n            getSpeedAtTime: function(t1) {\n                var e1 = this.getValueAtTime(t1), r1 = this.getValueAtTime(t1 + -.01), i1 = 0;\n                if (e1.length) {\n                    var s1;\n                    for(s1 = 0; s1 < e1.length; s1 += 1)i1 += Math.pow(r1[s1] - e1[s1], 2);\n                    i1 = 100 * Math.sqrt(i1);\n                } else i1 = 0;\n                return i1;\n            },\n            getVelocityAtTime: function(t1) {\n                if (void 0 !== this.vel) return this.vel;\n                var e1, r1, i1 = -.001, s1 = this.getValueAtTime(t1), a1 = this.getValueAtTime(t1 + i1);\n                if (s1.length) for(e1 = createTypedArray(\"float32\", s1.length), r1 = 0; r1 < s1.length; r1 += 1)e1[r1] = (a1[r1] - s1[r1]) / i1;\n                else e1 = (a1 - s1) / i1;\n                return e1;\n            },\n            getValueAtTime: function(t1) {\n                return t1 *= this.elem.globalData.frameRate, (t1 -= this.offsetTime) !== this._cachingAtTime.lastFrame && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < t1 ? this._cachingAtTime.lastIndex : 0, this._cachingAtTime.value = this.interpolateValue(t1, this._cachingAtTime), this._cachingAtTime.lastFrame = t1), this._cachingAtTime.value;\n            },\n            getStaticValueAtTime: function() {\n                return this.pv;\n            },\n            setGroupProperty: function(t1) {\n                this.propertyGroup = t1;\n            }\n        };\n        function addPropertyDecorator() {\n            function t1(t1, e1, r1) {\n                if (!this.k || !this.keyframes) return this.pv;\n                t1 = t1 ? t1.toLowerCase() : \"\";\n                var i1, s1, a1, n1, o1, h1 = this.comp.renderedFrame, l1 = this.keyframes, p1 = l1[l1.length - 1].t;\n                if (h1 <= p1) return this.pv;\n                if (r1 ? s1 = p1 - (i1 = e1 ? Math.abs(p1 - this.elem.comp.globalData.frameRate * e1) : Math.max(0, p1 - this.elem.data.ip)) : ((!e1 || e1 > l1.length - 1) && (e1 = l1.length - 1), i1 = p1 - (s1 = l1[l1.length - 1 - e1].t)), \"pingpong\" === t1) {\n                    if (Math.floor((h1 - s1) / i1) % 2 != 0) return this.getValueAtTime((i1 - (h1 - s1) % i1 + s1) / this.comp.globalData.frameRate, 0);\n                } else {\n                    if (\"offset\" === t1) {\n                        var c1 = this.getValueAtTime(s1 / this.comp.globalData.frameRate, 0), f1 = this.getValueAtTime(p1 / this.comp.globalData.frameRate, 0), u1 = this.getValueAtTime(((h1 - s1) % i1 + s1) / this.comp.globalData.frameRate, 0), d1 = Math.floor((h1 - s1) / i1);\n                        if (this.pv.length) {\n                            for(n1 = (o1 = new Array(c1.length)).length, a1 = 0; a1 < n1; a1 += 1)o1[a1] = (f1[a1] - c1[a1]) * d1 + u1[a1];\n                            return o1;\n                        }\n                        return (f1 - c1) * d1 + u1;\n                    }\n                    if (\"continue\" === t1) {\n                        var m1 = this.getValueAtTime(p1 / this.comp.globalData.frameRate, 0), y1 = this.getValueAtTime((p1 - .001) / this.comp.globalData.frameRate, 0);\n                        if (this.pv.length) {\n                            for(n1 = (o1 = new Array(m1.length)).length, a1 = 0; a1 < n1; a1 += 1)o1[a1] = m1[a1] + (m1[a1] - y1[a1]) * ((h1 - p1) / this.comp.globalData.frameRate) / 5e-4;\n                            return o1;\n                        }\n                        return m1 + (h1 - p1) / .001 * (m1 - y1);\n                    }\n                }\n                return this.getValueAtTime(((h1 - s1) % i1 + s1) / this.comp.globalData.frameRate, 0);\n            }\n            function e1(t1, e1, r1) {\n                if (!this.k) return this.pv;\n                t1 = t1 ? t1.toLowerCase() : \"\";\n                var i1, s1, a1, n1, o1, h1 = this.comp.renderedFrame, l1 = this.keyframes, p1 = l1[0].t;\n                if (h1 >= p1) return this.pv;\n                if (r1 ? s1 = p1 + (i1 = e1 ? Math.abs(this.elem.comp.globalData.frameRate * e1) : Math.max(0, this.elem.data.op - p1)) : ((!e1 || e1 > l1.length - 1) && (e1 = l1.length - 1), i1 = (s1 = l1[e1].t) - p1), \"pingpong\" === t1) {\n                    if (Math.floor((p1 - h1) / i1) % 2 == 0) return this.getValueAtTime(((p1 - h1) % i1 + p1) / this.comp.globalData.frameRate, 0);\n                } else {\n                    if (\"offset\" === t1) {\n                        var c1 = this.getValueAtTime(p1 / this.comp.globalData.frameRate, 0), f1 = this.getValueAtTime(s1 / this.comp.globalData.frameRate, 0), u1 = this.getValueAtTime((i1 - (p1 - h1) % i1 + p1) / this.comp.globalData.frameRate, 0), d1 = Math.floor((p1 - h1) / i1) + 1;\n                        if (this.pv.length) {\n                            for(n1 = (o1 = new Array(c1.length)).length, a1 = 0; a1 < n1; a1 += 1)o1[a1] = u1[a1] - (f1[a1] - c1[a1]) * d1;\n                            return o1;\n                        }\n                        return u1 - (f1 - c1) * d1;\n                    }\n                    if (\"continue\" === t1) {\n                        var m1 = this.getValueAtTime(p1 / this.comp.globalData.frameRate, 0), y1 = this.getValueAtTime((p1 + .001) / this.comp.globalData.frameRate, 0);\n                        if (this.pv.length) {\n                            for(n1 = (o1 = new Array(m1.length)).length, a1 = 0; a1 < n1; a1 += 1)o1[a1] = m1[a1] + (m1[a1] - y1[a1]) * (p1 - h1) / .001;\n                            return o1;\n                        }\n                        return m1 + (m1 - y1) * (p1 - h1) / .001;\n                    }\n                }\n                return this.getValueAtTime((i1 - ((p1 - h1) % i1 + p1)) / this.comp.globalData.frameRate, 0);\n            }\n            function r1(t1, e1) {\n                if (!this.k) return this.pv;\n                if (t1 = .5 * (t1 || .4), (e1 = Math.floor(e1 || 5)) <= 1) return this.pv;\n                var r1, i1, s1 = this.comp.renderedFrame / this.comp.globalData.frameRate, a1 = s1 - t1, n1 = e1 > 1 ? (s1 + t1 - a1) / (e1 - 1) : 1, o1 = 0, h1 = 0;\n                for(r1 = this.pv.length ? createTypedArray(\"float32\", this.pv.length) : 0; o1 < e1;){\n                    if (i1 = this.getValueAtTime(a1 + o1 * n1), this.pv.length) for(h1 = 0; h1 < this.pv.length; h1 += 1)r1[h1] += i1[h1];\n                    else r1 += i1;\n                    o1 += 1;\n                }\n                if (this.pv.length) for(h1 = 0; h1 < this.pv.length; h1 += 1)r1[h1] /= e1;\n                else r1 /= e1;\n                return r1;\n            }\n            function i1(t1) {\n                this._transformCachingAtTime || (this._transformCachingAtTime = {\n                    v: new Matrix\n                });\n                var e1 = this._transformCachingAtTime.v;\n                if (e1.cloneFromProps(this.pre.props), this.appliedTransformations < 1) {\n                    var r1 = this.a.getValueAtTime(t1);\n                    e1.translate(-r1[0] * this.a.mult, -r1[1] * this.a.mult, r1[2] * this.a.mult);\n                }\n                if (this.appliedTransformations < 2) {\n                    var i1 = this.s.getValueAtTime(t1);\n                    e1.scale(i1[0] * this.s.mult, i1[1] * this.s.mult, i1[2] * this.s.mult);\n                }\n                if (this.sk && this.appliedTransformations < 3) {\n                    var s1 = this.sk.getValueAtTime(t1), a1 = this.sa.getValueAtTime(t1);\n                    e1.skewFromAxis(-s1 * this.sk.mult, a1 * this.sa.mult);\n                }\n                if (this.r && this.appliedTransformations < 4) {\n                    var n1 = this.r.getValueAtTime(t1);\n                    e1.rotate(-n1 * this.r.mult);\n                } else if (!this.r && this.appliedTransformations < 4) {\n                    var o1 = this.rz.getValueAtTime(t1), h1 = this.ry.getValueAtTime(t1), l1 = this.rx.getValueAtTime(t1), p1 = this.or.getValueAtTime(t1);\n                    e1.rotateZ(-o1 * this.rz.mult).rotateY(h1 * this.ry.mult).rotateX(l1 * this.rx.mult).rotateZ(-p1[2] * this.or.mult).rotateY(p1[1] * this.or.mult).rotateX(p1[0] * this.or.mult);\n                }\n                if (this.data.p && this.data.p.s) {\n                    var c1 = this.px.getValueAtTime(t1), f1 = this.py.getValueAtTime(t1);\n                    if (this.data.p.z) {\n                        var u1 = this.pz.getValueAtTime(t1);\n                        e1.translate(c1 * this.px.mult, f1 * this.py.mult, -u1 * this.pz.mult);\n                    } else e1.translate(c1 * this.px.mult, f1 * this.py.mult, 0);\n                } else {\n                    var d1 = this.p.getValueAtTime(t1);\n                    e1.translate(d1[0] * this.p.mult, d1[1] * this.p.mult, -d1[2] * this.p.mult);\n                }\n                return e1;\n            }\n            function s1() {\n                return this.v.clone(new Matrix);\n            }\n            var a1 = TransformPropertyFactory.getTransformProperty;\n            TransformPropertyFactory.getTransformProperty = function(t1, e1, r1) {\n                var n1 = a1(t1, e1, r1);\n                return n1.dynamicProperties.length ? n1.getValueAtTime = i1.bind(n1) : n1.getValueAtTime = s1.bind(n1), n1.setGroupProperty = expressionHelpers.setGroupProperty, n1;\n            };\n            var n1 = PropertyFactory.getProp;\n            PropertyFactory.getProp = function(i1, s1, a1, o1, h1) {\n                var l1 = n1(i1, s1, a1, o1, h1);\n                l1.kf ? l1.getValueAtTime = expressionHelpers.getValueAtTime.bind(l1) : l1.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(l1), l1.setGroupProperty = expressionHelpers.setGroupProperty, l1.loopOut = t1, l1.loopIn = e1, l1.smooth = r1, l1.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(l1), l1.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(l1), l1.numKeys = 1 === s1.a ? s1.k.length : 0, l1.propertyIndex = s1.ix;\n                var p1 = 0;\n                return 0 !== a1 && (p1 = createTypedArray(\"float32\", 1 === s1.a ? s1.k[0].s.length : s1.k.length)), l1._cachingAtTime = {\n                    lastFrame: initialDefaultFrame,\n                    lastIndex: 0,\n                    value: p1\n                }, expressionHelpers.searchExpressions(i1, s1, l1), l1.k && h1.addDynamicProperty(l1), l1;\n            };\n            var o1 = ShapePropertyFactory.getConstructorFunction(), h1 = ShapePropertyFactory.getKeyframedConstructorFunction();\n            function l1() {}\n            l1.prototype = {\n                vertices: function(t1, e1) {\n                    this.k && this.getValue();\n                    var r1, i1 = this.v;\n                    void 0 !== e1 && (i1 = this.getValueAtTime(e1, 0));\n                    var s1 = i1._length, a1 = i1[t1], n1 = i1.v, o1 = createSizedArray(s1);\n                    for(r1 = 0; r1 < s1; r1 += 1)o1[r1] = \"i\" === t1 || \"o\" === t1 ? [\n                        a1[r1][0] - n1[r1][0],\n                        a1[r1][1] - n1[r1][1]\n                    ] : [\n                        a1[r1][0],\n                        a1[r1][1]\n                    ];\n                    return o1;\n                },\n                points: function(t1) {\n                    return this.vertices(\"v\", t1);\n                },\n                inTangents: function(t1) {\n                    return this.vertices(\"i\", t1);\n                },\n                outTangents: function(t1) {\n                    return this.vertices(\"o\", t1);\n                },\n                isClosed: function() {\n                    return this.v.c;\n                },\n                pointOnPath: function(t1, e1) {\n                    var r1 = this.v;\n                    void 0 !== e1 && (r1 = this.getValueAtTime(e1, 0)), this._segmentsLength || (this._segmentsLength = bez.getSegmentsLength(r1));\n                    for(var i1, s1 = this._segmentsLength, a1 = s1.lengths, n1 = s1.totalLength * t1, o1 = 0, h1 = a1.length, l1 = 0; o1 < h1;){\n                        if (l1 + a1[o1].addedLength > n1) {\n                            var p1 = o1, c1 = r1.c && o1 === h1 - 1 ? 0 : o1 + 1, f1 = (n1 - l1) / a1[o1].addedLength;\n                            i1 = bez.getPointInSegment(r1.v[p1], r1.v[c1], r1.o[p1], r1.i[c1], f1, a1[o1]);\n                            break;\n                        }\n                        l1 += a1[o1].addedLength, o1 += 1;\n                    }\n                    return i1 || (i1 = r1.c ? [\n                        r1.v[0][0],\n                        r1.v[0][1]\n                    ] : [\n                        r1.v[r1._length - 1][0],\n                        r1.v[r1._length - 1][1]\n                    ]), i1;\n                },\n                vectorOnPath: function(t1, e1, r1) {\n                    1 == t1 ? t1 = this.v.c : 0 == t1 && (t1 = .999);\n                    var i1 = this.pointOnPath(t1, e1), s1 = this.pointOnPath(t1 + .001, e1), a1 = s1[0] - i1[0], n1 = s1[1] - i1[1], o1 = Math.sqrt(Math.pow(a1, 2) + Math.pow(n1, 2));\n                    return 0 === o1 ? [\n                        0,\n                        0\n                    ] : \"tangent\" === r1 ? [\n                        a1 / o1,\n                        n1 / o1\n                    ] : [\n                        -n1 / o1,\n                        a1 / o1\n                    ];\n                },\n                tangentOnPath: function(t1, e1) {\n                    return this.vectorOnPath(t1, e1, \"tangent\");\n                },\n                normalOnPath: function(t1, e1) {\n                    return this.vectorOnPath(t1, e1, \"normal\");\n                },\n                setGroupProperty: expressionHelpers.setGroupProperty,\n                getValueAtTime: expressionHelpers.getStaticValueAtTime\n            }, extendPrototype([\n                l1\n            ], o1), extendPrototype([\n                l1\n            ], h1), h1.prototype.getValueAtTime = function(t1) {\n                return this._cachingAtTime || (this._cachingAtTime = {\n                    shapeValue: shapePool.clone(this.pv),\n                    lastIndex: 0,\n                    lastTime: initialDefaultFrame\n                }), t1 *= this.elem.globalData.frameRate, (t1 -= this.offsetTime) !== this._cachingAtTime.lastTime && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < t1 ? this._caching.lastIndex : 0, this._cachingAtTime.lastTime = t1, this.interpolateShape(t1, this._cachingAtTime.shapeValue, this._cachingAtTime)), this._cachingAtTime.shapeValue;\n            }, h1.prototype.initiateExpression = ExpressionManager.initiateExpression;\n            var p1 = ShapePropertyFactory.getShapeProp;\n            ShapePropertyFactory.getShapeProp = function(t1, e1, r1, i1, s1) {\n                var a1 = p1(t1, e1, r1, i1, s1);\n                return a1.propertyIndex = e1.ix, a1.lock = !1, 3 === r1 ? expressionHelpers.searchExpressions(t1, e1.pt, a1) : 4 === r1 && expressionHelpers.searchExpressions(t1, e1.ks, a1), a1.k && t1.addDynamicProperty(a1), a1;\n            };\n        }\n        function initialize$1() {\n            addPropertyDecorator();\n        }\n        function addDecorator() {\n            TextProperty.prototype.getExpressionValue = function(t1, e1) {\n                var r1 = this.calculateExpression(e1);\n                if (t1.t !== r1) {\n                    var i1 = {};\n                    return this.copyData(i1, t1), i1.t = r1.toString(), i1.__complete = !1, i1;\n                }\n                return t1;\n            }, TextProperty.prototype.searchProperty = function() {\n                var t1 = this.searchKeyframes(), e1 = this.searchExpressions();\n                return this.kf = t1 || e1, this.kf;\n            }, TextProperty.prototype.searchExpressions = function() {\n                return this.data.d.x ? (this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this), this.addEffect(this.getExpressionValue.bind(this)), !0) : null;\n            };\n        }\n        function initialize() {\n            addDecorator();\n        }\n        function SVGComposableEffect() {}\n        SVGComposableEffect.prototype = {\n            createMergeNode: function(t1, e1) {\n                var r1, i1, s1 = createNS(\"feMerge\");\n                for(s1.setAttribute(\"result\", t1), i1 = 0; i1 < e1.length; i1 += 1)(r1 = createNS(\"feMergeNode\")).setAttribute(\"in\", e1[i1]), s1.appendChild(r1), s1.appendChild(r1);\n                return s1;\n            }\n        };\n        var linearFilterValue = \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0\";\n        function SVGTintFilter(t1, e1, r1, i1, s1) {\n            this.filterManager = e1;\n            var a1 = createNS(\"feColorMatrix\");\n            a1.setAttribute(\"type\", \"matrix\"), a1.setAttribute(\"color-interpolation-filters\", \"linearRGB\"), a1.setAttribute(\"values\", linearFilterValue + \" 1 0\"), this.linearFilter = a1, a1.setAttribute(\"result\", i1 + \"_tint_1\"), t1.appendChild(a1), (a1 = createNS(\"feColorMatrix\")).setAttribute(\"type\", \"matrix\"), a1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), a1.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\"), a1.setAttribute(\"result\", i1 + \"_tint_2\"), t1.appendChild(a1), this.matrixFilter = a1;\n            var n1 = this.createMergeNode(i1, [\n                s1,\n                i1 + \"_tint_1\",\n                i1 + \"_tint_2\"\n            ]);\n            t1.appendChild(n1);\n        }\n        function SVGFillFilter(t1, e1, r1, i1) {\n            this.filterManager = e1;\n            var s1 = createNS(\"feColorMatrix\");\n            s1.setAttribute(\"type\", \"matrix\"), s1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), s1.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\"), s1.setAttribute(\"result\", i1), t1.appendChild(s1), this.matrixFilter = s1;\n        }\n        function SVGStrokeEffect(t1, e1, r1) {\n            this.initialized = !1, this.filterManager = e1, this.elem = r1, this.paths = [];\n        }\n        function SVGTritoneFilter(t1, e1, r1, i1) {\n            this.filterManager = e1;\n            var s1 = createNS(\"feColorMatrix\");\n            s1.setAttribute(\"type\", \"matrix\"), s1.setAttribute(\"color-interpolation-filters\", \"linearRGB\"), s1.setAttribute(\"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"), t1.appendChild(s1);\n            var a1 = createNS(\"feComponentTransfer\");\n            a1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), a1.setAttribute(\"result\", i1), this.matrixFilter = a1;\n            var n1 = createNS(\"feFuncR\");\n            n1.setAttribute(\"type\", \"table\"), a1.appendChild(n1), this.feFuncR = n1;\n            var o1 = createNS(\"feFuncG\");\n            o1.setAttribute(\"type\", \"table\"), a1.appendChild(o1), this.feFuncG = o1;\n            var h1 = createNS(\"feFuncB\");\n            h1.setAttribute(\"type\", \"table\"), a1.appendChild(h1), this.feFuncB = h1, t1.appendChild(a1);\n        }\n        function SVGProLevelsFilter(t1, e1, r1, i1) {\n            this.filterManager = e1;\n            var s1 = this.filterManager.effectElements, a1 = createNS(\"feComponentTransfer\");\n            (s1[10].p.k || 0 !== s1[10].p.v || s1[11].p.k || 1 !== s1[11].p.v || s1[12].p.k || 1 !== s1[12].p.v || s1[13].p.k || 0 !== s1[13].p.v || s1[14].p.k || 1 !== s1[14].p.v) && (this.feFuncR = this.createFeFunc(\"feFuncR\", a1)), (s1[17].p.k || 0 !== s1[17].p.v || s1[18].p.k || 1 !== s1[18].p.v || s1[19].p.k || 1 !== s1[19].p.v || s1[20].p.k || 0 !== s1[20].p.v || s1[21].p.k || 1 !== s1[21].p.v) && (this.feFuncG = this.createFeFunc(\"feFuncG\", a1)), (s1[24].p.k || 0 !== s1[24].p.v || s1[25].p.k || 1 !== s1[25].p.v || s1[26].p.k || 1 !== s1[26].p.v || s1[27].p.k || 0 !== s1[27].p.v || s1[28].p.k || 1 !== s1[28].p.v) && (this.feFuncB = this.createFeFunc(\"feFuncB\", a1)), (s1[31].p.k || 0 !== s1[31].p.v || s1[32].p.k || 1 !== s1[32].p.v || s1[33].p.k || 1 !== s1[33].p.v || s1[34].p.k || 0 !== s1[34].p.v || s1[35].p.k || 1 !== s1[35].p.v) && (this.feFuncA = this.createFeFunc(\"feFuncA\", a1)), (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) && (a1.setAttribute(\"color-interpolation-filters\", \"sRGB\"), t1.appendChild(a1)), (s1[3].p.k || 0 !== s1[3].p.v || s1[4].p.k || 1 !== s1[4].p.v || s1[5].p.k || 1 !== s1[5].p.v || s1[6].p.k || 0 !== s1[6].p.v || s1[7].p.k || 1 !== s1[7].p.v) && ((a1 = createNS(\"feComponentTransfer\")).setAttribute(\"color-interpolation-filters\", \"sRGB\"), a1.setAttribute(\"result\", i1), t1.appendChild(a1), this.feFuncRComposed = this.createFeFunc(\"feFuncR\", a1), this.feFuncGComposed = this.createFeFunc(\"feFuncG\", a1), this.feFuncBComposed = this.createFeFunc(\"feFuncB\", a1));\n        }\n        function SVGDropShadowEffect(t1, e1, r1, i1, s1) {\n            var a1 = e1.container.globalData.renderConfig.filterSize, n1 = e1.data.fs || a1;\n            t1.setAttribute(\"x\", n1.x || a1.x), t1.setAttribute(\"y\", n1.y || a1.y), t1.setAttribute(\"width\", n1.width || a1.width), t1.setAttribute(\"height\", n1.height || a1.height), this.filterManager = e1;\n            var o1 = createNS(\"feGaussianBlur\");\n            o1.setAttribute(\"in\", \"SourceAlpha\"), o1.setAttribute(\"result\", i1 + \"_drop_shadow_1\"), o1.setAttribute(\"stdDeviation\", \"0\"), this.feGaussianBlur = o1, t1.appendChild(o1);\n            var h1 = createNS(\"feOffset\");\n            h1.setAttribute(\"dx\", \"25\"), h1.setAttribute(\"dy\", \"0\"), h1.setAttribute(\"in\", i1 + \"_drop_shadow_1\"), h1.setAttribute(\"result\", i1 + \"_drop_shadow_2\"), this.feOffset = h1, t1.appendChild(h1);\n            var l1 = createNS(\"feFlood\");\n            l1.setAttribute(\"flood-color\", \"#00ff00\"), l1.setAttribute(\"flood-opacity\", \"1\"), l1.setAttribute(\"result\", i1 + \"_drop_shadow_3\"), this.feFlood = l1, t1.appendChild(l1);\n            var p1 = createNS(\"feComposite\");\n            p1.setAttribute(\"in\", i1 + \"_drop_shadow_3\"), p1.setAttribute(\"in2\", i1 + \"_drop_shadow_2\"), p1.setAttribute(\"operator\", \"in\"), p1.setAttribute(\"result\", i1 + \"_drop_shadow_4\"), t1.appendChild(p1);\n            var c1 = this.createMergeNode(i1, [\n                i1 + \"_drop_shadow_4\",\n                s1\n            ]);\n            t1.appendChild(c1);\n        }\n        extendPrototype([\n            SVGComposableEffect\n        ], SVGTintFilter), SVGTintFilter.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                var e1 = this.filterManager.effectElements[0].p.v, r1 = this.filterManager.effectElements[1].p.v, i1 = this.filterManager.effectElements[2].p.v / 100;\n                this.linearFilter.setAttribute(\"values\", linearFilterValue + \" \" + i1 + \" 0\"), this.matrixFilter.setAttribute(\"values\", r1[0] - e1[0] + \" 0 0 0 \" + e1[0] + \" \" + (r1[1] - e1[1]) + \" 0 0 0 \" + e1[1] + \" \" + (r1[2] - e1[2]) + \" 0 0 0 \" + e1[2] + \" 0 0 0 1 0\");\n            }\n        }, SVGFillFilter.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                var e1 = this.filterManager.effectElements[2].p.v, r1 = this.filterManager.effectElements[6].p.v;\n                this.matrixFilter.setAttribute(\"values\", \"0 0 0 0 \" + e1[0] + \" 0 0 0 0 \" + e1[1] + \" 0 0 0 0 \" + e1[2] + \" 0 0 0 \" + r1 + \" 0\");\n            }\n        }, SVGStrokeEffect.prototype.initialize = function() {\n            var t1, e1, r1, i1, s1 = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n            for(1 === this.filterManager.effectElements[1].p.v ? (i1 = this.elem.maskManager.masksProperties.length, r1 = 0) : i1 = 1 + (r1 = this.filterManager.effectElements[0].p.v - 1), (e1 = createNS(\"g\")).setAttribute(\"fill\", \"none\"), e1.setAttribute(\"stroke-linecap\", \"round\"), e1.setAttribute(\"stroke-dashoffset\", 1); r1 < i1; r1 += 1)t1 = createNS(\"path\"), e1.appendChild(t1), this.paths.push({\n                p: t1,\n                m: r1\n            });\n            if (3 === this.filterManager.effectElements[10].p.v) {\n                var a1 = createNS(\"mask\"), n1 = createElementID();\n                a1.setAttribute(\"id\", n1), a1.setAttribute(\"mask-type\", \"alpha\"), a1.appendChild(e1), this.elem.globalData.defs.appendChild(a1);\n                var o1 = createNS(\"g\");\n                for(o1.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + n1 + \")\"); s1[0];)o1.appendChild(s1[0]);\n                this.elem.layerElement.appendChild(o1), this.masker = a1, e1.setAttribute(\"stroke\", \"#fff\");\n            } else if (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) {\n                if (2 === this.filterManager.effectElements[10].p.v) for(s1 = this.elem.layerElement.children || this.elem.layerElement.childNodes; s1.length;)this.elem.layerElement.removeChild(s1[0]);\n                this.elem.layerElement.appendChild(e1), this.elem.layerElement.removeAttribute(\"mask\"), e1.setAttribute(\"stroke\", \"#fff\");\n            }\n            this.initialized = !0, this.pathMasker = e1;\n        }, SVGStrokeEffect.prototype.renderFrame = function(t1) {\n            var e1;\n            this.initialized || this.initialize();\n            var r1, i1, s1 = this.paths.length;\n            for(e1 = 0; e1 < s1; e1 += 1)if (-1 !== this.paths[e1].m && (r1 = this.elem.maskManager.viewData[this.paths[e1].m], i1 = this.paths[e1].p, (t1 || this.filterManager._mdf || r1.prop._mdf) && i1.setAttribute(\"d\", r1.lastPath), t1 || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || r1.prop._mdf)) {\n                var a1;\n                if (0 !== this.filterManager.effectElements[7].p.v || 100 !== this.filterManager.effectElements[8].p.v) {\n                    var n1 = .01 * Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v), o1 = .01 * Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v), h1 = i1.getTotalLength();\n                    a1 = \"0 0 0 \" + h1 * n1 + \" \";\n                    var l1, p1 = h1 * (o1 - n1), c1 = 1 + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01, f1 = Math.floor(p1 / c1);\n                    for(l1 = 0; l1 < f1; l1 += 1)a1 += \"1 \" + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01 + \" \";\n                    a1 += \"0 \" + 10 * h1 + \" 0 0\";\n                } else a1 = \"1 \" + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01;\n                i1.setAttribute(\"stroke-dasharray\", a1);\n            }\n            if ((t1 || this.filterManager.effectElements[4].p._mdf) && this.pathMasker.setAttribute(\"stroke-width\", 2 * this.filterManager.effectElements[4].p.v), (t1 || this.filterManager.effectElements[6].p._mdf) && this.pathMasker.setAttribute(\"opacity\", this.filterManager.effectElements[6].p.v), (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) && (t1 || this.filterManager.effectElements[3].p._mdf)) {\n                var u1 = this.filterManager.effectElements[3].p.v;\n                this.pathMasker.setAttribute(\"stroke\", \"rgb(\" + bmFloor(255 * u1[0]) + \",\" + bmFloor(255 * u1[1]) + \",\" + bmFloor(255 * u1[2]) + \")\");\n            }\n        }, SVGTritoneFilter.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                var e1 = this.filterManager.effectElements[0].p.v, r1 = this.filterManager.effectElements[1].p.v, i1 = this.filterManager.effectElements[2].p.v, s1 = i1[0] + \" \" + r1[0] + \" \" + e1[0], a1 = i1[1] + \" \" + r1[1] + \" \" + e1[1], n1 = i1[2] + \" \" + r1[2] + \" \" + e1[2];\n                this.feFuncR.setAttribute(\"tableValues\", s1), this.feFuncG.setAttribute(\"tableValues\", a1), this.feFuncB.setAttribute(\"tableValues\", n1);\n            }\n        }, SVGProLevelsFilter.prototype.createFeFunc = function(t1, e1) {\n            var r1 = createNS(t1);\n            return r1.setAttribute(\"type\", \"table\"), e1.appendChild(r1), r1;\n        }, SVGProLevelsFilter.prototype.getTableValue = function(t1, e1, r1, i1, s1) {\n            for(var a1, n1, o1 = 0, h1 = Math.min(t1, e1), l1 = Math.max(t1, e1), p1 = Array.call(null, {\n                length: 256\n            }), c1 = 0, f1 = s1 - i1, u1 = e1 - t1; o1 <= 256;)n1 = (a1 = o1 / 256) <= h1 ? u1 < 0 ? s1 : i1 : a1 >= l1 ? u1 < 0 ? i1 : s1 : i1 + f1 * Math.pow((a1 - t1) / u1, 1 / r1), p1[c1] = n1, c1 += 1, o1 += 256 / 255;\n            return p1.join(\" \");\n        }, SVGProLevelsFilter.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                var e1, r1 = this.filterManager.effectElements;\n                this.feFuncRComposed && (t1 || r1[3].p._mdf || r1[4].p._mdf || r1[5].p._mdf || r1[6].p._mdf || r1[7].p._mdf) && (e1 = this.getTableValue(r1[3].p.v, r1[4].p.v, r1[5].p.v, r1[6].p.v, r1[7].p.v), this.feFuncRComposed.setAttribute(\"tableValues\", e1), this.feFuncGComposed.setAttribute(\"tableValues\", e1), this.feFuncBComposed.setAttribute(\"tableValues\", e1)), this.feFuncR && (t1 || r1[10].p._mdf || r1[11].p._mdf || r1[12].p._mdf || r1[13].p._mdf || r1[14].p._mdf) && (e1 = this.getTableValue(r1[10].p.v, r1[11].p.v, r1[12].p.v, r1[13].p.v, r1[14].p.v), this.feFuncR.setAttribute(\"tableValues\", e1)), this.feFuncG && (t1 || r1[17].p._mdf || r1[18].p._mdf || r1[19].p._mdf || r1[20].p._mdf || r1[21].p._mdf) && (e1 = this.getTableValue(r1[17].p.v, r1[18].p.v, r1[19].p.v, r1[20].p.v, r1[21].p.v), this.feFuncG.setAttribute(\"tableValues\", e1)), this.feFuncB && (t1 || r1[24].p._mdf || r1[25].p._mdf || r1[26].p._mdf || r1[27].p._mdf || r1[28].p._mdf) && (e1 = this.getTableValue(r1[24].p.v, r1[25].p.v, r1[26].p.v, r1[27].p.v, r1[28].p.v), this.feFuncB.setAttribute(\"tableValues\", e1)), this.feFuncA && (t1 || r1[31].p._mdf || r1[32].p._mdf || r1[33].p._mdf || r1[34].p._mdf || r1[35].p._mdf) && (e1 = this.getTableValue(r1[31].p.v, r1[32].p.v, r1[33].p.v, r1[34].p.v, r1[35].p.v), this.feFuncA.setAttribute(\"tableValues\", e1));\n            }\n        }, extendPrototype([\n            SVGComposableEffect\n        ], SVGDropShadowEffect), SVGDropShadowEffect.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                if ((t1 || this.filterManager.effectElements[4].p._mdf) && this.feGaussianBlur.setAttribute(\"stdDeviation\", this.filterManager.effectElements[4].p.v / 4), t1 || this.filterManager.effectElements[0].p._mdf) {\n                    var e1 = this.filterManager.effectElements[0].p.v;\n                    this.feFlood.setAttribute(\"flood-color\", rgbToHex(Math.round(255 * e1[0]), Math.round(255 * e1[1]), Math.round(255 * e1[2])));\n                }\n                if ((t1 || this.filterManager.effectElements[1].p._mdf) && this.feFlood.setAttribute(\"flood-opacity\", this.filterManager.effectElements[1].p.v / 255), t1 || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {\n                    var r1 = this.filterManager.effectElements[3].p.v, i1 = (this.filterManager.effectElements[2].p.v - 90) * degToRads, s1 = r1 * Math.cos(i1), a1 = r1 * Math.sin(i1);\n                    this.feOffset.setAttribute(\"dx\", s1), this.feOffset.setAttribute(\"dy\", a1);\n                }\n            }\n        };\n        var _svgMatteSymbols = [];\n        function SVGMatte3Effect(t1, e1, r1) {\n            this.initialized = !1, this.filterManager = e1, this.filterElem = t1, this.elem = r1, r1.matteElement = createNS(\"g\"), r1.matteElement.appendChild(r1.layerElement), r1.matteElement.appendChild(r1.transformedElement), r1.baseElement = r1.matteElement;\n        }\n        function SVGGaussianBlurEffect(t1, e1, r1, i1) {\n            t1.setAttribute(\"x\", \"-100%\"), t1.setAttribute(\"y\", \"-100%\"), t1.setAttribute(\"width\", \"300%\"), t1.setAttribute(\"height\", \"300%\"), this.filterManager = e1;\n            var s1 = createNS(\"feGaussianBlur\");\n            s1.setAttribute(\"result\", i1), t1.appendChild(s1), this.feGaussianBlur = s1;\n        }\n        function TransformEffect() {}\n        function SVGTransformEffect(t1, e1) {\n            this.init(e1);\n        }\n        function CVTransformEffect(t1) {\n            this.init(t1);\n        }\n        return SVGMatte3Effect.prototype.findSymbol = function(t1) {\n            for(var e1 = 0, r1 = _svgMatteSymbols.length; e1 < r1;){\n                if (_svgMatteSymbols[e1] === t1) return _svgMatteSymbols[e1];\n                e1 += 1;\n            }\n            return null;\n        }, SVGMatte3Effect.prototype.replaceInParent = function(t1, e1) {\n            var r1 = t1.layerElement.parentNode;\n            if (r1) {\n                for(var i1, s1 = r1.children, a1 = 0, n1 = s1.length; a1 < n1 && s1[a1] !== t1.layerElement;)a1 += 1;\n                a1 <= n1 - 2 && (i1 = s1[a1 + 1]);\n                var o1 = createNS(\"use\");\n                o1.setAttribute(\"href\", \"#\" + e1), i1 ? r1.insertBefore(o1, i1) : r1.appendChild(o1);\n            }\n        }, SVGMatte3Effect.prototype.setElementAsMask = function(t1, e1) {\n            if (!this.findSymbol(e1)) {\n                var r1 = createElementID(), i1 = createNS(\"mask\");\n                i1.setAttribute(\"id\", e1.layerId), i1.setAttribute(\"mask-type\", \"alpha\"), _svgMatteSymbols.push(e1);\n                var s1 = t1.globalData.defs;\n                s1.appendChild(i1);\n                var a1 = createNS(\"symbol\");\n                a1.setAttribute(\"id\", r1), this.replaceInParent(e1, r1), a1.appendChild(e1.layerElement), s1.appendChild(a1);\n                var n1 = createNS(\"use\");\n                n1.setAttribute(\"href\", \"#\" + r1), i1.appendChild(n1), e1.data.hd = !1, e1.show();\n            }\n            t1.setMatte(e1.layerId);\n        }, SVGMatte3Effect.prototype.initialize = function() {\n            for(var t1 = this.filterManager.effectElements[0].p.v, e1 = this.elem.comp.elements, r1 = 0, i1 = e1.length; r1 < i1;)e1[r1] && e1[r1].data.ind === t1 && this.setElementAsMask(this.elem, e1[r1]), r1 += 1;\n            this.initialized = !0;\n        }, SVGMatte3Effect.prototype.renderFrame = function() {\n            this.initialized || this.initialize();\n        }, SVGGaussianBlurEffect.prototype.renderFrame = function(t1) {\n            if (t1 || this.filterManager._mdf) {\n                var e1 = .3 * this.filterManager.effectElements[0].p.v, r1 = this.filterManager.effectElements[1].p.v, i1 = 3 == r1 ? 0 : e1, s1 = 2 == r1 ? 0 : e1;\n                this.feGaussianBlur.setAttribute(\"stdDeviation\", i1 + \" \" + s1);\n                var a1 = 1 == this.filterManager.effectElements[2].p.v ? \"wrap\" : \"duplicate\";\n                this.feGaussianBlur.setAttribute(\"edgeMode\", a1);\n            }\n        }, TransformEffect.prototype.init = function(t1) {\n            this.effectsManager = t1, this.type = effectTypes.TRANSFORM_EFFECT, this.matrix = new Matrix, this.opacity = -1, this._mdf = !1, this._opMdf = !1;\n        }, TransformEffect.prototype.renderFrame = function(t1) {\n            if (this._opMdf = !1, this._mdf = !1, t1 || this.effectsManager._mdf) {\n                var e1 = this.effectsManager.effectElements, r1 = e1[0].p.v, i1 = e1[1].p.v, s1 = 1 === e1[2].p.v, a1 = e1[3].p.v, n1 = s1 ? a1 : e1[4].p.v, o1 = e1[5].p.v, h1 = e1[6].p.v, l1 = e1[7].p.v;\n                this.matrix.reset(), this.matrix.translate(-r1[0], -r1[1], r1[2]), this.matrix.scale(.01 * n1, .01 * a1, 1), this.matrix.rotate(-l1 * degToRads), this.matrix.skewFromAxis(-o1 * degToRads, (h1 + 90) * degToRads), this.matrix.translate(i1[0], i1[1], 0), this._mdf = !0, this.opacity !== e1[8].p.v && (this.opacity = e1[8].p.v, this._opMdf = !0);\n            }\n        }, extendPrototype([\n            TransformEffect\n        ], SVGTransformEffect), extendPrototype([\n            TransformEffect\n        ], CVTransformEffect), registerRenderer(\"canvas\", CanvasRenderer), registerRenderer(\"html\", HybridRenderer), registerRenderer(\"svg\", SVGRenderer), ShapeModifiers.registerModifier(\"tm\", TrimModifier), ShapeModifiers.registerModifier(\"pb\", PuckerAndBloatModifier), ShapeModifiers.registerModifier(\"rp\", RepeaterModifier), ShapeModifiers.registerModifier(\"rd\", RoundCornersModifier), ShapeModifiers.registerModifier(\"zz\", ZigZagModifier), ShapeModifiers.registerModifier(\"op\", OffsetPathModifier), setExpressionsPlugin(Expressions), setExpressionInterfaces(getInterface), initialize$1(), initialize(), registerEffect$1(20, SVGTintFilter, !0), registerEffect$1(21, SVGFillFilter, !0), registerEffect$1(22, SVGStrokeEffect, !1), registerEffect$1(23, SVGTritoneFilter, !0), registerEffect$1(24, SVGProLevelsFilter, !0), registerEffect$1(25, SVGDropShadowEffect, !0), registerEffect$1(28, SVGMatte3Effect, !1), registerEffect$1(29, SVGGaussianBlurEffect, !0), registerEffect$1(35, SVGTransformEffect, !1), registerEffect(35, CVTransformEffect), lottie;\n    }, module.exports = factory());\n})(lottie$1, lottie$1.exports);\nvar lottie = lottie$1.exports, _templateObject$1, styles = r$3(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral([\n    \"\\n  * {\\n    box-sizing: border-box;\\n  }\\n\\n  :host {\\n    --lottie-player-toolbar-height: 35px;\\n    --lottie-player-toolbar-background-color: transparent;\\n    --lottie-player-toolbar-icon-color: #999;\\n    --lottie-player-toolbar-icon-hover-color: #222;\\n    --lottie-player-toolbar-icon-active-color: #555;\\n    --lottie-player-seeker-track-color: #ccc;\\n    --lottie-player-seeker-thumb-color: rgba(0, 107, 120, 0.8);\\n    --lottie-player-seeker-display: block;\\n\\n    display: block;\\n    width: 100%;\\n    height: 100%;\\n  }\\n\\n  .main {\\n    display: flex;\\n    flex-direction: column;\\n    height: 100%;\\n    width: 100%;\\n  }\\n\\n  .animation {\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n  }\\n  .animation.controls {\\n    height: calc(100% - 35px);\\n  }\\n\\n  .toolbar {\\n    display: flex;\\n    align-items: center;\\n    justify-items: center;\\n    background-color: var(--lottie-player-toolbar-background-color);\\n    margin: 0 5px;\\n    height: 35px;\\n  }\\n\\n  .toolbar button {\\n    cursor: pointer;\\n    fill: var(--lottie-player-toolbar-icon-color);\\n    display: flex;\\n    background: none;\\n    border: 0;\\n    padding: 0;\\n    outline: none;\\n    height: 100%;\\n  }\\n\\n  .toolbar button:hover {\\n    fill: var(--lottie-player-toolbar-icon-hover-color);\\n  }\\n\\n  .toolbar button.active {\\n    fill: var(--lottie-player-toolbar-icon-active-color);\\n  }\\n\\n  .toolbar button.active:hover {\\n    fill: var(--lottie-player-toolbar-icon-hover-color);\\n  }\\n\\n  .toolbar button:focus {\\n    outline: 1px dotted var(--lottie-player-toolbar-icon-active-color);\\n  }\\n\\n  .toolbar button svg {\\n  }\\n\\n  .toolbar button.disabled svg {\\n    display: none;\\n  }\\n\\n  .seeker {\\n    -webkit-appearance: none;\\n    width: 95%;\\n    outline: none;\\n    background-color: var(--lottie-player-toolbar-background-color);\\n    display: var(--lottie-player-seeker-display);\\n  }\\n\\n  .seeker::-webkit-slider-runnable-track {\\n    width: 100%;\\n    height: 5px;\\n    cursor: pointer;\\n    background: var(--lottie-player-seeker-track-color);\\n    border-radius: 3px;\\n  }\\n  .seeker::-webkit-slider-thumb {\\n    height: 15px;\\n    width: 15px;\\n    border-radius: 50%;\\n    background: var(--lottie-player-seeker-thumb-color);\\n    cursor: pointer;\\n    -webkit-appearance: none;\\n    margin-top: -5px;\\n  }\\n  .seeker:focus::-webkit-slider-runnable-track {\\n    background: #999;\\n  }\\n  .seeker::-moz-range-track {\\n    width: 100%;\\n    height: 5px;\\n    cursor: pointer;\\n    background: var(--lottie-player-seeker-track-color);\\n    border-radius: 3px;\\n  }\\n  .seeker::-moz-range-thumb {\\n    height: 15px;\\n    width: 15px;\\n    border-radius: 50%;\\n    background: var(--lottie-player-seeker-thumb-color);\\n    cursor: pointer;\\n  }\\n  .seeker::-ms-track {\\n    width: 100%;\\n    height: 5px;\\n    cursor: pointer;\\n    background: transparent;\\n    border-color: transparent;\\n    color: transparent;\\n  }\\n  .seeker::-ms-fill-lower {\\n    background: var(--lottie-player-seeker-track-color);\\n    border-radius: 3px;\\n  }\\n  .seeker::-ms-fill-upper {\\n    background: var(--lottie-player-seeker-track-color);\\n    border-radius: 3px;\\n  }\\n  .seeker::-ms-thumb {\\n    border: 0;\\n    height: 15px;\\n    width: 15px;\\n    border-radius: 50%;\\n    background: var(--lottie-player-seeker-thumb-color);\\n    cursor: pointer;\\n  }\\n  .seeker:focus::-ms-fill-lower {\\n    background: var(--lottie-player-seeker-track-color);\\n  }\\n  .seeker:focus::-ms-fill-upper {\\n    background: var(--lottie-player-seeker-track-color);\\n  }\\n\\n  .error {\\n    display: flex;\\n    justify-content: center;\\n    height: 100%;\\n    align-items: center;\\n  }\\n\"\n]))), LOTTIE_PLAYER_VERSION = \"2.0.3\", LOTTIE_WEB_VERSION = \"^5.12.2\", _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, PlayerState, PlayMode, PlayerEvents;\nfunction parseSrc(t1) {\n    if (\"object\" == typeof t1) return t1;\n    try {\n        return JSON.parse(t1);\n    } catch (e1) {\n        return new URL(t1, window.location.href).toString();\n    }\n}\nfunction isLottie(t1) {\n    return [\n        \"v\",\n        \"ip\",\n        \"op\",\n        \"layers\",\n        \"fr\",\n        \"w\",\n        \"h\"\n    ].every((e1)=>Object.prototype.hasOwnProperty.call(t1, e1));\n}\nfunction fromURL(t1) {\n    return _fromURL.apply(this, arguments);\n}\nfunction _fromURL() {\n    return (_fromURL = _asyncToGenerator(function*(t1) {\n        if (\"string\" != typeof t1) throw new Error(\"The url value must be a string\");\n        var e1;\n        try {\n            var r1 = new URL(t1), i1 = yield fetch(r1.toString());\n            e1 = yield i1.json();\n        } catch (t1) {\n            throw new Error(\"An error occurred while trying to load the Lottie file from URL\");\n        }\n        return e1;\n    })).apply(this, arguments);\n}\n!function(t1) {\n    t1.Destroyed = \"destroyed\", t1.Error = \"error\", t1.Frozen = \"frozen\", t1.Loading = \"loading\", t1.Paused = \"paused\", t1.Playing = \"playing\", t1.Stopped = \"stopped\";\n}(PlayerState || (PlayerState = {})), function(t1) {\n    t1.Bounce = \"bounce\", t1.Normal = \"normal\";\n}(PlayMode || (PlayMode = {})), function(t1) {\n    t1.Complete = \"complete\", t1.Destroyed = \"destroyed\", t1.Error = \"error\", t1.Frame = \"frame\", t1.Freeze = \"freeze\", t1.Load = \"load\", t1.Loop = \"loop\", t1.Pause = \"pause\", t1.Play = \"play\", t1.Ready = \"ready\", t1.Rendered = \"rendered\", t1.Stop = \"stop\";\n}(PlayerEvents || (PlayerEvents = {}));\nvar LottiePlayer = class extends s {\n    constructor(){\n        super(...arguments), this.autoplay = !1, this.background = \"transparent\", this.controls = !1, this.currentState = PlayerState.Loading, this.description = \"Lottie animation\", this.direction = 1, this.disableCheck = !1, this.disableShadowDOM = !1, this.hover = !1, this.intermission = 1, this.loop = !1, this.mode = PlayMode.Normal, this.preserveAspectRatio = \"xMidYMid meet\", this.renderer = \"svg\", this.speed = 1, this._io = void 0, this._counter = 1;\n    }\n    load(t1) {\n        var e1 = this;\n        return _asyncToGenerator(function*() {\n            var r1 = {\n                container: e1.container,\n                loop: !1,\n                autoplay: !1,\n                renderer: e1.renderer,\n                rendererSettings: Object.assign({\n                    preserveAspectRatio: e1.preserveAspectRatio,\n                    clearCanvas: !1,\n                    progressiveLoad: !0,\n                    hideOnTransparent: !0\n                }, e1.viewBoxSize && {\n                    viewBoxSize: e1.viewBoxSize\n                })\n            };\n            try {\n                var i1 = parseSrc(t1), s1 = {}, a1 = \"string\" == typeof i1 ? \"path\" : \"animationData\";\n                e1._lottie && e1._lottie.destroy(), e1.webworkers && lottie$1.exports.useWebWorker(!0), e1._lottie = lottie$1.exports.loadAnimation(Object.assign(Object.assign({}, r1), {\n                    [a1]: i1\n                })), e1._attachEventListeners(), e1.disableCheck || (\"path\" === a1 ? (s1 = yield fromURL(i1), a1 = \"animationData\") : s1 = i1, isLottie(s1) || (e1.currentState = PlayerState.Error, e1.dispatchEvent(new CustomEvent(PlayerEvents.Error))));\n            } catch (t1) {\n                e1.currentState = PlayerState.Error, e1.dispatchEvent(new CustomEvent(PlayerEvents.Error));\n            }\n        })();\n    }\n    getLottie() {\n        return this._lottie;\n    }\n    getVersions() {\n        return {\n            lottieWebVersion: LOTTIE_WEB_VERSION,\n            lottiePlayerVersion: LOTTIE_PLAYER_VERSION\n        };\n    }\n    play() {\n        this._lottie && (this._lottie.play(), this.currentState = PlayerState.Playing, this.dispatchEvent(new CustomEvent(PlayerEvents.Play)));\n    }\n    pause() {\n        this._lottie && (this._lottie.pause(), this.currentState = PlayerState.Paused, this.dispatchEvent(new CustomEvent(PlayerEvents.Pause)));\n    }\n    stop() {\n        this._lottie && (this._counter = 1, this._lottie.stop(), this.currentState = PlayerState.Stopped, this.dispatchEvent(new CustomEvent(PlayerEvents.Stop)));\n    }\n    destroy() {\n        this._lottie && (this._lottie.destroy(), this._lottie = null, this.currentState = PlayerState.Destroyed, this.dispatchEvent(new CustomEvent(PlayerEvents.Destroyed)), this.remove());\n    }\n    seek(t1) {\n        if (this._lottie) {\n            var e1 = /^(\\d+)(%?)$/.exec(t1.toString());\n            if (e1) {\n                var r1 = \"%\" === e1[2] ? this._lottie.totalFrames * Number(e1[1]) / 100 : Number(e1[1]);\n                this.seeker = r1, this.currentState === PlayerState.Playing ? this._lottie.goToAndPlay(r1, !0) : (this._lottie.goToAndStop(r1, !0), this._lottie.pause());\n            }\n        }\n    }\n    snapshot() {\n        var t1 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];\n        if (this.shadowRoot) {\n            var e1 = this.shadowRoot.querySelector(\".animation svg\"), r1 = (new XMLSerializer).serializeToString(e1);\n            if (t1) {\n                var i1 = document.createElement(\"a\");\n                i1.href = \"data:image/svg+xml;charset=utf-8,\".concat(encodeURIComponent(r1)), i1.download = \"download_\".concat(this.seeker, \".svg\"), document.body.appendChild(i1), i1.click(), document.body.removeChild(i1);\n            }\n            return r1;\n        }\n    }\n    setSpeed() {\n        var t1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;\n        this._lottie && this._lottie.setSpeed(t1);\n    }\n    setDirection(t1) {\n        this._lottie && this._lottie.setDirection(t1);\n    }\n    setLooping(t1) {\n        this._lottie && (this.loop = t1, this._lottie.loop = t1);\n    }\n    togglePlay() {\n        return this.currentState === PlayerState.Playing ? this.pause() : this.play();\n    }\n    toggleLooping() {\n        this.setLooping(!this.loop);\n    }\n    resize() {\n        this._lottie && this._lottie.resize();\n    }\n    static get styles() {\n        return styles;\n    }\n    disconnectedCallback() {\n        this.isConnected || (this._io && (this._io.disconnect(), this._io = void 0), document.removeEventListener(\"visibilitychange\", ()=>this._onVisibilityChange()), this.destroy());\n    }\n    render() {\n        var t1 = this.controls ? \"main controls\" : \"main\", e1 = this.controls ? \"animation controls\" : \"animation\";\n        return $(_templateObject || (_templateObject = _taggedTemplateLiteral([\n            ' <div\\n      id=\"animation-container\"\\n      class=',\n            '\\n      lang=\"en\"\\n      aria-label=',\n            '\\n      role=\"img\"\\n    >\\n      <div\\n        id=\"animation\"\\n        class=',\n            '\\n        style=\"background:',\n            ';\"\\n      >\\n        ',\n            \"\\n      </div>\\n      \",\n            \"\\n    </div>\"\n        ])), t1, this.description, e1, this.background, this.currentState === PlayerState.Error ? $(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\n            '<div class=\"error\">⚠️</div>'\n        ]))) : void 0, this.controls && !this.disableShadowDOM ? this.renderControls() : void 0);\n    }\n    createRenderRoot() {\n        return this.disableShadowDOM && (this.style.display = \"block\"), this.disableShadowDOM ? this : super.createRenderRoot();\n    }\n    firstUpdated() {\n        \"IntersectionObserver\" in window && (this._io = new IntersectionObserver((t1)=>{\n            t1[0].isIntersecting ? this.currentState === PlayerState.Frozen && this.play() : this.currentState === PlayerState.Playing && this.freeze();\n        }), this._io.observe(this.container)), void 0 !== document.hidden && document.addEventListener(\"visibilitychange\", ()=>this._onVisibilityChange()), this.src && this.load(this.src), this.dispatchEvent(new CustomEvent(PlayerEvents.Rendered));\n    }\n    renderControls() {\n        var t1 = this.currentState === PlayerState.Playing, e1 = this.currentState === PlayerState.Paused, r1 = this.currentState === PlayerState.Stopped;\n        return $(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\n            '\\n      <div\\n        id=\"lottie-controls\"\\n        aria-label=\"lottie-animation-controls\"\\n        class=\"toolbar\"\\n      >\\n        <button\\n          id=\"lottie-play-button\"\\n          @click=',\n            \"\\n          class=\",\n            '\\n          style=\"align-items:center;\"\\n          tabindex=\"0\"\\n          aria-label=\"play-pause\"\\n        >\\n          ',\n            '\\n        </button>\\n        <button\\n          id=\"lottie-stop-button\"\\n          @click=',\n            \"\\n          class=\",\n            '\\n          style=\"align-items:center;\"\\n          tabindex=\"0\"\\n          aria-label=\"stop\"\\n        >\\n          <svg width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\">\\n            <path d=\"M6 6h12v12H6V6z\" />\\n          </svg>\\n        </button>\\n        <input\\n          id=\"lottie-seeker-input\"\\n          class=\"seeker\"\\n          type=\"range\"\\n          min=\"0\"\\n          step=\"1\"\\n          max=\"100\"\\n          .value=',\n            \"\\n          @input=\",\n            \"\\n          @mousedown=\",\n            \"\\n          @mouseup=\",\n            '\\n          aria-valuemin=\"1\"\\n          aria-valuemax=\"100\"\\n          role=\"slider\"\\n          aria-valuenow=',\n            '\\n          tabindex=\"0\"\\n          aria-label=\"lottie-seek-input\"\\n        />\\n        <button\\n          id=\"lottie-loop-toggle\"\\n          @click=',\n            \"\\n          class=\",\n            '\\n          style=\"align-items:center;\"\\n          tabindex=\"0\"\\n          aria-label=\"loop-toggle\"\\n        >\\n          <svg width=\"24\" height=\"24\" aria-hidden=\"true\" focusable=\"false\">\\n            <path\\n              d=\"M17.016 17.016v-4.031h1.969v6h-12v3l-3.984-3.984 3.984-3.984v3h10.031zM6.984 6.984v4.031H5.015v-6h12v-3l3.984 3.984-3.984 3.984v-3H6.984z\"\\n            />\\n          </svg>\\n        </button>\\n      </div>\\n    '\n        ])), this.togglePlay, t1 || e1 ? \"active\" : \"\", $(t1 ? _templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\n            '<svg\\n                width=\"24\"\\n                height=\"24\"\\n                aria-hidden=\"true\"\\n                focusable=\"false\"\\n              >\\n                <path\\n                  d=\"M14.016 5.016H18v13.969h-3.984V5.016zM6 18.984V5.015h3.984v13.969H6z\"\\n                />\\n              </svg>'\n        ])) : _templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\n            '<svg\\n                width=\"24\"\\n                height=\"24\"\\n                aria-hidden=\"true\"\\n                focusable=\"false\"\\n              >\\n                <path d=\"M8.016 5.016L18.985 12 8.016 18.984V5.015z\" />\\n              </svg>'\n        ]))), this.stop, r1 ? \"active\" : \"\", this.seeker, this._handleSeekChange, ()=>{\n            this._prevState = this.currentState, this.freeze();\n        }, ()=>{\n            this._prevState === PlayerState.Playing && this.play();\n        }, this.seeker, this.toggleLooping, this.loop ? \"active\" : \"\");\n    }\n    _onVisibilityChange() {\n        !0 === document.hidden && this.currentState === PlayerState.Playing ? this.freeze() : this.currentState === PlayerState.Frozen && this.play();\n    }\n    _handleSeekChange(t1) {\n        if (this._lottie && !isNaN(t1.target.value)) {\n            var e1 = t1.target.value / 100 * this._lottie.totalFrames;\n            this.seek(e1);\n        }\n    }\n    _attachEventListeners() {\n        this._lottie.addEventListener(\"enterFrame\", ()=>{\n            this.seeker = this._lottie.currentFrame / this._lottie.totalFrames * 100, this.dispatchEvent(new CustomEvent(PlayerEvents.Frame, {\n                detail: {\n                    frame: this._lottie.currentFrame,\n                    seeker: this.seeker\n                }\n            }));\n        }), this._lottie.addEventListener(\"complete\", ()=>{\n            if (this.currentState === PlayerState.Playing) {\n                if (!this.loop || this.count && this._counter >= this.count) {\n                    if (this.dispatchEvent(new CustomEvent(PlayerEvents.Complete)), this.mode !== PlayMode.Bounce) return;\n                    if (0 === this._lottie.currentFrame) return;\n                }\n                this.mode === PlayMode.Bounce ? (this.count && (this._counter += .5), setTimeout(()=>{\n                    this.dispatchEvent(new CustomEvent(PlayerEvents.Loop)), this.currentState === PlayerState.Playing && (this._lottie.setDirection(-1 * this._lottie.playDirection), this._lottie.play());\n                }, this.intermission)) : (this.count && (this._counter += 1), window.setTimeout(()=>{\n                    this.dispatchEvent(new CustomEvent(PlayerEvents.Loop)), this.currentState === PlayerState.Playing && (-1 === this.direction ? (this.seek(\"99%\"), this.play()) : (this._lottie.stop(), this._lottie.play()));\n                }, this.intermission));\n            } else this.dispatchEvent(new CustomEvent(PlayerEvents.Complete));\n        }), this._lottie.addEventListener(\"DOMLoaded\", ()=>{\n            this.setSpeed(this.speed), this.setDirection(this.direction), this.autoplay && (-1 === this.direction && this.seek(\"100%\"), this.play()), this.dispatchEvent(new CustomEvent(PlayerEvents.Ready));\n        }), this._lottie.addEventListener(\"data_ready\", ()=>{\n            this.dispatchEvent(new CustomEvent(PlayerEvents.Load));\n        }), this._lottie.addEventListener(\"data_failed\", ()=>{\n            this.currentState = PlayerState.Error, this.dispatchEvent(new CustomEvent(PlayerEvents.Error));\n        }), this.container.addEventListener(\"mouseenter\", ()=>{\n            this.hover && this.currentState !== PlayerState.Playing && this.play();\n        }), this.container.addEventListener(\"mouseleave\", ()=>{\n            this.hover && this.currentState === PlayerState.Playing && this.stop();\n        });\n    }\n    freeze() {\n        this._lottie && (this._lottie.pause(), this.currentState = PlayerState.Frozen, this.dispatchEvent(new CustomEvent(PlayerEvents.Freeze)));\n    }\n};\n__decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"autoplay\", void 0), __decorate([\n    e$5({\n        type: String,\n        reflect: !0\n    })\n], LottiePlayer.prototype, \"background\", void 0), __decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"controls\", void 0), __decorate([\n    e$5({\n        type: Number\n    })\n], LottiePlayer.prototype, \"count\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"currentState\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"description\", void 0), __decorate([\n    e$5({\n        type: Number\n    })\n], LottiePlayer.prototype, \"direction\", void 0), __decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"disableCheck\", void 0), __decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"disableShadowDOM\", void 0), __decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"hover\", void 0), __decorate([\n    e$5()\n], LottiePlayer.prototype, \"intermission\", void 0), __decorate([\n    e$5({\n        type: Boolean,\n        reflect: !0\n    })\n], LottiePlayer.prototype, \"loop\", void 0), __decorate([\n    e$5()\n], LottiePlayer.prototype, \"mode\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"preserveAspectRatio\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"renderer\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"viewBoxSize\", void 0), __decorate([\n    e$5()\n], LottiePlayer.prototype, \"seeker\", void 0), __decorate([\n    e$5({\n        type: Number\n    })\n], LottiePlayer.prototype, \"speed\", void 0), __decorate([\n    e$5({\n        type: String\n    })\n], LottiePlayer.prototype, \"src\", void 0), __decorate([\n    e$5({\n        type: Boolean\n    })\n], LottiePlayer.prototype, \"webworkers\", void 0), __decorate([\n    i(\".animation\")\n], LottiePlayer.prototype, \"container\", void 0), LottiePlayer = __decorate([\n    n$1(\"lottie-player\")\n], LottiePlayer);\n //# sourceMappingURL=lottie-player.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lottiefiles/lottie-player/dist/lottie-player.esm.js\n");

/***/ })

};
;